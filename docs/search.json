[
  {
    "objectID": "lessons/creating-maps.html",
    "href": "lessons/creating-maps.html",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?\n\n\n\n\n\nLearn how to plot iNaturalist observations on a map\nLearn how to create static maps with ggplot2\nLearn how to create interactive maps with mapview",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#questions",
    "href": "lessons/creating-maps.html#questions",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#objectives",
    "href": "lessons/creating-maps.html#objectives",
    "title": "Creating maps",
    "section": "",
    "text": "Learn how to plot iNaturalist observations on a map\nLearn how to create static maps with ggplot2\nLearn how to create interactive maps with mapview",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#geographic-concepts",
    "href": "lessons/creating-maps.html#geographic-concepts",
    "title": "Creating maps",
    "section": "Geographic concepts",
    "text": "Geographic concepts\nGeographic data is data that has a location.\nThere are various file formats for geographic data. Shape files for GIS applications, KML for Google maps, geojson for web applications.\nEarth is a 3D sphere. Maps are 2D representation of a 3D sphere. Map projections are ways to represent a sphere as a flat surface. A coordinate reference system (CRS) defines how the two-dimensional, projected map relates to real places on the earth.\nMany organizations offer geospatial data that people can use for free. Los Angeles City has a portal for geospatial data: https://geohub.lacity.org",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#mapping-inaturalist-data",
    "href": "lessons/creating-maps.html#mapping-inaturalist-data",
    "title": "Creating maps",
    "section": "Mapping iNaturalist data",
    "text": "Mapping iNaturalist data\niNaturalist data includes latitude and longitude, which means we can put the observations in a map. There are several packages to create maps. We will use ggplot and mapview packages.\nMain steps:\n\nLoad iNaturalist data\nAdd geometry column to iNaturalist dataframe\nUse filter() to get the rows we want. Use select() to get the columns we want.\nCreate map.\n\nloading R packages\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(mapview) # create interactive maps\n\nRead data from the cleaned iNaturalist observation file.\n\ninat &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\nUse names() to see all the column names. “latitude” and “longitude” are the column names we need.\n\nnames(inat)\n\n [1] \"id\"                               \"uuid\"                            \n [3] \"observed_on_string\"               \"observed_on\"                     \n [5] \"time_observed_at\"                 \"time_zone\"                       \n [7] \"user_id\"                          \"user_login\"                      \n [9] \"user_name\"                        \"created_at\"                      \n[11] \"updated_at\"                       \"quality_grade\"                   \n[13] \"license\"                          \"url\"                             \n[15] \"image_url\"                        \"sound_url\"                       \n[17] \"tag_list\"                         \"description\"                     \n[19] \"num_identification_agreements\"    \"num_identification_disagreements\"\n[21] \"captive_cultivated\"               \"oauth_application_id\"            \n[23] \"place_guess\"                      \"latitude\"                        \n[25] \"longitude\"                        \"positional_accuracy\"             \n[27] \"private_place_guess\"              \"private_latitude\"                \n[29] \"private_longitude\"                \"public_positional_accuracy\"      \n[31] \"geoprivacy\"                       \"taxon_geoprivacy\"                \n[33] \"coordinates_obscured\"             \"positioning_method\"              \n[35] \"positioning_device\"               \"species_guess\"                   \n[37] \"scientific_name\"                  \"common_name\"                     \n[39] \"iconic_taxon_name\"                \"taxon_id\"                        \n\n\nWe use the sf package to add geographic data to our dataframe. st_as_sf() from sf package will take the longitude and latitude and add a geometry column that we can use for mapping.\n\nWe pass in longitude and latitude columns to coords argument. Must wrap longitude and latitude in quotes.\ncrs is coordinate reference system. 4326 is code for the WGS 84 CRS. WGS 84 is a commonly used CRS. WGS 84 is used in GPS applications.\nremove=FALSE will keep the longitude and latitude columns in the dataframe\n\n\ntemp &lt;- inat %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE)\n\nuse names() to get a list of all the columns. A geometry column was added.\n\nnames(temp)\n\n [1] \"id\"                               \"uuid\"                            \n [3] \"observed_on_string\"               \"observed_on\"                     \n [5] \"time_observed_at\"                 \"time_zone\"                       \n [7] \"user_id\"                          \"user_login\"                      \n [9] \"user_name\"                        \"created_at\"                      \n[11] \"updated_at\"                       \"quality_grade\"                   \n[13] \"license\"                          \"url\"                             \n[15] \"image_url\"                        \"sound_url\"                       \n[17] \"tag_list\"                         \"description\"                     \n[19] \"num_identification_agreements\"    \"num_identification_disagreements\"\n[21] \"captive_cultivated\"               \"oauth_application_id\"            \n[23] \"place_guess\"                      \"latitude\"                        \n[25] \"longitude\"                        \"positional_accuracy\"             \n[27] \"private_place_guess\"              \"private_latitude\"                \n[29] \"private_longitude\"                \"public_positional_accuracy\"      \n[31] \"geoprivacy\"                       \"taxon_geoprivacy\"                \n[33] \"coordinates_obscured\"             \"positioning_method\"              \n[35] \"positioning_device\"               \"species_guess\"                   \n[37] \"scientific_name\"                  \"common_name\"                     \n[39] \"iconic_taxon_name\"                \"taxon_id\"                        \n[41] \"geometry\"                        \n\n\nuse select() to pick which columns to use.\n\ninat_map &lt;- inat %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE) %&gt;% \n  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry, quality_grade) \n\nUse dim() to show the number of rows and columns. There are over 191K rows.\n\ndim(inat_map)\n\n[1] 191638     10\n\n\nLet’s use filter to get the observations for ‘Quercus agrifolia’ aka Coast Live Oak.\n\ninat_oak &lt;- inat_map %&gt;% \n  filter(scientific_name == 'Quercus agrifolia')\n\nUse dim to get number of rows. About 700 rows.\n\ndim(inat_oak)\n\n[1] 710  10",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#static-map",
    "href": "lessons/creating-maps.html#static-map",
    "title": "Creating maps",
    "section": "static map",
    "text": "static map\nUse ggplot to create static map for all 191K observations. geom_sf() will use geometry column to create a black circle for each observation.\n\nggplot() +\n  geom_sf(data = inat_map)  \n\n\n\n\n\n\n\n\nLet’s create a map for Coast Live Oak observations.\n\nggplot() +\n  geom_sf(data = inat_oak)  \n\n\n\n\n\n\n\n\nWe can set the color of the map marker using color argument.\n\nggplot() +\n  geom_sf(data = inat_oak, color='green')  \n\n\n\n\n\n\n\n\nWe can also set the color of the marker by using the values of a given column using mapping=aes(color=&lt;column_name&gt;).\nLet’s use ‘quality_grade’ to set the color of the map markers.\n\nggplot() +\n  geom_sf(data = inat_oak, mapping=aes(color=quality_grade))",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#interactive-map",
    "href": "lessons/creating-maps.html#interactive-map",
    "title": "Creating maps",
    "section": "interactive map",
    "text": "interactive map\nWe can use mapview package to create interactive maps where you can zoom in and out.\nSince there are over 191K rows in inat_map, an interactive map will be very slow. Do not use mapview if there are lots of rows.\nLet’s create interactive map for Coast Live Oak. When you click on observation, all the fields that were set from select() will be displayed in a popup.\n\nmapview(inat_oak)\n\nUse color to set the color of the border. User col.regions to set the color of the fill.\n\nmapview(inat_oak, color='black', col.regions='green')\n\nWe can also set the color of the marker by using the values of a given column using zcol=&lt;column_name&gt;.\nLet’s use ‘quality_grade’ to set the color of the map markers.\n\nmapview(inat_oak, zcol='quality_grade')",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#working-with-other-geographic-files",
    "href": "lessons/creating-maps.html#working-with-other-geographic-files",
    "title": "Creating maps",
    "section": "working with other geographic files",
    "text": "working with other geographic files\nLet’s add LA county boundaries to the map.\nShape files is a file format for geographic information system software. I downloaded the LA county boundaries as a Shape file from https://geohub.lacity.org/datasets/lacounty::county-boundaries/explore\nuse read_sf() from sf package to read the Shape file.\n\nla_county &lt;- read_sf('data/raw/County_Boundary/County_Boundary.shp')\n\nadd LA County to maps.\n\nggplot() +\n  geom_sf(data = la_county)  +\n  geom_sf(data = inat_oak) \n\n\n\n\n\n\n\n\n\nmapview(la_county) +\n  mapview(inat_oak)",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-1",
    "href": "lessons/creating-maps.html#exercise-1",
    "title": "Creating maps",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a map for one species. Include the boundaries for LA County.\n\nuse filter() to select observations for one species\ncreate either a static or interactive map.\n\n\n\ninat_finch &lt;- inat_map %&gt;% \n  filter(common_name == 'House Finch')\n\nmapview(la_county) + \n  mapview(inat_finch)",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exploring-inaturlist-data-in-specific-area",
    "href": "lessons/creating-maps.html#exploring-inaturlist-data-in-specific-area",
    "title": "Creating maps",
    "section": "Exploring iNaturlist data in specific area",
    "text": "Exploring iNaturlist data in specific area\nLets look for all iNaturalist observations made in Exposition Park.\nI used this Draw map boundaries to draw and download the boundaries of Exposition Park. The file is in geojson format.\nuse st_read() to read a geojson file. Use st_transform to set the crs\n\nexpo_park &lt;- st_read('data/raw/boundaries_expo_park_area.geojson')  %&gt;% \n  st_transform(4326)\n\nReading layer `boundaries_expo_park_area' from data source \n  `/Users/wyk/Development/science/city_nature_challenge/NHMLA_workshop/CNC-coding-workshop_quarto/lessons/data/raw/boundaries_expo_park_area.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -118.2915 ymin: 34.01096 xmax: -118.2829 ymax: 34.01806\nGeodetic CRS:  WGS 84\n\n\ncreate map of Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park) \n\n\n\n\n\n\n\n\n\nmapview(expo_park) \n\nWe want to get observation inside Expo Park.\nYou should check if the crs for the inaturalist data and the Expo Park are the same\n\nst_crs(expo_park) == st_crs(inat_map)\n\n[1] TRUE\n\n\nUse st_intersection() to get all observations that inside of Exposition Park. This might take a while.\n\ninat_expo &lt;- inat_map %&gt;% st_intersection(expo_park)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\nUse dim to get row and column count. 191K in LA county. 2900 observation in Expo Park.\n\ndim(inat_map)\n\n[1] 191638     10\n\ndim(inat_expo)\n\n[1] 2964   12\n\n\nCreate map of all observations in Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park)  +\n  geom_sf(data = inat_expo) \n\n\n\n\n\n\n\n\n\nmapview(expo_park) +\n  mapview(inat_expo) \n\nUse alpha.regions to set opacity. Use col.regions to set color.\n\nmapview(expo_park,   alpha.regions=0.3, col.regions=\"#333333\") +\n  mapview(inat_expo, col.regions=\"green\")",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-2",
    "href": "lessons/creating-maps.html#exercise-2",
    "title": "Creating maps",
    "section": "Exercise 2",
    "text": "Exercise 2\nCreate a map for one species that are inside of a specific area\n\nUsed Draw map boundaries to draw and download an area that you are interested in.\nSave the file to the data/raw directory.\nuse st_read to read your boundary data.\nuse st_intersection to get observations inside a boundary\n\n\n\nexpo_park &lt;- st_read('data/raw/boundaries_expo_park_area.geojson')  %&gt;% \n  st_transform(4326)\n\n\ninat_finch &lt;- inat_map %&gt;% \n  filter(common_name == 'House Finch')  %&gt;% \n  st_intersection(expo_park)\n\nmapview(expo_park) + \n  mapview(inat_finch)",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exporting-maps",
    "href": "lessons/creating-maps.html#exporting-maps",
    "title": "Creating maps",
    "section": "Exporting maps",
    "text": "Exporting maps\nWe can export the maps created with ggplot and mapview as image files.\n\nstatic maps\nAssign the map created by ggplot to an object. Then run ggsave() to save our map. The first argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\nmy_map &lt;- ggplot() +\n  geom_sf(data = expo_park)  +\n  geom_sf(data = inat_expo) \n\nmy_map\n\n\n\n\n\n\n\n\n\nggsave(filename = 'results/expo_park_observations.jpg', plot = my_map,  height = 6, width = 8)\n\n\n\ninteractive map\nAssign the map created by mapview to an object. Then run mapshot() to save our map. The first argument is map you want to to save. The second argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, or png.\n\nmy_map_2 &lt;- mapview(expo_park) + \n  mapview(inat_expo)\n\nmy_map_2\n\n\nmapshot(my_map_2, file = 'results/expo_park_observations_3.jpg')",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  }
]