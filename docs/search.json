[
  {
    "objectID": "lessons/next-steps.html",
    "href": "lessons/next-steps.html",
    "title": "Next steps",
    "section": "",
    "text": "We have covered various ways to do basic analyze iNaturalist data.\nNext step is for you to come up with some questions, and analyze the CNC iNaturalist data.\nWe covered a lot of information, so review the lessons notes, scripts, and videos.\nCreate a script file to save your work. Copy and paste examples provided in the lessons, and adjust them to fit your needs. When you have something that kinda works, save the script file and the results.\nTry lots of different way to look at the data. You can create multiple script files.\nAdd comments to the code to remind yourself what the code does.\nAs you are analyzing the data, think about how you want to present your results.\nAttend the office hours or email me if you have questions.",
    "crumbs": [
      "Next steps"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html",
    "href": "lessons/additional-analysis.html",
    "title": "Additional Analysis",
    "section": "",
    "text": "In this section, we will show a few more examples of maps and charts.\nFor more examples of charts and graphs visit R Graph Gallery.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(mapview) # create interactive maps\nFirst, we need to read data from the CNC iNaturalist observation file.\ninat_data &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\nLet’s add a geometry column\ninat_map &lt;- inat_data %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326) %&gt;% \n  select(user_login, common_name, scientific_name, observed_on,  url, geometry, quality_grade)\nLet’s get the observations for ‘Quercus agrifolia’ aka Coast Live Oak.\ninat_oak_map &lt;- inat_map %&gt;% \n  filter(scientific_name == 'Quercus agrifolia')\nLet’s add a year column to iNaturalist data.\ninat_year &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))",
    "crumbs": [
      "Extra",
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#stacked-bar-charts",
    "href": "lessons/additional-analysis.html#stacked-bar-charts",
    "title": "Additional Analysis",
    "section": "Stacked bar charts",
    "text": "Stacked bar charts\nWe can create stacked bar charts by adding a column from the data frame to aes() function fill argument. Let’s create a stacked bar chart using quality_grade.\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar()   \n\n\n\n\n\n\n\n\nThe height of each bar represents the number of observations per year. The height of the 3 rectangles in each bar represents the number of observations that are labeled casual, needs_id, and research.\nggplot2 assigns each quality grade a different color, and creates a legend that tells you which values goes with which color.",
    "crumbs": [
      "Extra",
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#dodged-bar-charts",
    "href": "lessons/additional-analysis.html#dodged-bar-charts",
    "title": "Additional Analysis",
    "section": "Dodged bar charts",
    "text": "Dodged bar charts\nTo create side-by-side dodged bar charts, use position=position_dodge()\n\nggplot(data = inat_year , \n       mapping = aes(x = year, fill = quality_grade))  +\n  geom_bar(position = position_dodge(preserve = 'single'))",
    "crumbs": [
      "Extra",
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#multiple-line-charts",
    "href": "lessons/additional-analysis.html#multiple-line-charts",
    "title": "Additional Analysis",
    "section": "Multiple line charts",
    "text": "Multiple line charts\nIf we want a chart with multiple lines, we need to create a data frame with three columns: one column x axis, one column for y axis, and one column for color.\n\nyear_quality_count &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))  %&gt;%\n  count(year, quality_grade,  name='count') \n\nyear_quality_count\n\n# A tibble: 27 × 3\n    year quality_grade count\n   &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1  2016 casual         1819\n 2  2016 needs_id       2605\n 3  2016 research       5968\n 4  2017 casual         3045\n 5  2017 needs_id       4855\n 6  2017 research       9595\n 7  2018 casual         2492\n 8  2018 needs_id       5698\n 9  2018 research      10974\n10  2019 casual         5696\n# ℹ 17 more rows\n\n\n\nggplot(data = year_quality_count, \n       mapping = aes(x = year, y = count, color = quality_grade)) +\n  geom_line()",
    "crumbs": [
      "Extra",
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#multiple-charts",
    "href": "lessons/additional-analysis.html#multiple-charts",
    "title": "Additional Analysis",
    "section": "Multiple charts",
    "text": "Multiple charts\nEach geom_ adds a layer to the chart. We can have multiple chart layers in one chart by having multiple geom_.\nLet’s create a bar and line chart that uses the same data and mapping.\n\ninat_year_count &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='count')  \n\ninat_year_count\n\n# A tibble: 9 × 2\n   year count\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\n\nggplot(data = inat_year_count,\n       mapping = aes(x = year, y = count)) +\n  geom_col() +\n  geom_line()\n\n\n\n\n\n\n\n\nLet’s create a dodged bar and line chart that uses the different data and different mapping. Instead of putting the information inside ggplot(), we put information in each geom_.\n\nggplot() +\n  geom_bar(data = inat_year , \n       mapping = aes(x = year, fill = quality_grade),\n       position = position_dodge(preserve = 'single')) +\n  geom_line(data = inat_year_count, \n       mapping = aes(x = year, y = count))",
    "crumbs": [
      "Extra",
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#choropleth-maps",
    "href": "lessons/additional-analysis.html#choropleth-maps",
    "title": "Additional Analysis",
    "section": "Choropleth maps",
    "text": "Choropleth maps\nChoropleth maps use colors or shades to show how data changes from place to place.\nLet’s create a choropleth map to show the number of CNC observations in L.A. County neighborhoods.\nLos Angeles Times Data Desk developed a map that broke down L.A. County in 272 neighborhoods. https://maps.latimes.com/about/index.html We’ll use the L.A. Times neighborhood boundaries for our map.\n\nla_neighborhoods &lt;- read_sf('data/raw/la_times_la_county_neighborhoods.json')\n\nUse glimpse() to examine the file data.\n\nglimpse(la_neighborhoods)\n\nRows: 272\nColumns: 3\n$ name     &lt;chr&gt; \"Acton\", \"Adams-Normandie\", \"Agoura Hills\", \"Agua Dulce\", \"Al…\n$ slug     &lt;chr&gt; \"acton\", \"adams-normandie\", \"agoura-hills\", \"agua-dulce\", \"al…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-118.2026 3..., MULTIPOLYGON (((…\n\n\nThe file has a geometry column.\nUse select() to pick the name and geometry columns.\n\nla_neighborhoods_edit &lt;- la_neighborhoods %&gt;%\n  select(name, geometry)\n\nCheck if the neighborhood maps have the same CRS as the iNaturalist data.\n\nst_crs(la_neighborhoods_edit) == st_crs(inat_map)\n\n[1] TRUE\n\n\nTher is a bug with sf https://github.com/r-spatial/sf/issues/1762. This bit of code is fix for the bug.\n\nsf_use_s2(FALSE)\n\nSpherical geometry (s2) switched off\n\n\nWe want to figure out how many observations are in each neighborhood. st_join() from sf figures out if items in one spatial object touch, cross, or is within items in a second spatial object. If an item intersects the second item, then the columns from the second item are added to the first item.\nThe following code will figure out if an observation in inat_map intersects the boundaries of la_neighborhoods_edit. If the observation intersects a neighborhood, the neighborhood name is added the observation. If the observation is not inside a neighborhood, name is set to NA. NA is a special value in R that means not applicable. filter(!is.na(name)) selects observations where name is not NA.\n\ninat_neigborhoods &lt;- st_join(inat_map, la_neighborhoods_edit) %&gt;%\n  filter(!is.na(name)) \n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\nglimpse(inat_neigborhoods)\n\nRows: 181,741\nColumns: 8\n$ user_login      &lt;chr&gt; \"msmorales\", \"smartrf\", \"cdegroof\", \"cdegroof\", \"cdegr…\n$ common_name     &lt;chr&gt; \"Garden Snail\", \"Bot Flies, Blow Flies, and Allies\", \"…\n$ scientific_name &lt;chr&gt; \"Cornu aspersum\", \"Oestroidea\", \"Arphia ramona\", \"Uta …\n$ observed_on     &lt;date&gt; 2016-04-14, 2016-04-14, 2016-04-14, 2016-04-14, 2016-…\n$ url             &lt;chr&gt; \"http://www.inaturalist.org/observations/2931940\", \"ht…\n$ geometry        &lt;POINT [°]&gt; POINT (-117.8219 34.05829), POINT (-118.2892 34.…\n$ quality_grade   &lt;chr&gt; \"research\", \"needs_id\", \"research\", \"research\", \"resea…\n$ name            &lt;chr&gt; \"Ramona\", \"Exposition Park\", \"Westlake Village\", \"West…\n\n\n181K out of the 191K CNC observations intersect one of the neigborhood boundaries.\nNext we use count() to get the number of observations per neighborhood. We also use st_drop_geometry() from sf to remove the geometry column. We want to remove the geometry column because we don’t need the location of each observation for the final map.\n\ninat_neigborhoods_counts &lt;- inat_neigborhoods %&gt;%\n  count(name, name='obs_count')  %&gt;%\n  st_drop_geometry()\n\nalthough coordinates are longitude/latitude, st_union assumes that they are\nplanar\n\nhead(inat_neigborhoods_counts)\n\n# A tibble: 6 × 2\n  name            obs_count\n  &lt;chr&gt;               &lt;int&gt;\n1 Acton                 331\n2 Adams-Normandie       132\n3 Agoura Hills          814\n4 Agua Dulce            994\n5 Alhambra              786\n6 Alondra Park          266\n\n\nNext use left_join() from dplyr to add obs_count from inat_neigborhoods_counts to neighborhood boundaries from la_neighborhoods_edit. left_join() will use the name column present in both data frames to combine the data.\n\nla_counts_map &lt;- left_join(la_neighborhoods_edit, inat_neigborhoods_counts)\n\nJoining with `by = join_by(name)`\n\nhead(la_counts_map)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.8004 ymin: 33.8773 xmax: -118.0797 ymax: 34.5583\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 3\n  name                                                        geometry obs_count\n  &lt;chr&gt;                                             &lt;MULTIPOLYGON [°]&gt;     &lt;int&gt;\n1 Acton           (((-118.2026 34.53899, -118.1982 34.53885, -118.193…       331\n2 Adams-Normandie (((-118.309 34.03741, -118.3057 34.03731, -118.3015…       132\n3 Agoura Hills    (((-118.7619 34.1682, -118.7619 34.1682, -118.7618 …       814\n4 Agua Dulce      (((-118.2547 34.5583, -118.2549 34.55373, -118.2549…       994\n5 Alhambra        (((-118.1217 34.10504, -118.1217 34.10498, -118.121…       786\n6 Alondra Park    (((-118.3265 33.89757, -118.3265 33.89705, -118.326…       266\n\n\nla_counts_map has three columns: name of the neighborhood, the number of observations, and geometry.\nWe can now create maps showing the number of observations per neighborhood.\naes(fill=&lt;column_name&gt;) sets which column is used to determine the color of each neighborhood. labs(fill='&lt;title&gt;') sets the title show in the legend.\n\nggplot() +\n  geom_sf(data = la_counts_map, \n          mapping=aes(fill=obs_count)) +\n  labs(title = 'CNC Observations by neighborhood', \n       subtitle = '2016-2024',\n       fill='Observations') +\n  theme_void()\n\n\n\n\n\n\n\n\nzcol sets which column to is used to determine the color of each neighborhood. layer.name sets the title shown in the legend. mapview does not have the ability to add a map title.\n\nmapview(la_counts_map,  \n        zcol = 'obs_count', \n        layer.name= 'Observations')",
    "crumbs": [
      "Extra",
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html",
    "href": "lessons/creating-charts.html",
    "title": "Creating charts",
    "section": "",
    "text": "How do we create charts using R?\n\n\n\n\n\nCreate bar and line charts using ggplot2.\nCustomize the appearance of the charts.\nSave charts as image files.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(lubridate) # manipulate dates",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#questions",
    "href": "lessons/creating-charts.html#questions",
    "title": "Creating charts",
    "section": "",
    "text": "How do we create charts using R?",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#objectives",
    "href": "lessons/creating-charts.html#objectives",
    "title": "Creating charts",
    "section": "",
    "text": "Create bar and line charts using ggplot2.\nCustomize the appearance of the charts.\nSave charts as image files.",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#creating-charts",
    "href": "lessons/creating-charts.html#creating-charts",
    "title": "Creating charts",
    "section": "Creating charts",
    "text": "Creating charts\nggplot2 is a powerful package that allows you to create complex plots from tabular data (data in a table format with rows and columns). In the previous lesson we used it for maps, in this lesson we will use it for charts.\n\n\n\n\n\n\nNote\n\n\n\nSome people involved with visualizing data say charts, graphs, and plots are different things. This workshop will use charts, graphs, and plots interchangeably.\n\n\nMain steps:\n\nLoad iNaturalist data\nUse filter(), select(), mutate(), and count() to get the rows and columns we want\nPass the data to ggplot2(). Set which columns in a data frame will be used for chart elements such as x and y axis\nCreate chart",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#inaturalist-data",
    "href": "lessons/creating-charts.html#inaturalist-data",
    "title": "Creating charts",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nFirst, read data from the iNaturalist observation file.\n\ninat_data &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\nLet’s add a year column to iNaturalist data.\n\ninat_year &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#bar-chart",
    "href": "lessons/creating-charts.html#bar-chart",
    "title": "Creating charts",
    "section": "Bar chart",
    "text": "Bar chart\nLet’s create a bar chart that shows the number of observations per year.\nFirst, pass the data frame inat_year to ggplot() function as the first argument.\n\nggplot(data = inat_year)\n\n\n\n\n\n\n\n\nWe need to tell ggplot how to use the data to create a chart. We can specify the mapping of data frame fields to elements in the chart, such as x/y coordinates, size, or shape, by using the aes() function. aes is short for aesthetic mappings.\nFor bar charts, we need to tell what field to use for the x axis. We want to create a plot with year on the x axis so we set the aes() function x argument to year. ggplot will count the number of rows for each year, and use the number of rows for the y axis.\n\nggplot(data = inat_year, mapping = aes(x = year))\n\n\n\n\n\n\n\n\nNext we need to specify how we want the data to be displayed. We do this using geom_ functions, which specify the type of geometry we want, such as points, lines, or bars. We use geom_bar() to create a vertical bar plot.\nWe can add a geom_bar() layer to our plot by using the + sign. We indent onto a new line to make it easier to read, and we have to end the first line with the + sign.\n\nggplot(data = inat_year,  mapping = aes(x = year)) +\n  geom_bar()    \n\n\n\n\n\n\n\n\nIf we want horizontal bar chart, set the aes() function y argument to year.\n\nggplot(data = inat_year, mapping = aes(y = year)) +\n  geom_bar()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#line-chart",
    "href": "lessons/creating-charts.html#line-chart",
    "title": "Creating charts",
    "section": "Line chart",
    "text": "Line chart\nCreate a line chart that shows the number of observations per year.\nFor line charts, we need to specify which columns to use for the x and y axis.\nWe need to create a data frame that has a year column, and a column that counts the observations per year. Use mutate() to add year column. Use count() to add column that has the count per year.\n\ninat_year_count &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='count')  \n\ninat_year_count\n\n# A tibble: 9 × 2\n   year count\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\nFor aes, use year on the x axis and count on the y axis. Use geom_line() to create a line chart.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y=count)) +\n  geom_line()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#more-bar-charts",
    "href": "lessons/creating-charts.html#more-bar-charts",
    "title": "Creating charts",
    "section": "More bar charts",
    "text": "More bar charts\nIn the previous example we created a data frame inat_year_count that has observations per year. To create bar chart when the data has values for x axis and y axis, use geom_col()\nWe want year on the x axis, and obs_count on the y axis.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y = count)) +\n  geom_col()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#exercise-1",
    "href": "lessons/creating-charts.html#exercise-1",
    "title": "Creating charts",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a chart with all your observations for each year\n\nUse mutate() to add year column\nUse filter() to select observations you made\nSave the data frame to my_obs_by_year object\nUse ggplot() to set the data and aesthetics.\nChoose which type of chart you want: bar or line.\n\n\n\nmy_obs_by_year  &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))  %&gt;% \n  filter(user_login == 'natureinla')\n\n  \nggplot(data = my_obs_by_year, mapping = aes(x = year)) +\n  geom_bar()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-colors",
    "href": "lessons/creating-charts.html#changing-colors",
    "title": "Creating charts",
    "section": "Changing colors",
    "text": "Changing colors\nUse colors() to get a list of the 657 colors in R.\n\ncolors()\n\n  [1] \"white\"                \"aliceblue\"            \"antiquewhite\"        \n  [4] \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n  [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"         \n [10] \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n [13] \"azure\"                \"azure1\"               \"azure2\"              \n [16] \"azure3\"               \"azure4\"               \"beige\"               \n [19] \"bisque\"               \"bisque1\"              \"bisque2\"             \n [22] \"bisque3\"              \"bisque4\"              \"black\"               \n [25] \"blanchedalmond\"       \"blue\"                 \"blue1\"               \n [28] \"blue2\"                \"blue3\"                \"blue4\"               \n [31] \"blueviolet\"           \"brown\"                \"brown1\"              \n [34] \"brown2\"               \"brown3\"               \"brown4\"              \n [37] \"burlywood\"            \"burlywood1\"           \"burlywood2\"          \n [40] \"burlywood3\"           \"burlywood4\"           \"cadetblue\"           \n [43] \"cadetblue1\"           \"cadetblue2\"           \"cadetblue3\"          \n [46] \"cadetblue4\"           \"chartreuse\"           \"chartreuse1\"         \n [49] \"chartreuse2\"          \"chartreuse3\"          \"chartreuse4\"         \n [52] \"chocolate\"            \"chocolate1\"           \"chocolate2\"          \n [55] \"chocolate3\"           \"chocolate4\"           \"coral\"               \n [58] \"coral1\"               \"coral2\"               \"coral3\"              \n [61] \"coral4\"               \"cornflowerblue\"       \"cornsilk\"            \n [64] \"cornsilk1\"            \"cornsilk2\"            \"cornsilk3\"           \n [67] \"cornsilk4\"            \"cyan\"                 \"cyan1\"               \n [70] \"cyan2\"                \"cyan3\"                \"cyan4\"               \n [73] \"darkblue\"             \"darkcyan\"             \"darkgoldenrod\"       \n [76] \"darkgoldenrod1\"       \"darkgoldenrod2\"       \"darkgoldenrod3\"      \n [79] \"darkgoldenrod4\"       \"darkgray\"             \"darkgreen\"           \n [82] \"darkgrey\"             \"darkkhaki\"            \"darkmagenta\"         \n [85] \"darkolivegreen\"       \"darkolivegreen1\"      \"darkolivegreen2\"     \n [88] \"darkolivegreen3\"      \"darkolivegreen4\"      \"darkorange\"          \n [91] \"darkorange1\"          \"darkorange2\"          \"darkorange3\"         \n [94] \"darkorange4\"          \"darkorchid\"           \"darkorchid1\"         \n [97] \"darkorchid2\"          \"darkorchid3\"          \"darkorchid4\"         \n[100] \"darkred\"              \"darksalmon\"           \"darkseagreen\"        \n[103] \"darkseagreen1\"        \"darkseagreen2\"        \"darkseagreen3\"       \n[106] \"darkseagreen4\"        \"darkslateblue\"        \"darkslategray\"       \n[109] \"darkslategray1\"       \"darkslategray2\"       \"darkslategray3\"      \n[112] \"darkslategray4\"       \"darkslategrey\"        \"darkturquoise\"       \n[115] \"darkviolet\"           \"deeppink\"             \"deeppink1\"           \n[118] \"deeppink2\"            \"deeppink3\"            \"deeppink4\"           \n[121] \"deepskyblue\"          \"deepskyblue1\"         \"deepskyblue2\"        \n[124] \"deepskyblue3\"         \"deepskyblue4\"         \"dimgray\"             \n[127] \"dimgrey\"              \"dodgerblue\"           \"dodgerblue1\"         \n[130] \"dodgerblue2\"          \"dodgerblue3\"          \"dodgerblue4\"         \n[133] \"firebrick\"            \"firebrick1\"           \"firebrick2\"          \n[136] \"firebrick3\"           \"firebrick4\"           \"floralwhite\"         \n[139] \"forestgreen\"          \"gainsboro\"            \"ghostwhite\"          \n[142] \"gold\"                 \"gold1\"                \"gold2\"               \n[145] \"gold3\"                \"gold4\"                \"goldenrod\"           \n[148] \"goldenrod1\"           \"goldenrod2\"           \"goldenrod3\"          \n[151] \"goldenrod4\"           \"gray\"                 \"gray0\"               \n[154] \"gray1\"                \"gray2\"                \"gray3\"               \n[157] \"gray4\"                \"gray5\"                \"gray6\"               \n[160] \"gray7\"                \"gray8\"                \"gray9\"               \n[163] \"gray10\"               \"gray11\"               \"gray12\"              \n[166] \"gray13\"               \"gray14\"               \"gray15\"              \n[169] \"gray16\"               \"gray17\"               \"gray18\"              \n[172] \"gray19\"               \"gray20\"               \"gray21\"              \n[175] \"gray22\"               \"gray23\"               \"gray24\"              \n[178] \"gray25\"               \"gray26\"               \"gray27\"              \n[181] \"gray28\"               \"gray29\"               \"gray30\"              \n[184] \"gray31\"               \"gray32\"               \"gray33\"              \n[187] \"gray34\"               \"gray35\"               \"gray36\"              \n[190] \"gray37\"               \"gray38\"               \"gray39\"              \n[193] \"gray40\"               \"gray41\"               \"gray42\"              \n[196] \"gray43\"               \"gray44\"               \"gray45\"              \n[199] \"gray46\"               \"gray47\"               \"gray48\"              \n[202] \"gray49\"               \"gray50\"               \"gray51\"              \n[205] \"gray52\"               \"gray53\"               \"gray54\"              \n[208] \"gray55\"               \"gray56\"               \"gray57\"              \n[211] \"gray58\"               \"gray59\"               \"gray60\"              \n[214] \"gray61\"               \"gray62\"               \"gray63\"              \n[217] \"gray64\"               \"gray65\"               \"gray66\"              \n[220] \"gray67\"               \"gray68\"               \"gray69\"              \n[223] \"gray70\"               \"gray71\"               \"gray72\"              \n[226] \"gray73\"               \"gray74\"               \"gray75\"              \n[229] \"gray76\"               \"gray77\"               \"gray78\"              \n[232] \"gray79\"               \"gray80\"               \"gray81\"              \n[235] \"gray82\"               \"gray83\"               \"gray84\"              \n[238] \"gray85\"               \"gray86\"               \"gray87\"              \n[241] \"gray88\"               \"gray89\"               \"gray90\"              \n[244] \"gray91\"               \"gray92\"               \"gray93\"              \n[247] \"gray94\"               \"gray95\"               \"gray96\"              \n[250] \"gray97\"               \"gray98\"               \"gray99\"              \n[253] \"gray100\"              \"green\"                \"green1\"              \n[256] \"green2\"               \"green3\"               \"green4\"              \n[259] \"greenyellow\"          \"grey\"                 \"grey0\"               \n[262] \"grey1\"                \"grey2\"                \"grey3\"               \n[265] \"grey4\"                \"grey5\"                \"grey6\"               \n[268] \"grey7\"                \"grey8\"                \"grey9\"               \n[271] \"grey10\"               \"grey11\"               \"grey12\"              \n[274] \"grey13\"               \"grey14\"               \"grey15\"              \n[277] \"grey16\"               \"grey17\"               \"grey18\"              \n[280] \"grey19\"               \"grey20\"               \"grey21\"              \n[283] \"grey22\"               \"grey23\"               \"grey24\"              \n[286] \"grey25\"               \"grey26\"               \"grey27\"              \n[289] \"grey28\"               \"grey29\"               \"grey30\"              \n[292] \"grey31\"               \"grey32\"               \"grey33\"              \n[295] \"grey34\"               \"grey35\"               \"grey36\"              \n[298] \"grey37\"               \"grey38\"               \"grey39\"              \n[301] \"grey40\"               \"grey41\"               \"grey42\"              \n[304] \"grey43\"               \"grey44\"               \"grey45\"              \n[307] \"grey46\"               \"grey47\"               \"grey48\"              \n[310] \"grey49\"               \"grey50\"               \"grey51\"              \n[313] \"grey52\"               \"grey53\"               \"grey54\"              \n[316] \"grey55\"               \"grey56\"               \"grey57\"              \n[319] \"grey58\"               \"grey59\"               \"grey60\"              \n[322] \"grey61\"               \"grey62\"               \"grey63\"              \n[325] \"grey64\"               \"grey65\"               \"grey66\"              \n[328] \"grey67\"               \"grey68\"               \"grey69\"              \n[331] \"grey70\"               \"grey71\"               \"grey72\"              \n[334] \"grey73\"               \"grey74\"               \"grey75\"              \n[337] \"grey76\"               \"grey77\"               \"grey78\"              \n[340] \"grey79\"               \"grey80\"               \"grey81\"              \n[343] \"grey82\"               \"grey83\"               \"grey84\"              \n[346] \"grey85\"               \"grey86\"               \"grey87\"              \n[349] \"grey88\"               \"grey89\"               \"grey90\"              \n[352] \"grey91\"               \"grey92\"               \"grey93\"              \n[355] \"grey94\"               \"grey95\"               \"grey96\"              \n[358] \"grey97\"               \"grey98\"               \"grey99\"              \n[361] \"grey100\"              \"honeydew\"             \"honeydew1\"           \n[364] \"honeydew2\"            \"honeydew3\"            \"honeydew4\"           \n[367] \"hotpink\"              \"hotpink1\"             \"hotpink2\"            \n[370] \"hotpink3\"             \"hotpink4\"             \"indianred\"           \n[373] \"indianred1\"           \"indianred2\"           \"indianred3\"          \n[376] \"indianred4\"           \"ivory\"                \"ivory1\"              \n[379] \"ivory2\"               \"ivory3\"               \"ivory4\"              \n[382] \"khaki\"                \"khaki1\"               \"khaki2\"              \n[385] \"khaki3\"               \"khaki4\"               \"lavender\"            \n[388] \"lavenderblush\"        \"lavenderblush1\"       \"lavenderblush2\"      \n[391] \"lavenderblush3\"       \"lavenderblush4\"       \"lawngreen\"           \n[394] \"lemonchiffon\"         \"lemonchiffon1\"        \"lemonchiffon2\"       \n[397] \"lemonchiffon3\"        \"lemonchiffon4\"        \"lightblue\"           \n[400] \"lightblue1\"           \"lightblue2\"           \"lightblue3\"          \n[403] \"lightblue4\"           \"lightcoral\"           \"lightcyan\"           \n[406] \"lightcyan1\"           \"lightcyan2\"           \"lightcyan3\"          \n[409] \"lightcyan4\"           \"lightgoldenrod\"       \"lightgoldenrod1\"     \n[412] \"lightgoldenrod2\"      \"lightgoldenrod3\"      \"lightgoldenrod4\"     \n[415] \"lightgoldenrodyellow\" \"lightgray\"            \"lightgreen\"          \n[418] \"lightgrey\"            \"lightpink\"            \"lightpink1\"          \n[421] \"lightpink2\"           \"lightpink3\"           \"lightpink4\"          \n[424] \"lightsalmon\"          \"lightsalmon1\"         \"lightsalmon2\"        \n[427] \"lightsalmon3\"         \"lightsalmon4\"         \"lightseagreen\"       \n[430] \"lightskyblue\"         \"lightskyblue1\"        \"lightskyblue2\"       \n[433] \"lightskyblue3\"        \"lightskyblue4\"        \"lightslateblue\"      \n[436] \"lightslategray\"       \"lightslategrey\"       \"lightsteelblue\"      \n[439] \"lightsteelblue1\"      \"lightsteelblue2\"      \"lightsteelblue3\"     \n[442] \"lightsteelblue4\"      \"lightyellow\"          \"lightyellow1\"        \n[445] \"lightyellow2\"         \"lightyellow3\"         \"lightyellow4\"        \n[448] \"limegreen\"            \"linen\"                \"magenta\"             \n[451] \"magenta1\"             \"magenta2\"             \"magenta3\"            \n[454] \"magenta4\"             \"maroon\"               \"maroon1\"             \n[457] \"maroon2\"              \"maroon3\"              \"maroon4\"             \n[460] \"mediumaquamarine\"     \"mediumblue\"           \"mediumorchid\"        \n[463] \"mediumorchid1\"        \"mediumorchid2\"        \"mediumorchid3\"       \n[466] \"mediumorchid4\"        \"mediumpurple\"         \"mediumpurple1\"       \n[469] \"mediumpurple2\"        \"mediumpurple3\"        \"mediumpurple4\"       \n[472] \"mediumseagreen\"       \"mediumslateblue\"      \"mediumspringgreen\"   \n[475] \"mediumturquoise\"      \"mediumvioletred\"      \"midnightblue\"        \n[478] \"mintcream\"            \"mistyrose\"            \"mistyrose1\"          \n[481] \"mistyrose2\"           \"mistyrose3\"           \"mistyrose4\"          \n[484] \"moccasin\"             \"navajowhite\"          \"navajowhite1\"        \n[487] \"navajowhite2\"         \"navajowhite3\"         \"navajowhite4\"        \n[490] \"navy\"                 \"navyblue\"             \"oldlace\"             \n[493] \"olivedrab\"            \"olivedrab1\"           \"olivedrab2\"          \n[496] \"olivedrab3\"           \"olivedrab4\"           \"orange\"              \n[499] \"orange1\"              \"orange2\"              \"orange3\"             \n[502] \"orange4\"              \"orangered\"            \"orangered1\"          \n[505] \"orangered2\"           \"orangered3\"           \"orangered4\"          \n[508] \"orchid\"               \"orchid1\"              \"orchid2\"             \n[511] \"orchid3\"              \"orchid4\"              \"palegoldenrod\"       \n[514] \"palegreen\"            \"palegreen1\"           \"palegreen2\"          \n[517] \"palegreen3\"           \"palegreen4\"           \"paleturquoise\"       \n[520] \"paleturquoise1\"       \"paleturquoise2\"       \"paleturquoise3\"      \n[523] \"paleturquoise4\"       \"palevioletred\"        \"palevioletred1\"      \n[526] \"palevioletred2\"       \"palevioletred3\"       \"palevioletred4\"      \n[529] \"papayawhip\"           \"peachpuff\"            \"peachpuff1\"          \n[532] \"peachpuff2\"           \"peachpuff3\"           \"peachpuff4\"          \n[535] \"peru\"                 \"pink\"                 \"pink1\"               \n[538] \"pink2\"                \"pink3\"                \"pink4\"               \n[541] \"plum\"                 \"plum1\"                \"plum2\"               \n[544] \"plum3\"                \"plum4\"                \"powderblue\"          \n[547] \"purple\"               \"purple1\"              \"purple2\"             \n[550] \"purple3\"              \"purple4\"              \"red\"                 \n[553] \"red1\"                 \"red2\"                 \"red3\"                \n[556] \"red4\"                 \"rosybrown\"            \"rosybrown1\"          \n[559] \"rosybrown2\"           \"rosybrown3\"           \"rosybrown4\"          \n[562] \"royalblue\"            \"royalblue1\"           \"royalblue2\"          \n[565] \"royalblue3\"           \"royalblue4\"           \"saddlebrown\"         \n[568] \"salmon\"               \"salmon1\"              \"salmon2\"             \n[571] \"salmon3\"              \"salmon4\"              \"sandybrown\"          \n[574] \"seagreen\"             \"seagreen1\"            \"seagreen2\"           \n[577] \"seagreen3\"            \"seagreen4\"            \"seashell\"            \n[580] \"seashell1\"            \"seashell2\"            \"seashell3\"           \n[583] \"seashell4\"            \"sienna\"               \"sienna1\"             \n[586] \"sienna2\"              \"sienna3\"              \"sienna4\"             \n[589] \"skyblue\"              \"skyblue1\"             \"skyblue2\"            \n[592] \"skyblue3\"             \"skyblue4\"             \"slateblue\"           \n[595] \"slateblue1\"           \"slateblue2\"           \"slateblue3\"          \n[598] \"slateblue4\"           \"slategray\"            \"slategray1\"          \n[601] \"slategray2\"           \"slategray3\"           \"slategray4\"          \n[604] \"slategrey\"            \"snow\"                 \"snow1\"               \n[607] \"snow2\"                \"snow3\"                \"snow4\"               \n[610] \"springgreen\"          \"springgreen1\"         \"springgreen2\"        \n[613] \"springgreen3\"         \"springgreen4\"         \"steelblue\"           \n[616] \"steelblue1\"           \"steelblue2\"           \"steelblue3\"          \n[619] \"steelblue4\"           \"tan\"                  \"tan1\"                \n[622] \"tan2\"                 \"tan3\"                 \"tan4\"                \n[625] \"thistle\"              \"thistle1\"             \"thistle2\"            \n[628] \"thistle3\"             \"thistle4\"             \"tomato\"              \n[631] \"tomato1\"              \"tomato2\"              \"tomato3\"             \n[634] \"tomato4\"              \"turquoise\"            \"turquoise1\"          \n[637] \"turquoise2\"           \"turquoise3\"           \"turquoise4\"          \n[640] \"violet\"               \"violetred\"            \"violetred1\"          \n[643] \"violetred2\"           \"violetred3\"           \"violetred4\"          \n[646] \"wheat\"                \"wheat1\"               \"wheat2\"              \n[649] \"wheat3\"               \"wheat4\"               \"whitesmoke\"          \n[652] \"yellow\"               \"yellow1\"              \"yellow2\"             \n[655] \"yellow3\"              \"yellow4\"              \"yellowgreen\"         \n\n\nWe can change the color of the bars using fill, color, and the name of the color. fill is the inside of the bar, color is the border of the bar.\n\nggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar(fill='aquamarine', color='black')\n\n\n\n\n\n\n\n\nWe can also use 6 digit hex color. You can use online tools to get hex colors.\n\nggplot(data = inat_year,  mapping = aes(x = year)) +\n  geom_bar(fill='#75cd5e')",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#color-scales",
    "href": "lessons/creating-charts.html#color-scales",
    "title": "Creating charts",
    "section": "Color scales",
    "text": "Color scales\nIn the previous bar chart, we made all the bars the same green color. If we want the chart colors to vary based on the data values, we need to put that information inside aes(), such as aes(fill=field_name).\nLet’s update the previous bar chart to give each year a different color\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = year)) +\n  geom_bar()  \n\nWarning: The following aesthetics were dropped during statistical transformation: fill.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\n\nThat didn’t work. There is a warning: “Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?”\n\n\n\n\n\n\nNote\n\n\n\nFactor is a R data structure used to represent categorical data, which only accepts a finite number of pre-defined values. To create a factor use factor(). The distinct values in a factor are called levels.\n\nfactor(c(2020, 2020, 2021, 2022, 2022, 2022))\n\n[1] 2020 2020 2021 2022 2022 2022\nLevels: 2020 2021 2022\n\nfactor(c('apple', 'grape', 'apple', 'pear'))\n\n[1] apple grape apple pear \nLevels: apple grape pear\n\n\n\n\nLet’s convert year into a factor using factor(year).\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill= factor(year))) +\n  geom_bar()  \n\n\n\n\n\n\n\n\nggplot2 assigns each year a different color. ggplot2 has color scale function that produces a predefined list of colors. The default color scale isn’t always ideal: it isn’t friendly to viewers with colorblindness and it doesn’t translate well to grayscale. However, ggplot2 comes with quite a few other color scales, including the viridis scales, which are designed to be colorblind and grayscale friendly. We can change color scales by adding scale_color_  and scale_fill_ functions to our plots. Since we are dealing with bar charts, we want scale_fill_.\n\n\n\n\n\n\nNote\n\n\n\nIn mathematics and statistics, values can be discrete or continuous. Discrete value have distinct values such as whole numbers (1, 2, 3) or categories (states: California, Oregon). Continuous values represent an infinite number of possible values such as fractions and decimals (1.1, 2-1/2, 2-3/4, 3.9).\n\n\nColor scale functions can be discrete or continuous. Let’s add viridis scale to the previous bar chart. We want to use scale_fill_viridis_d() since year has discrete values.\n\nggplot(data = inat_year,  \n       mapping = aes(x = year, fill= factor(year))) +\n  geom_bar()  +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n If you try to use viridis continuous funtion, you will get an error: “Discrete values supplied to continuous scale.”\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill= factor(year))) +\n  geom_bar()  +\n  scale_fill_viridis_c()\n\nFor more information about color scales, visit Introverse color scales page.",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-axis-breaks",
    "href": "lessons/creating-charts.html#changing-axis-breaks",
    "title": "Creating charts",
    "section": "Changing axis breaks",
    "text": "Changing axis breaks\nggplot2 will automatically break the axis into multiple chunks and add labels for the values. We can use n.breaks argument for scale_x_continuous() and scale_y_continuous() to adjust the number of breaks along the axis. ggplot2 may choose a slightly different number to ensure nice break labels.\nLet’s add more breaks along the year x axis and count y axis.\n\nggplot(data = inat_year,  \n       mapping = aes(x = year, fill= factor(year))) +\n  geom_bar()  +\n  scale_fill_viridis_d() +\n  scale_x_continuous(n.breaks=8) +\n  scale_y_continuous(n.breaks=7)",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-themes",
    "href": "lessons/creating-charts.html#changing-themes",
    "title": "Creating charts",
    "section": "Changing themes",
    "text": "Changing themes\nLet’s assign a plot to an object so can refer to it later.\n\nmyplot &lt;- ggplot(data = inat_year,  \n                 mapping = aes(x = year)) +\n  geom_bar(fill='#75cd5e') +\n  scale_x_continuous(n.breaks = 8) \n \n\n  myplot\n\n\n\n\n\n\n\n\nggplot has built in themes that affects the overall appearance of a plot. To see a list of available themes in ggplot, visit ggplot2 themes\nLet’s add the black-and-white theme theme_bw() to our plot:\n\nmyplot + \n  theme_bw()\n\n\n\n\n\n\n\n\nTo individually change parts of a plot, we can use the theme() function, which can take many different arguments to change things about the text, grid lines, background color, and more.\nLet’s rotate the x axis labels by 90 degrees so the text is vertical.\n\nmyplot + \n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\n\n\n\n\nLet’s try changing the size of the text on our axis titles. We can do this by specifying that the axis.title should be an element_text() with size set to 14.\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\nAnother change we might want to make is to remove the vertical grid lines. To do this, we will change the panel.grid.major.x and panel.grid.major.x to an element_blank().\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nBecause there are so many possible arguments to the theme() function, it can sometimes be hard to find the right one. Here are some tips for figuring out how to modify a plot element:\n\ntype out theme(), put your cursor between the parentheses, and hit Tab to bring up a list of arguments\n\nyou can scroll through the arguments, or start typing, which will shorten the list of potential matches\n\nlike many things in the tidyverse, similar argument start with similar names\n\nthere are axis, legend, panel, plot, and strip arguments\n\narguments have hierarchy\n\ntext controls all text in the whole plot\naxis.title controls the text for the axis titles\naxis.title.x controls the text for the x axis title",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-labels",
    "href": "lessons/creating-charts.html#changing-labels",
    "title": "Creating charts",
    "section": "Changing labels",
    "text": "Changing labels\nWe can customize the axis labels and add a chart title using labs().\n\nmyplot +\n  labs(title = \"CNC Los Angeles\",\n       subtitle=\"Observations per year\",\n       x = \"Year\",\n       y = \"Observations\")\n\n\n\n\n\n\n\n\nWe can also change the labels in the legend using labs()\n\nggplot(data = inat_year,  \n       mapping = aes(x = year, fill= factor(year))) +\n  geom_bar() +\n  labs(fill = \"Year\")",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#exercise-2-customizing-a-plot",
    "href": "lessons/creating-charts.html#exercise-2-customizing-a-plot",
    "title": "Creating charts",
    "section": "Exercise 2: Customizing a plot",
    "text": "Exercise 2: Customizing a plot\nTake the my_obs_by_year data frame from exercise 1 and create a plot. Customize the appearance or the chart. Here are some ideas.\n\nadd a title\nchoose the one of the built in themes\nchange the axis titles\nchange the fill colors of the bars\n\n\n\nmy_chart &lt;- ggplot(data = my_obs_by_year, \n                   mapping = aes(x = year)) +\n  geom_bar()\n\nmy_chart +\n  theme_classic() +\n  labs(title = \"CNC Los Angeles\",  x = \"Year\",  y = \"Observations\")",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#saving-plots",
    "href": "lessons/creating-charts.html#saving-plots",
    "title": "Creating charts",
    "section": "Saving plots",
    "text": "Saving plots\nOnce we are happy with ourplot, we can save the plot.\nAssign the plot to an object. Then run ggsave() to save our plot. The first argument we give is the path to the file we want to save, including the correct file extension. You can save as jpb, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\n# create plot\nfinalplot &lt;- myplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title = element_text(face = \"bold\", size = 20)) +\n  labs(title = \"CNC Los Angeles\",\n       subtitle=\"Observations per year\",\n       x = \"Year\",\n       y = \"Observations\")\n\n# save plot\nggsave(filename = 'results/observations_per_year.jpg', plot = finalplot, \n       height = 6, width = 8)",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html",
    "href": "lessons/intro-data-analysis.html",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "How do we begin to analyze iNaturalist data?\n\n\n\n\n\nLearn how to download data from iNaturalist.\nLearn about the different ways to analyze tabular data.\nGet an overview of the workshop.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#questions",
    "href": "lessons/intro-data-analysis.html#questions",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "How do we begin to analyze iNaturalist data?",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#objectives",
    "href": "lessons/intro-data-analysis.html#objectives",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "Learn how to download data from iNaturalist.\nLearn about the different ways to analyze tabular data.\nGet an overview of the workshop.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#inaturalist-data",
    "href": "lessons/intro-data-analysis.html#inaturalist-data",
    "title": "Introduction to Data Analysis",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nWhen iNaturalist users add an observation through the iNaturalist app, that data is saved to the iNaturalist database. People can download the iNaturalist data as CSVs.\n\n\n\n\n\n\nNote\n\n\n\nCSV comma-separated values\nCSV is a text file format for tabular data. Each line represents one record. Each column represents a field. The fields are separated by commas. CSVs can be opened in text editors or spreadsheet programs.\nCSV as plain text file.\n\nCSV in CSV or spreadsheet application.\n\n\n\nThe iNaturalist CSV has information about:\n\nthe user who made observation\nthe location of the observation\nthe observed species\nlinks for photos, videos, sounds\n\nHere’s a rough draft that lists descriptions for each field.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#downloading-inaturalist-data",
    "href": "lessons/intro-data-analysis.html#downloading-inaturalist-data",
    "title": "Introduction to Data Analysis",
    "section": "Downloading iNaturalist data",
    "text": "Downloading iNaturalist data\nIf you would like to download iNaturalist data, here’s some info.\n\n\nHow to Search iNaturalist Observations\nstep-by-step to download iNaturalist data\nTo save time and ensure everyone at the workshop has the same data, we provide a CSV with data from iNaturalist City Nature Challenge Los Angeles from 2013 to 2024. We made some changes to the CSVs we downloaded from iNaturalist, and the code we used edit the CSV is available here",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#analyzing-data-using-r",
    "href": "lessons/intro-data-analysis.html#analyzing-data-using-r",
    "title": "Introduction to Data Analysis",
    "section": "Analyzing data using R",
    "text": "Analyzing data using R\nIt is difficult for people to see any patterns when reading rows after row of text. To make it easier to see patterns, we can use software to analyze tabular data.\nThere are various tools to analyze tabular data including spreadsheets applications like Excel and Google Sheets, and programming languages such as R and Python. If the data has location information, Geographic Information Systems (GIS) such ArcGIS and QGIS can be used.\nIn this workshop we will use R programming language to analyze iNaturalist data. Programming languages allow people to write instructions to tell a computer to do stuff. The reason we are using R is because R is a popular language in ecology research.\nHere’s an overview of what we learn in this workshop.\nLoad software that will will need.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(lubridate) # manipulate dates\nlibrary(mapview) # create interactive maps\n\nLoad iNaturalist data from City Nature Challenge Los Angeles 2013-2024. There are over 191,000 observations.\n\ninat &lt;- read_csv(\"data/cleaned/cnc-los-angeles-observations.csv\")\n\nCreate summaries of the data. For instance, get the 10 most commonly observed ‘species’.\n\ntop_10 &lt;- inat %&gt;%\n  select(common_name, scientific_name) %&gt;%\n  count(common_name, scientific_name, name='count')  %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:10)\n\ntop_10\n\n# A tibble: 10 × 3\n   common_name            scientific_name          count\n   &lt;chr&gt;                  &lt;chr&gt;                    &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis   3339\n 2 Western Honey Bee      Apis mellifera            2060\n 3 dicots                 Magnoliopsida             2013\n 4 plants                 Plantae                   1712\n 5 Eastern Fox Squirrel   Sciurus niger             1475\n 6 House Finch            Haemorhous mexicanus      1263\n 7 Mourning Dove          Zenaida macroura          1205\n 8 flowering plants       Angiospermae              1161\n 9 California poppy       Eschscholzia californica   934\n10 Convergent Lady Beetle Hippodamia convergens      929\n\n\nCreate maps. For example, create a map showing all the observations for Western Fence Lizard\n\nlizard &lt;- inat %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE) %&gt;%\n  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry) %&gt;%\n  filter(common_name == 'Western Fence Lizard')\n\n\nmapview(lizard)\n\n\nCreate charts. For example, create a bar chart showing the number of observations per year.\n\ninat %&gt;%\n  mutate(year = year(observed_on))  %&gt;%\n  group_by(year) %&gt;%\n  ggplot(aes(x = year)) +\n  geom_bar()",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html",
    "href": "lessons/other-datasets.html",
    "title": "Using to other datasets",
    "section": "",
    "text": "How do we get other datasets?\n\n\n\n\n\nLearn about pre-selected data sets provided in this workshop.\nLoad packages\nlibrary(readr)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(mapview)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#questions",
    "href": "lessons/other-datasets.html#questions",
    "title": "Using to other datasets",
    "section": "",
    "text": "How do we get other datasets?",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#objectives",
    "href": "lessons/other-datasets.html#objectives",
    "title": "Using to other datasets",
    "section": "",
    "text": "Learn about pre-selected data sets provided in this workshop.",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#other-datasets",
    "href": "lessons/other-datasets.html#other-datasets",
    "title": "Using to other datasets",
    "section": "Other datasets",
    "text": "Other datasets\nThere are various geospatial datasets that you can use while analyzing iNaturalist data. Some datasets are free to use, some require crediting the original datasource.\nWe got data from LA City Geohub, Data.gov, California State Parks, and County of Los Angeles Open Data.\nWe’ve provided a variety of geospatial data that workshop attendees can use for their analysis.",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#demographics-data",
    "href": "lessons/other-datasets.html#demographics-data",
    "title": "Using to other datasets",
    "section": "Demographics data",
    "text": "Demographics data\nSome people might be interested in comparing iNaturalist data with demographics data about people in LA County.\nL.A. County completed Comprehensive Countywide Park Needs Assessment in 2016. As part of that study, they looked at demographics data throughout the county. For more information: https://geohub.lacity.org/datasets/lacounty::l-a-county-park-needs-assessment-demographics/about\n\n\n\n\n\n\nNote\n\n\n\nA lot of demographics data from the Park Needs Assessment comes from the U.S. Census. The reason we’re using the parks data instead directly using Census data is because the Census data is more difficult to use. If you want to learn how to use U.S. Census data in R, check out the book Analyzing US Census Data: Methods, Maps, and Models in R\n\n\nWe load Park Needs Assessment data using read_sf() to read geojson file. Click la_county_pna in the Enviroment pane to browse the data frame.\n\nla_county_pna &lt;- read_sf('data/raw/PNA_Demographics_for_Dashboard_(View_Layer_SDE)_8662424390864523907.geojson')\n\nThe last row has data for the entire LA County. Let’s remove that last row.\n\nla_county_pna &lt;- la_county_pna[-c(189), ]\n\ndim(la_county_pna)\n\n[1] 188  96\n\n\nThere are 96 fields in the dataset. Here’s a short description of the fields.\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\nSTUD_AR_ID\nStudy Area ID\n\n\nSTUD_AR_NM\nStudy Area Name\n\n\nSTUD_AR_LBL\nLabel\n\n\nTOOLKIT_ID\nToolkit ID\n\n\nAcres\nPark Acres\n\n\nAC_PER_1K\nAcres/1000\n\n\nRepPrkAc\nAccessible Park Acres\n\n\nNEED_DESCP\nNeed Description\n\n\nPCT_Walk\nWalkable Percentage\n\n\npopulationtotals_totpop_cy\nTotal Population\n\n\nhouseholdtotals_avghhsz_cy\nAverage Household Size\n\n\nhouseholdincome_medhinc_cy\nMedian Household Income\n\n\neducationalattainment_nohs_cy\nPop Age 25+: &lt; 9th Grade\n\n\neducationalattainment_somehs_cy\nPop Age 25+: High School/No Diploma\n\n\neducationalattainment_hsgrad_cy\nPop Age 25+: High School Diploma\n\n\neducationalattainment_ged_cy\nPop Age 25+: GED\n\n\neducationalattainment_smcoll_cy\nPop Age 25+: Some College/No Degree\n\n\neducationalattainment_asscdeg_c\nPop Age 25+: Associate’s Degree\n\n\neducationalattainment_bachdeg_c\nPop Age 25+: Bachelor’s Degree\n\n\neducationalattainment_graddeg_c\nPop Age 25+: Grad/Professional Degree\n\n\neducationalattainment_educbasec\nEducational Attainment Base\n\n\nsports_mp33003a_b_i\nParticipated in baseball in last 12 months: Index\n\n\nsports_mp33004a_b_i\nParticipated in basketball in last 12 months: Index\n\n\nsports_mp33005a_b_i\nParticipated in bicycling (mountain) in last 12 mo: Index\n\n\nsports_mp33012a_b_i\nParticipated in football in last 12 months: Index\n\n\nsports_mp33014a_b_i\nParticipated in golf in last 12 months: Index\n\n\nsports_mp33015a_b_i\nParticipated in hiking in last 12 months: Index\n\n\nsports_mp33016a_b_i\nParticipated in horseback riding in last 12 months: Index\n\n\nsports_mp33020a_b_i\nParticipated in jogging/running in last 12 months: Index\n\n\nsports_mp33024a_b_i\nParticipated in soccer in last 12 months: Index\n\n\nsports_mp33025a_b_i\nParticipated in softball in last 12 months: Index\n\n\nsports_mp33026a_b_i\nParticipated in swimming in last 12 months: Index\n\n\nsports_mp33028a_b_i\nParticipated in tennis in last 12 months: Index\n\n\nsports_mp33029a_b_i\nParticipated in volleyball in last 12 months: Index\n\n\nsports_mp33030a_b_i\nParticipated in walking for exercise in last 12 mo: Index\n\n\nF5yearincrements_pop0_cy\nPopulation Age 0-4\n\n\nF5yearincrements_pop5_cy\nPopulation Age 5-9\n\n\nF5yearincrements_pop10_cy\nPopulation Age 10-14\n\n\nF5yearincrements_pop15_cy\nPopulation Age 15-19\n\n\nF5yearincrements_pop20_cy\nPopulation Age 20-24\n\n\nF5yearincrements_pop25_cy\nPopulation Age 25-29\n\n\nF5yearincrements_pop30_cy\nPopulation Age 30-34\n\n\nF5yearincrements_pop35_cy\nPopulation Age 35-39\n\n\nF5yearincrements_pop40_cy\nPopulation Age 40-44\n\n\nF5yearincrements_pop45_cy\nPopulation Age 45-49\n\n\nF5yearincrements_pop50_cy\nPopulation Age 50-54\n\n\nF5yearincrements_pop55_cy\nPopulation Age 55-59\n\n\nF5yearincrements_pop60_cy\nPopulation Age 60-64\n\n\nF5yearincrements_pop65_cy\nPopulation Age 65-69\n\n\nF5yearincrements_pop70_cy\nPopulation Age 70-74\n\n\nF5yearincrements_pop75_cy\nPopulation Age 75-79\n\n\nF5yearincrements_pop80_cy\nPopulation Age 80-84\n\n\nF5yearincrements_pop85_cy\nPopulation Age 85+\n\n\nF5yearincrements_pop18up_cy\nPopulation Age 18+\n\n\nF1yearincrements_age18_cy\nPopulation Age 18\n\n\nF1yearincrements_age19_cy\nPopulation Age 19\n\n\nMEAN_Asthma\nMEAN Asthma\n\n\nMEAN_Low_Birth_Weight\nMEAN Low_Birth_Weight\n\n\nMEAN_Cardiovascular\nMEAN Cardiovascular\n\n\nraceandhispanicorigin_hisppop_c\nHispanic Population\n\n\nraceandhispanicorigin_nonhisp_c\nNon-Hispanic Population\n\n\nraceandhispanicorigin_nhspwht_c\nNon-Hispanic White Pop\n\n\nraceandhispanicorigin_nhspblk_c\nNon-Hispanic Black Pop\n\n\nraceandhispanicorigin_nhspai_cy\nNon-Hispanic American Indian Pop\n\n\nraceandhispanicorigin_nhspasn_c\nNon-Hispanic Asian Pop\n\n\nraceandhispanicorigin_nhsppi_cy\nNon-Hispanic Pacific Islander Pop\n\n\nraceandhispanicorigin_nhspoth_c\nNon-Hispanic Other Race Pop\n\n\nraceandhispanicorigin_nhspmlt_c\nNon-Hispanic Multiple Race Pop\n\n\nAge0_17Pct\nAge 0-17 Pct\n\n\nAge18_34Pct\nAge 18-34 Pct\n\n\nAge35_54Pct\nAge 35-54 Pct\n\n\nAge55_69Pct\nAge 55-69 Pct\n\n\nAge70upPct\nAge 70+ Pct\n\n\nHispanicPct\nHispanic Pct\n\n\nWhitePct\nWhite Pct\n\n\nBlack_Pct\nBlack Pct\n\n\nAsian_Pct\nAsian Pct\n\n\nAm_Indian\nAmerican Indian Pct\n\n\nPac_Island\nPacific Islander Pct\n\n\nOther_Race\nOther Race Pct\n\n\nMulti_Race\nMultiple Race Pct\n\n\nNo_HS\nNo High School Diploma Pct\n\n\nHS_Grad\nHigh School Graduate Pct\n\n\nSome_College\nSome College Pct\n\n\nCollege\nCollege Degree Pct\n\n\nunemprt_cy\nUnemployment Rate\n\n\n\n\nHousehold Median Income\nLet’s look at the Household Median Income. We can use zcol to choose which column view to in the map. The field ‘householdincome_medhinc_cy’ refers to Household Median Income.\n\nmapview(la_county_pna, \n        zcol='householdincome_medhinc_cy')\n\n\nThere are two issues with the previous map.\n\nThe name of the layer is too long. We can rename the layer using layer.name ='New Name'\nWhen you click on region, the popup shows too many fields. To select the columns displayed in popups, we can set the columns using dataframe[c('col_1', 'col_2')].\n\nlayer.name ='Avg income' sets the layer name to ‘Avg income’.\nla_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')] sets the columns show in the popup to householdincome_medhinc_cy and STUD_AR_NM\n\nmapview(la_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')], \n        zcol='householdincome_medhinc_cy',\n        layer.name ='Avg income')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#parks-in-la-county",
    "href": "lessons/other-datasets.html#parks-in-la-county",
    "title": "Using to other datasets",
    "section": "Parks in LA County",
    "text": "Parks in LA County\nSome people might be interested in comparing iNaturalist data with the location of parks.\nNational Park Boundaries: https://catalog.data.gov/dataset/national-park-boundaries\nCalifornia State Parks: https://www.parks.ca.gov/?page_id=29682\nCounty of Los Angeles parks: https://geohub.lacity.org/datasets/lacounty::dpr-park-facilities-view-accessible-parks/explore\nCity of Los Angeles parks: https://geohub.lacity.org/datasets/lahub::los-angeles-recreation-and-parks-boundaries/about\nLoad all the parks data.\n\nparks_national &lt;- read_sf('data/cleaned/nps_la_county.geojson')\n\nparks_state &lt;- read_sf('data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp')\n\nparks_county &lt;- read_sf('data/raw/DPR_Park_Facilities_View_(Accessible_Parks)/DPR_Park_Facilities_View_(Accessible_Parks).shp')\n\nparks_city &lt;- read_sf('data/raw/Los_Angeles_Recreation_and_Parks_Boundaries/Los_Angeles_Recreation_and_Parks_Boundaries.shp')\n\nWe want to convert the CRS of the parks data to match the CRS of the iNaturalist data.\n\nparks_national &lt;- st_transform(parks_national, crs = 4326)\n\n\nparks_county &lt;- st_transform(parks_county, crs = 4326)\n\n\nparks_city &lt;- st_transform(parks_city, crs = 4326)\n\n\nparks_state &lt;- st_transform(parks_state, crs = 4326)\n\nCreate map with parks and iNaturalist data. Use col.region to set the color of the parks.\n\nmapview(parks_national, col.region='orange') + \n  mapview(parks_county, col.region='red') + \n  mapview(parks_city, col.region='yellow') +\n  mapview(parks_state, col.region='green')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-city-neighborhood-councils-boundaries",
    "href": "lessons/other-datasets.html#la-city-neighborhood-councils-boundaries",
    "title": "Using to other datasets",
    "section": "LA City Neighborhood Councils boundaries",
    "text": "LA City Neighborhood Councils boundaries\nSome people might be interested in comparing iNaturalist data within different LA city neigbhorhoods.\nLA City Neighborhood Councils boundaries https://geohub.lacity.org/datasets/lahub::neighborhood-council-boundaries-2018/about\n\nnc_boundaries &lt;- read_sf('data/raw/Neighborhood_Councils_(Certified)/Neighborhood_Councils_(Certified).shp')\n\n\nggplot() +\n  geom_sf(data=nc_boundaries) +\n  theme_minimal()",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#los-angeles-times---la-neighborhoods",
    "href": "lessons/other-datasets.html#los-angeles-times---la-neighborhoods",
    "title": "Using to other datasets",
    "section": "Los Angeles Times - LA neighborhoods",
    "text": "Los Angeles Times - LA neighborhoods\nSome people might be insterested in comparing iNaturalist data with different neighborhoods in LA county.\nLos Angeles Times Data Desk developed a map that broke down L.A. County in 272 neighborhoods. https://maps.latimes.com/about/index.html\n\nla_neighborhoods &lt;- read_sf('data/raw/la_times_la_county_neighborhoods.json')\n\n\nggplot() +\n  geom_sf(data=la_neighborhoods)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-county-incorporated-and-unincorporated-boundaries",
    "href": "lessons/other-datasets.html#la-county-incorporated-and-unincorporated-boundaries",
    "title": "Using to other datasets",
    "section": "LA County incorporated and unincorporated boundaries",
    "text": "LA County incorporated and unincorporated boundaries\nSome people might be interested in comparing iNaturalist data in the cities and unincorporated areas of Los Angeles County.\nCity and Unincorporated Community Boundary (LA County Planning) https://geohub.lacity.org/datasets/lacounty::city-and-unincorporated-community-boundary-la-county-planning/about This layer shows all incorporated and unincorporated areas of Los Angeles County\n\nadmin_boundaries &lt;- read_sf('data/raw/admin_dist_SDE_DIST_DRP_CITY_COMM_BDY_-2349953032962506288/admin_dist_SDE_DIST_DRP_CITY_COMM_BDY.shp')\n\n\nggplot() +\n  geom_sf(data=admin_boundaries)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-county-environmental-justice-screening-method",
    "href": "lessons/other-datasets.html#la-county-environmental-justice-screening-method",
    "title": "Using to other datasets",
    "section": "LA County Environmental Justice Screening Method",
    "text": "LA County Environmental Justice Screening Method\nThe Environmental Justice Screening Method (EJSM) was developed for Los Angeles County by USC PERE / Occidental College for LA County’s Green Zones Program. This tool can be used to identify stationary sources of pollution and analyze cumulative environmental impacts. The overall score show the pollution impacts for each census tract. https://egis-lacounty.hub.arcgis.com/datasets/lacounty::ejsm-scores/about\n\nejsm &lt;- read_sf('data/raw/EJSM_Scores-shp/6cbc6914-690f-48ec-a54f-2649a8ddb321202041-1-139ir98.m1ys.shp')\n\n\nejsm_edit &lt;- ejsm %&gt;% \n  select(CIscore, HazScore, HealthScor, SVscore, CCVscore)\n\nThere are 5 fields in the dataset.\n\n\n\nCIscore\nCumulative Impact Score\n\n\nHazScore\nHazard Proximity Score\n\n\nHealthScor\nHealth Score\n\n\nSVscore\nSocial Vulnerability Score\n\n\nCCVscore\nClimate Change Vulnerability Score\n\n\n\n\nmapview(ejsm_edit, zcol='CIscore',\n        layer.name='Cumulative Impact')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/setup-local.html",
    "href": "lessons/setup-local.html",
    "title": "Setup - local computer",
    "section": "",
    "text": "The workshop used Github Codespaces to host the code, data, and software. If you want to install stuff on your on own computer, follow these steps.",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/setup-local.html#install-packages",
    "href": "lessons/setup-local.html#install-packages",
    "title": "Setup - local computer",
    "section": "Install packages",
    "text": "Install packages\nCopy an paste the following install.packages(...) command into the R console.\n\ninstall.packages(c(\"readr\", \"dplyr\", \"ggplot2\", \"sf\", \"lubridate\", \"mapview\"))",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/setup-local.html#creating-your-own-project-folder-from-scratch",
    "href": "lessons/setup-local.html#creating-your-own-project-folder-from-scratch",
    "title": "Setup - local computer",
    "section": "Creating your own project folder from scratch",
    "text": "Creating your own project folder from scratch\nIf you want to create your own project folder in R Studio, follow these steps.\n\nStart RStudio (you should see a view similar to the screenshot above).\nIn the top right, you will see a blue 3D cube and the words “Project: (None)”. Click on this icon.\nClick New Project from the dropdown menu.\nClick New Directory, then New Project.\nType out a name for the project.\nPut it in a convenient location using the “Create project as a subdirectory of:” section. We recommend your Desktop. You can always move the project somewhere else later, because it will be self-contained.\nClick Create Project and your new project will open.\n\nWhen you need to work on the project, click on the Rproj icon to start RStudio.\nThere are a few settings we will need to adjust to improve the reproducibility of our work. Go to your menu bar, then click Tools → Global Options to open up the Options window.\n\nMake sure your settings match those highlighted in yellow. We don’t want RStudio to store the current status of our R session and reload it the next time we start R. We want to start with a clean, empty R session every time we work.\nWe will use a basic structure for this workshop.\nproject_name\n│\n└── data\n│    └── cleaned\n│    └── raw\n│\n└─── results\n│\n└── scripts\n│\n└── project_name.Rproj\nLet’s start making our new folders. Go to the Files pane (bottom right), and check the current directory, highlighted in yellow below. You should be in the directory for the project you just made. You shouldn’t see any folders in here yet.\n\nNext, click the New Folder button, and type in scripts to generate your scripts folder. It should appear in the Files list now. Repeat the process to make your data, and results folders. Then, click on the data folder in the Files pane. This will take you into the data folder, which will be empty. Use the New Folder button to create raw and cleaned folders. To return to the project folder, click on it in the file path, which is highlighted in yellow in the previous image. It’s worth noting that the Files pane helps you create, find, and open files, but moving through your files won’t change where the working directory of your project is.",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html",
    "href": "lessons/intro-r-rstudio.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "What is R and RStudio?\nHow do you get started working in R and RStudio?\n\n\n\n\n\nUnderstand the difference between R and RStudio.\nDescribe the purpose of the different RStudio panes.\nOrganize files and directories into R Projects.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#questions",
    "href": "lessons/intro-r-rstudio.html#questions",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "What is R and RStudio?\nHow do you get started working in R and RStudio?",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#objectives",
    "href": "lessons/intro-r-rstudio.html#objectives",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Understand the difference between R and RStudio.\nDescribe the purpose of the different RStudio panes.\nOrganize files and directories into R Projects.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#what-are-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#what-are-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "What are R and RStudio?",
    "text": "What are R and RStudio?\nR refers to a programming language as well as the software that runs R code.\nRStudio is a software interface that can make it easier to write R scripts and interact with the R software.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#navigating-rstudio",
    "href": "lessons/intro-r-rstudio.html#navigating-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Navigating RStudio",
    "text": "Navigating RStudio\nWe will use the RStudio integrated development environment (IDE) to write code into scripts, run code in R, navigate files on our computer, inspect objects we create in R, and look at the plots we make.\n\nIn the above screenshot, we can see 4 panes. If you only have 3 panes, and the Console pane is in the top left, press Shift+Cmd+N (Mac) or Shift+Ctrl+N (Windows) to open a blank R script, which should make the Source pane appear.\n\nTop-Left: Source pane that displays scripts and other files.\nTop-Right: Environment pane which shows all the objects in your current R session.\nBottom-Left: Console pane where you can interact directly with an R console, which interprets R commands and prints the results\nBottom-Right: Files pane displays directories and files on your computer. Plot and Viewer displays plots and other types of output. Help display help pages.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#overview-of-workshop-files",
    "href": "lessons/intro-r-rstudio.html#overview-of-workshop-files",
    "title": "Introduction to R and RStudio",
    "section": "Overview of workshop files",
    "text": "Overview of workshop files\nLet’s examine the project files using the Files pane.\nIt is a good practice to organize your projects into self-contained folders. Your project should start with a top-level folder that contains everything necessary for the project, including data, scripts, and results, all organized into subfolders.\nproject_folder\n│\n└── data\n│    └── cleaned\n│    └── raw\n│\n└─── results\n│\n└── scripts\n│\n└── CNC-coding-workshop.Rproj\nWithin our project folder, we have a data folder containing cleaned and raw sub-folders. In general, you want to keep your raw data completely untouched, so once you put data into that folder, you do not modify it. Instead, you read it into R, and if you make any modifications, you write that modified file into the cleaned folder. We also have a results folder for any other documents you might produce. We also have a scripts folder to hold any scripts we write.\nRStudio provides a “Projects” feature that can make it easier to work on individual projects in R. RStudio projects have a xxx.Rproj file.\nOne of the benefits to using RStudio Projects is that they automatically set the working directory to the top-level folder for the project. The working directory is the folder where R is working, so it views the location of all files (including data and scripts) as being relative to the working directory.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#working-in-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#working-in-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Working in R and RStudio",
    "text": "Working in R and RStudio\n\nConsole vs. script\nYou can run commands directly in the R console, or you can write them into an R script.\n\nConsole\n\nThe R console is where code is run/executed\nThe prompt, which is the &gt; symbol, is where you can type commands\nBy pressing Return (Mac) or Enter (Windows), R will execute those commands and print the result.\nWhen you write commands in the R console, you will not be able to access your work in future.\n\nLet’s try running some code in the console.\nFirst, click down in the Console pane, and type out 1+2. Hit Return or Enter to run the code. You should see your code echoed, and then the value of 3 returned.\n\n\nScript\n\nA script is a record of commands to send to R, preserved in a plain text file with a .R extension\nYou type out lines of R code in a script, then send them to the R console to be evaluated. There are 3 ways to run the code\n\nCmd+Return (Mac) or Ctrl+Enter (Windows) will run the line of code that your cursor is on. If you highlight multiple lines of code, you can run all of them by pressing Cmd+Return (Mac) or Ctrl+Enter (Windows)\nclick on the Run button above the editor panel\nselect “Run Lines” from the “Code” menu\n\nBy preserving commands in a script, you can edit and rerun them quickly, save them for later, and share them with others\nAn additional benefit of scripts is that you can leave comments for yourself or others to read. Lines that start with # are considered comments and will not be interpreted as R code.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#first-script",
    "href": "lessons/intro-r-rstudio.html#first-script",
    "title": "Introduction to R and RStudio",
    "section": "First script",
    "text": "First script\nLet’s create our first script.\nYou can make a new R script by clicking File → New File → R Script, clicking the green + button in the top left corner of RStudio, or pressing Shift+Cmd+N (Mac) or Shift+Ctrl+N (Windows). It will be unsaved, and called “Untitled1”\n\nR as Calculator\nNow click into your blank script, and type out 1 + 2. With your cursor on that line, hit Cmd+Enter (Mac) or Ctrl+Enter (Windows) to run the code. You will see that your code was sent from the script to the console, where it returned a value of 3.\n\n\nObjects and Assignment\nSometimes we want to store values in memory so we can use it later. We can save values by assigning values to objects using the assignment operator &lt;- (&lt; less than and - hyphen).\nobject_name &lt;- value\nR creates an object, names the object object_name, and assigns value to the object. We use the object_name to access the value. Objects are shown in the Environment pane.\nLet’s create price_1 and price_2 objects and assign them some values.\n\nprice_1 &lt;- 2\nprice_2 &lt;- 3\n\nNow that we have the two objects saved in memory, we can do things with those objects. We can add the two prices.\n\nprice_1 + price_2\n\n[1] 5\n\n\nWe can reassign new values to an existing object\n\nprice_1 &lt;- 10\n\nprice_1 + price_2\n\n[1] 13\n\n\nObject names can contain letters, numbers, underscores and periods. They cannot start with a number nor contain spaces. If you want object names with multiple words use underscores, capital letters or periods\n\nfirst_name &lt;- 'Jane'\nfirstName &lt;- 'Jane'\nfirst.name &lt;- 'Jane'\n\n\n\nComparing values\nWe can do comparison of price_1 and price_2. The comparisons return TRUE or FALSE.\n\n# equal\nprice_1 == price_2\n\n[1] FALSE\n\n# not equal\nprice_1 != price_2\n\n[1] TRUE\n\n# greater than\nprice_1 &gt; price_2\n\n[1] TRUE\n\n\nR comparison operators:\n== equal\n!= not equal\n&gt; greater than\n&gt;= greater or equal than\n&lt; less than\n&lt;= less or equal than\n\n\nSave scripts\nSave script files by using Cmd+S (Mac) or Ctrl+S (Windows). Give the script a descriptive name such as ‘first_script.R’. Save it in the scripts folder.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "City Nature Challenge iNaturalist R Coding Workshop",
    "section": "",
    "text": "City Nature Challenge iNaturalist R Coding Workshop\nLesson for Natural History Museum of Los Angeles County, City Nature Challenge iNaturalist intro to R coding workshop.\nThe lesson is based on a few Carpentries R lessons: alternative version of the Data Carpentry: R for data analysis and visualization of Ecological Data, R for Social Scientists"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "After iNaturalist - Learn How To Explore City Nature Challenge Data through R Coding",
    "section": "",
    "text": "Put your nature eyes on in a whole new way in this introductory workshop to R coding! Learn how to explore nature in L.A. using biodiversity data collected during nine years of the City Nature Challenge. No previous coding experience necessary!\nProgram content will consist of a virtual information session, two in-person workshops, and two optional virtual office hours. The first in-person workshop will include a high-level overview of R and how to run sample scripts. There will be a three-week break between sessions for you to practice swapping out variables and develop a short presentation.\nSchedule\n\nJan. 16, 2025, 6–7 pm: VIRTUAL Information Session (recording will be available)\nFeb. 1, 2025, 9 am–3:30 pm: IN-PERSON Session with 30-minute Lunch Break at the Natural History Museum of Los Angeles County\nTHREE-WEEK BREAK to Practice R and Develop a Short Presentation of Your Script\nFeb. 8, 2025, 10–11 am: VIRTUAL Office Hour and Q&A (Optional)\nFeb. 15, 2025, 10–11 am: VIRTUAL Office Hour and Q&A (Optional)\nFeb. 22, 2025, 9 am–12 pm:  IN-PERSON Session and Participant Presentations  at the Natural History Museum of Los Angeles County",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html",
    "href": "lessons/understanding-data.html",
    "title": "Understanding data",
    "section": "",
    "text": "What are the basic data types in R?\nWhat are some basic data structures in R?\n\n\n\n\n\nLearn about data types and data structures.\nWe’ve started the previous lessons with read_csv(). To better understand the data returned by read_csv(), we will learn how R represents and stores data.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\ninat_data &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\nLet’s look at the data information returned by glimpse().\nglimpse(inat_data)\n\nRows: 191,638\nColumns: 37\n$ id                         &lt;dbl&gt; 2931940, 2934641, 2934961, 2934980, 2934994…\n$ observed_on                &lt;date&gt; 2016-04-14, 2016-04-14, 2016-04-14, 2016-0…\n$ time_observed_at           &lt;chr&gt; \"2016-04-14 19:25:00 UTC\", \"2016-04-14 19:0…\n$ user_id                    &lt;dbl&gt; 151043, 10814, 80445, 80445, 80445, 121033,…\n$ user_login                 &lt;chr&gt; \"msmorales\", \"smartrf\", \"cdegroof\", \"cdegro…\n$ user_name                  &lt;chr&gt; \"Michael Morales\", \"Richard Smart (he, him)…\n$ created_at                 &lt;chr&gt; \"2016-04-14 07:28:36 UTC\", \"2016-04-14 19:0…\n$ updated_at                 &lt;chr&gt; \"2021-12-26 06:58:04 UTC\", \"2018-05-28 02:0…\n$ quality_grade              &lt;chr&gt; \"research\", \"needs_id\", \"research\", \"resear…\n$ license                    &lt;chr&gt; \"CC-BY\", \"CC-BY-NC\", NA, NA, NA, \"CC-BY-NC\"…\n$ url                        &lt;chr&gt; \"http://www.inaturalist.org/observations/29…\n$ image_url                  &lt;chr&gt; \"https://inaturalist-open-data.s3.amazonaws…\n$ sound_url                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ tag_list                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ description                &lt;chr&gt; \"Spotted on a the wall of a planter, while …\n$ captive_cultivated         &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ latitude                   &lt;dbl&gt; 34.05829, 34.01742, 34.13020, 34.13143, 34.…\n$ longitude                  &lt;dbl&gt; -117.8219, -118.2892, -118.8226, -118.8215,…\n$ positional_accuracy        &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ public_positional_accuracy &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ geoprivacy                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ taxon_geoprivacy           &lt;chr&gt; NA, NA, NA, \"open\", \"open\", NA, \"open\", NA,…\n$ coordinates_obscured       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ scientific_name            &lt;chr&gt; \"Cornu aspersum\", \"Oestroidea\", \"Arphia ram…\n$ common_name                &lt;chr&gt; \"Garden Snail\", \"Bot Flies, Blow Flies, and…\n$ iconic_taxon_name          &lt;chr&gt; \"Mollusca\", \"Insecta\", \"Insecta\", \"Reptilia…\n$ taxon_id                   &lt;dbl&gt; 480298, 356157, 54247, 36100, 36204, 69731,…\n$ taxon_kingdom_name         &lt;chr&gt; \"Animalia\", \"Animalia\", \"Animalia\", \"Animal…\n$ taxon_phylum_name          &lt;chr&gt; \"Mollusca\", \"Arthropoda\", \"Arthropoda\", \"Ch…\n$ taxon_class_name           &lt;chr&gt; \"Gastropoda\", \"Insecta\", \"Insecta\", \"Reptil…\n$ taxon_order_name           &lt;chr&gt; \"Stylommatophora\", \"Diptera\", \"Orthoptera\",…\n$ taxon_family_name          &lt;chr&gt; \"Helicidae\", NA, \"Acrididae\", \"Phrynosomati…\n$ taxon_genus_name           &lt;chr&gt; \"Cornu\", NA, \"Arphia\", \"Uta\", \"Sceloporus\",…\n$ taxon_species_name         &lt;chr&gt; \"Cornu aspersum\", NA, \"Arphia ramona\", \"Uta…\n$ taxon_subspecies_name      &lt;chr&gt; NA, NA, NA, \"Uta stansburiana elegans\", NA,…\n$ threatened                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ establishment_means        &lt;chr&gt; \"introduced\", NA, \"native\", \"native\", \"nati…",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#questions",
    "href": "lessons/understanding-data.html#questions",
    "title": "Understanding data",
    "section": "",
    "text": "What are the basic data types in R?\nWhat are some basic data structures in R?",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#objectives",
    "href": "lessons/understanding-data.html#objectives",
    "title": "Understanding data",
    "section": "",
    "text": "Learn about data types and data structures.",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#data-types",
    "href": "lessons/understanding-data.html#data-types",
    "title": "Understanding data",
    "section": "Data Types",
    "text": "Data Types\nglimpse() shows &lt;dbl&gt; &lt;date&gt; &lt;chr&gt; &lt;lgl&gt;. Those data types.\nIn computer programming, data type is a way to group data values. Every value has a data type. A value’s data type will determine what the programming language can do with the value. For instance, in R we can add numbers but we can’t add strings.\nThere are 4 main types in R: numeric, integer, logical, and character.\n\nnumeric are numbers that contain a decimal (e.g. 1.2, 10.5). By default, R also treats whole numbers as decimals (e.g. 1, 10).\ninteger are whole numbers that do not have a decimal point. (e.g. 1L, 10L). In R, the L suffix forces the number to be an integer, since by default R uses decimal numbers.\nlogical have values of TRUE or FALSE. There is a special type of logical called NA that represents missing values. NA is short for not applicable.\ncharacter represent string values (e.g. “abc”, ‘dog’). The strings must be surrounded by quotes, either single quotes or double quotes.",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#vectors",
    "href": "lessons/understanding-data.html#vectors",
    "title": "Understanding data",
    "section": "Vectors",
    "text": "Vectors\nA data structure is a way to organize and store a collection of values.\nA vector is data structure in R that has series of values. All the value in the vector must be the same data type.\nTo create a vector we use the c() combine function, and pass in the values as arguments.\nWe can use class() function to find the type or class of any object.\nnumeric vector\n\nnum &lt;- c(1, 2, 5)\nnum\n\n[1] 1 2 5\n\nclass(num)\n\n[1] \"numeric\"\n\n\ncharacter vector\n\nchar &lt;- c(\"apple\", \"pear\", \"grape\")\nchar\n\n[1] \"apple\" \"pear\"  \"grape\"\n\nclass(char)\n\n[1] \"character\"\n\n\nlogical vector\n\nlog &lt;- c(TRUE, FALSE, TRUE)\nlog\n\n[1]  TRUE FALSE  TRUE\n\nclass(log)\n\n[1] \"logical\"\n\n\nIf you try to put values of different data types into a vector, all the values are converted to the same data type.\n\nmixed &lt;- c(1, \"apple\", TRUE)\nmixed\n\n[1] \"1\"     \"apple\" \"TRUE\" \n\nclass(mixed)\n\n[1] \"character\"\n\n\nNA is a special type of value, and is allowed in vectors of any data type.\n\n# numeric vector\nnum &lt;- c(1, 2, NA)\nclass(num)\n\n[1] \"numeric\"\n\n# character vector\nchar &lt;- c(\"apple\", \"pear\", NA)\nclass(char)\n\n[1] \"character\"\n\n# logical vector\nlog &lt;- c(TRUE, FALSE, NA)\nclass(log)\n\n[1] \"logical\"",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#data.frame",
    "href": "lessons/understanding-data.html#data.frame",
    "title": "Understanding data",
    "section": "data.frame",
    "text": "data.frame\nWhen we call class() with inat_data, it returns “tbl” and “data.frame”.\n\nclass(inat_data)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\ndata.frame is a data structure from R that is used to represent tabular data with rows and columns. tbl aka tibble is an updated version of data.frame from the tibble package. readr uses tibbles instead of data.frames.\nWhen readr loads a CSV, it tries to figure the data type for each column. Each column in a data.frame and tibble is a vector. Because each column is a vector, all the values in a column must be of the same data type.\nFor inat_data, columns id and latitude are numeric. Columns captive_cultivated and coordinates_obscured are logical. Columns user_login and license are character. Multiple columns have NA such as license and sound_url.\nreadr has a special data type date that is used to represent dates. Column observed_on is date. Other columns are such as time_observed_at are treated as character because those strings have extra information that reader does not recognize as a date.",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html",
    "href": "lessons/working-with-data.html",
    "title": "Working with data",
    "section": "",
    "text": "How do you work with iNaturalist CSV data in R?\n\n\n\n\n\nImport CSV data into R.\nSelect rows and columns of data.frames.\nUse pipes to link steps together into pipelines.\nCreate new data.frame columns using existing columns.\nExport data to a CSV file.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#questions",
    "href": "lessons/working-with-data.html#questions",
    "title": "Working with data",
    "section": "",
    "text": "How do you work with iNaturalist CSV data in R?",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#objectives",
    "href": "lessons/working-with-data.html#objectives",
    "title": "Working with data",
    "section": "",
    "text": "Import CSV data into R.\nSelect rows and columns of data.frames.\nUse pipes to link steps together into pipelines.\nCreate new data.frame columns using existing columns.\nExport data to a CSV file.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exploring-inaturalist-data",
    "href": "lessons/working-with-data.html#exploring-inaturalist-data",
    "title": "Working with data",
    "section": "Exploring iNaturalist data",
    "text": "Exploring iNaturalist data\nA CSV of iNaturalist observations for City Nature Challenge Los Angeles from 2015 to 2024 is located at “data/cleaned/cnc-los-angeles-observations.csv”. We are going to read that CSV using R.\n\nFile paths\nWhen we reference other files from an R script, we need to give R precise instructions on where those files are. We do that using something called a file path.\nThere are two kinds of paths: absolute and relative. Absolute paths are specific to a particular computer, whereas relative paths are relative to a certain folder. Because we are using RStudio “project” feature, all of our paths is relative to the project folder. For instance an absolute path is “/Users/username/Documents/CNC-coding-workshop/data/cleaned/cnc-los-angeles-observations.csv”, and relative path is “data/cleaned/cnc-los-angeles-observations.csv”.\n\n\nReading a CSV file\nIn order to analyze the iNaturalist csv, we need to load readr, lubridate and dplyr packages.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\n\nWe call read_csv() function from readr, and pass in a relative path to a CSV file in order to load the CSV.\nread_csv() will read the file and return the content of the file. In order for us access the content later on, we will assign the content to an object called inat_data.\n\ninat_data &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\nRows: 191638 Columns: 37\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): time_observed_at, user_login, user_name, created_at, updated_at, ...\ndbl   (7): id, user_id, latitude, longitude, positional_accuracy, public_pos...\nlgl   (3): captive_cultivated, coordinates_obscured, threatened\ndate  (1): observed_on\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nTip\n\n\n\nTyping out paths can be error prone, so we can utilize a keyboard shortcut. Inside the parentheses of read_csv(), type out a pair of quotes and put your cursor between them. Then hit Tab. A small menu showing your folders and files should show up. You can use the ↑ and ↓ keys to move through the options, or start typing to narrow them down. You can hit Enter to select a file or folder, and hit Tab again to continue building the file path. This might take a bit of getting used to, but once you get the hang of it, it will speed up writing file paths and reduce the number of mistakes you make.\n\n\nWe can use the glimpse() function from dplyr get a summary about the contents of inat_data. It shows the number of rows and columns. For each column, it shows the name, data type (dbl, chr, lgl, date), and the first few values.\n\nglimpse(inat_data)\n\nRows: 191,638\nColumns: 37\n$ id                         &lt;dbl&gt; 2931940, 2934641, 2934961, 2934980, 2934994…\n$ observed_on                &lt;date&gt; 2016-04-14, 2016-04-14, 2016-04-14, 2016-0…\n$ time_observed_at           &lt;chr&gt; \"2016-04-14 19:25:00 UTC\", \"2016-04-14 19:0…\n$ user_id                    &lt;dbl&gt; 151043, 10814, 80445, 80445, 80445, 121033,…\n$ user_login                 &lt;chr&gt; \"msmorales\", \"smartrf\", \"cdegroof\", \"cdegro…\n$ user_name                  &lt;chr&gt; \"Michael Morales\", \"Richard Smart (he, him)…\n$ created_at                 &lt;chr&gt; \"2016-04-14 07:28:36 UTC\", \"2016-04-14 19:0…\n$ updated_at                 &lt;chr&gt; \"2021-12-26 06:58:04 UTC\", \"2018-05-28 02:0…\n$ quality_grade              &lt;chr&gt; \"research\", \"needs_id\", \"research\", \"resear…\n$ license                    &lt;chr&gt; \"CC-BY\", \"CC-BY-NC\", NA, NA, NA, \"CC-BY-NC\"…\n$ url                        &lt;chr&gt; \"http://www.inaturalist.org/observations/29…\n$ image_url                  &lt;chr&gt; \"https://inaturalist-open-data.s3.amazonaws…\n$ sound_url                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ tag_list                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ description                &lt;chr&gt; \"Spotted on a the wall of a planter, while …\n$ captive_cultivated         &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ latitude                   &lt;dbl&gt; 34.05829, 34.01742, 34.13020, 34.13143, 34.…\n$ longitude                  &lt;dbl&gt; -117.8219, -118.2892, -118.8226, -118.8215,…\n$ positional_accuracy        &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ public_positional_accuracy &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ geoprivacy                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ taxon_geoprivacy           &lt;chr&gt; NA, NA, NA, \"open\", \"open\", NA, \"open\", NA,…\n$ coordinates_obscured       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ scientific_name            &lt;chr&gt; \"Cornu aspersum\", \"Oestroidea\", \"Arphia ram…\n$ common_name                &lt;chr&gt; \"Garden Snail\", \"Bot Flies, Blow Flies, and…\n$ iconic_taxon_name          &lt;chr&gt; \"Mollusca\", \"Insecta\", \"Insecta\", \"Reptilia…\n$ taxon_id                   &lt;dbl&gt; 480298, 356157, 54247, 36100, 36204, 69731,…\n$ taxon_kingdom_name         &lt;chr&gt; \"Animalia\", \"Animalia\", \"Animalia\", \"Animal…\n$ taxon_phylum_name          &lt;chr&gt; \"Mollusca\", \"Arthropoda\", \"Arthropoda\", \"Ch…\n$ taxon_class_name           &lt;chr&gt; \"Gastropoda\", \"Insecta\", \"Insecta\", \"Reptil…\n$ taxon_order_name           &lt;chr&gt; \"Stylommatophora\", \"Diptera\", \"Orthoptera\",…\n$ taxon_family_name          &lt;chr&gt; \"Helicidae\", NA, \"Acrididae\", \"Phrynosomati…\n$ taxon_genus_name           &lt;chr&gt; \"Cornu\", NA, \"Arphia\", \"Uta\", \"Sceloporus\",…\n$ taxon_species_name         &lt;chr&gt; \"Cornu aspersum\", NA, \"Arphia ramona\", \"Uta…\n$ taxon_subspecies_name      &lt;chr&gt; NA, NA, NA, \"Uta stansburiana elegans\", NA,…\n$ threatened                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ establishment_means        &lt;chr&gt; \"introduced\", NA, \"native\", \"native\", \"nati…\n\n\nWe can view the first few rows with the head() function, and the last few rows with the tail()function:\n\nhead(inat_data)\n\n# A tibble: 6 × 37\n       id observed_on time_observed_at   user_id user_login user_name created_at\n    &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n1 2931940 2016-04-14  2016-04-14 19:25:…  151043 msmorales  Michael … 2016-04-1…\n2 2934641 2016-04-14  2016-04-14 19:02:…   10814 smartrf    Richard … 2016-04-1…\n3 2934961 2016-04-14  2016-04-14 19:15:…   80445 cdegroof   Chris De… 2016-04-1…\n4 2934980 2016-04-14  2016-04-14 19:18:…   80445 cdegroof   Chris De… 2016-04-1…\n5 2934994 2016-04-14  2016-04-14 19:19:…   80445 cdegroof   Chris De… 2016-04-1…\n6 2935037 2016-04-14  2016-04-14 19:36:…  121033 ttempel    &lt;NA&gt;      2016-04-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\n\ntail(inat_data)\n\n# A tibble: 6 × 37\n         id observed_on time_observed_at user_id user_login user_name created_at\n      &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n1 254128969 2024-04-28  2024-04-28 17:1… 2834615 thannavic… Thanna V… 2024-12-0…\n2 255041807 2024-04-26  2024-04-26 23:3… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n3 255041881 2024-04-26  2024-04-26 22:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n4 255041985 2024-04-26  2024-04-26 22:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n5 255042063 2024-04-26  2024-04-26 20:4… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n6 255042124 2024-04-26  2024-04-26 19:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\nYou can use View() function from R to open an interactive viewer, which behaves like a simplified version of a spreadsheet program. If you hover over the tab for the interactive View(), you can click the “x” that appears, which will close the tab.\n\nView(inat_data)\n\nYou can use names() from R to see the fields in the data frame.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\nWe can use dim() function from R to get the dimension of a data frame.\n\ndim(inat_data)\n\n[1] 191638     37\n\n\ninat_data has over 193K rows and 37 columns.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#more-about-functions",
    "href": "lessons/working-with-data.html#more-about-functions",
    "title": "Working with data",
    "section": "More about functions",
    "text": "More about functions\nTo learn more about a function, you can type a ? in front of the name of the function, which will bring up the official documentation for that function:\n\n?head\n\nFunction documentation is written by the authors of the functions, so they can vary pretty widely in their style and readability. The first section, Description, gives you a concise description of what the function does, but it may not always be enough. The Arguments section defines all the arguments for the function and is usually worth reading thoroughly. Finally, the Examples section at the end will often have some helpful examples that you can run to get a sense of what the function is doing.\nThe help Arguments section for head() shows four arguments. The first argument x is required, the rest are optional. For example, the n argument in head() specifies the number of rows to print. It defaults to 6, but we can override that by specifying a different number:\n\nhead(x = inat_data, n = 10)\n\nIf we order the argument the same order they are listed in help Arguments section, we don’t have to name them:\n\nhead(inat_data, 10)\n\nAdditionally, if we name them, we can put them in any order we want:\n\nhead(n = 10, x = inat_data)",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#manipulating-data",
    "href": "lessons/working-with-data.html#manipulating-data",
    "title": "Working with data",
    "section": "Manipulating data",
    "text": "Manipulating data\nOne of the most important skills for working with data in R is the ability to manipulate, modify, and reshape data. The dplyr package provide a series of powerful functions for many common data manipulation tasks.\n\nselect()\nThe select() function is used to select certain columns of a data frame.\nTo use the select() function, the first argument is the name of the data frame, and the rest of the arguments are unquoted names of the columns you want.\nOur inat_data dataframe has 37 columns. We want three columns: user_login, common_name, scientific_name, observed_on.\n\nselect(inat_data, user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 191,638 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 smartrf       Bot Flies, Blow Flies, and Allies   Oestroidea      2016-04-14 \n 3 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 4 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 5 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 ttempel       &lt;NA&gt;                                Coelocnemis     2016-04-14 \n 7 bradrumble    House Sparrow                       Passer domesti… 2016-04-15 \n 8 deedeeflower5 Amur Carp                           Cyprinus rubro… 2016-04-14 \n 9 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n10 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n# ℹ 191,628 more rows\n\n\nselect() creates a new data frame with 193K rows, and 4 columns.\n\n\nfilter()\nThe filter() function is used to select rows that meet certain criteria.\nTo use the filter() function, the first argument is the name of the data frame, and the second argument is the selection criteria.\nLet’s find all the observations for ‘Western Fence Lizard’, the most popular species in CNC Los Angeles. We want all the rows where common_name is equal to ‘Western Fence Lizard’. Use == to test for equality.\n\nfilter(inat_data, common_name == 'Western Fence Lizard')\n\n# A tibble: 3,339 × 37\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 2 2935263 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 3 2935420 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 4 2935748 2016-04-14  2016-04-14 21:01…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2935965 2016-04-14  2016-04-14 19:44…  171443 lchroman   &lt;NA&gt;      2016-04-1…\n 6 2938607 2016-04-14  2016-04-14 23:33…  146517 maiz       &lt;NA&gt;      2016-04-1…\n 7 2940103 2016-04-15  2016-04-15 16:31…   80984 kimssight  Kim Moore 2016-04-1…\n 8 2940838 2016-04-15  2016-04-15 17:11…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n 9 2940848 2016-04-15  2016-04-15 17:17…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n10 2940855 2016-04-15  2016-04-15 17:42…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n# ℹ 3,329 more rows\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nfilter() creates a new data frame with over 3000 rows, and 37 columns.\n\n\nThe pipe: %&gt;%\nWhat happens if we want to select columns and filter rows?\nWe use the pipe operator %&gt;% to call multiple functions.\n\n\n\n\n\n\nTip\n\n\n\nYou can insert %&gt;% by using the keyboard shortcut Shift+Cmd+M (Mac) or Shift+Ctrl+M (Windows).\n\n\n\nselect observations by common_name\nLet’s get all observations for ‘Western Fence Lizard’, and we only want columns user_login, common_name, scientific_name, observed_on.\n\ninat_data %&gt;%\n  filter(common_name == 'Western Fence Lizard') %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 3,339 × 4\n   user_login    common_name          scientific_name         observed_on\n   &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;                   &lt;date&gt;     \n 1 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 2 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 3 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 4 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 5 lchroman      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 6 maiz          Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 7 kimssight     Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n 8 sarahwenner   Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n 9 sarahwenner   Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n10 sarahwenner   Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n# ℹ 3,329 more rows\n\n\nThe new data frame has over 3000 rows and 4 columns.\nPipe operator take the thing on the lefthand side and insert it as the first argument of the function on the righthand side. inat_data gets piped into a filter() function, where the rows with ‘Western Fence Lizard’ are selected. The output from filter() is then gets sent into the select() function, where 4 columns are selected. It can also be helpful to think of %&gt;% as meaning “and then”.\n\n\nselect observations by coordinates_obscured\nSometimes the coordinates for iNaturalist observations are obscured. For instance, when the observation involves an endangered species, iNaturalist will automatically obscure the coordinates in order to protect the species. Sometimes people choose to obscure their location when they are making observations so that other people will not know their exact location. iNaturalist has information about obscured coordinates.\nTo access one column in a data frame, use dataframe$column_name. When we pass in a data frame column to table() function from R, it will return the unique values in a column, and the number of rows that contain each value.\nLet’s find out how many observations have obscured locations.\n\ntable(inat_data$coordinates_obscured)\n\n\n FALSE   TRUE \n176942  14696 \n\n\n176K row are false (coordinates are normal), 14K rows are true (coordinates are obscured).\nIf the exact location of the observation will affect your analysis, then you want unobscured coordinates. Let’s get the observations where the coordinates are not obscured.\n\ninat_data %&gt;%\n  filter(coordinates_obscured == FALSE) %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 176,942 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 smartrf       Bot Flies, Blow Flies, and Allies   Oestroidea      2016-04-14 \n 3 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 4 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 5 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 ttempel       &lt;NA&gt;                                Coelocnemis     2016-04-14 \n 7 bradrumble    House Sparrow                       Passer domesti… 2016-04-15 \n 8 deedeeflower5 Amur Carp                           Cyprinus rubro… 2016-04-14 \n 9 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n10 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n# ℹ 176,932 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen using both filter() and select(), it is a good idea to use filter() before select(). The following code will cause an error “object ‘coordinates_obscured’ not found”.\n\ninat_data %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)  %&gt;% \n  filter(coordinates_obscured == FALSE)\n\nselect() creates a data frame with four fields. When we try to filter() using coordinates_obscured, we get an error because the 4-field data frame we pass to filter() does not have the field coordinates_obscured.\n\n\n\n\nselect observations by quality_grade\niNaturalist gives a quality grade to each observation.\nTo see all the unique values for a column, use unique() function from R and pass in the column name.\n\nunique(inat_data$quality_grade)\n\n[1] \"research\" \"needs_id\" \"casual\"  \n\n\nWhen researchers use iNaturalist data, they normally use research grade observations. Let’s get the observations that are research grade.\n\ninat_data %&gt;%\n  filter(quality_grade == 'research')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 107,491 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 3 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 4 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 5 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n 6 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n 7 lchroman      Cactus Wren                         Campylorhynchu… 2016-04-14 \n 8 deedeeflower5 Desert Cottontail                   Sylvilagus aud… 2016-04-14 \n 9 deedeeflower5 Western Fence Lizard                Sceloporus occ… 2016-04-14 \n10 deedeeflower5 Eastern Fox Squirrel                Sciurus niger   2016-04-14 \n# ℹ 107,481 more rows",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#errors-in-code",
    "href": "lessons/working-with-data.html#errors-in-code",
    "title": "Working with data",
    "section": "Errors in code",
    "text": "Errors in code\nWe are writing instructions for the computer. If there is a typo, mispelling, wrong function arguments, etc, the code will not work and we will see errors. R will display the errors in red. You need to fix the errors in order for the code to work. Here are some example errors.\ntypo: we used %&gt;, when it should be %&gt;%\n\ninat_data %&gt;\n  select(user_login, observed_on, common_name)\n\nMisspelled user_logi\n\ninat_data %&gt;%\n  select(user_logi, observed_on, common_name)\n\ntypo: we use =, when it should be ==\n\ninat_data %&gt;%\n  filter(user_login = 'natureinla')\n\ntypo: extra )\n\ninat_data %&gt;%\n  select(user_login, observed_on, common_name))",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-1",
    "href": "lessons/working-with-data.html#exercise-1",
    "title": "Working with data",
    "section": "Exercise 1",
    "text": "Exercise 1\nGet all your City Nature Challenge observations.\n\nUse filter() to select observations. with your iNaturalist username\nUse select() to select 4 columns. One of the columns should be common_name\nassign the results to my_obs object\nclick on my_obs in the Environment tab to see the results\n\n\n\nmy_obs &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#logical-operators",
    "href": "lessons/working-with-data.html#logical-operators",
    "title": "Working with data",
    "section": "Logical operators",
    "text": "Logical operators\nIn previous examples used one criteria in filter() to select some rows. Often times we want to use multiple criteria to select some rows. Logical operators allow you to do multiple comparisons at once.\n\nand operator: &\nWhen we want to get rows that match multiple criteria, we use the and operator & in between the criteria.\ncondtion_1 & condition_2\n\nselect observations by common_name and quality_grade\nLet’s get all ‘Western Fence Lizard’ observations that are research grade. This means we want to get rows where common_name is ‘Western Fence Lizard’ and quality_grade is ‘research’.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(common_name == 'Western Fence Lizard' & \n           quality_grade == 'research')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on, quality_grade)\n\nWe can check the results to make sure we wrote we got the data we want. We can use unique() to check the column values.\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\n\nunique(my_data$quality_grade)\n\n[1] \"research\"\n\n\n\n\nselect observations by coordinates_obscured and positional_accuracy\nIn addition to coordinates being intentionally obscured, another thing that can affect the coordinates for an observation is the accuracy of the coordinates. The accuracy of GPS on smart phones depends on the hardware, software, physcial environment, etc. The positional_accuracy from iNaturalist measures the coordinates error in meters.\nLet’s get observations with unobscured locations that have position accuracy less than 5 meters.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(coordinates_obscured == FALSE & \n           positional_accuracy &lt; 5) %&gt;%\n  select(user_login, common_name, scientific_name, positional_accuracy, coordinates_obscured)\n\n\nunique(my_data$coordinates_obscured)\n\n[1] FALSE\n\n\n\nunique(my_data$positional_accuracy)\n\n[1] 4 3 2 1 0\n\n\n\n\n\nor operator: |\nWhen we want to get rows that match one or more criteria, we can use the or operator | in between the conditions\ncondition_1 | condition_2\n\nselect observations by multiple common_name\nLet’s get observations where common_name is ‘Western Fence Lizard’ or ‘Western Honey Bee’.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(common_name == 'Western Honey Bee' | common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, observed_on, common_name)\n\ndim(my_data)\n\n[1] 5399    3\n\n\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\" \"Western Honey Bee\"   \n\n\n\n\n\n%in% c()\nIf you need to examine multiple values for a field, you can use field_name %in% c(value1, value2) instead of | (or).\nA vector is how R stores a list of items. c() combine function from R creates a vector with the passed in arguments. %in% operator from R checks if a vector is contained in another vector.\n\n1 %in% c(1, 2)\n\n[1] TRUE\n\nc(1, 3) %in% c(1, 2)\n\n[1]  TRUE FALSE\n\n\n\nselect observations by multiple license\niNaturalist observations, photos, and sounds are covered by licenses. The default license is CC BY-NC (Creative Commons: Attribution-NonCommercial) so other people can use the content if they give attribution to you and use it for non-commercial purposes. iNaturalist exports observations with No Copyright (CC0), Attribution (CC BY), and Attribution-NonCommercial (CC BY-NC) license to Global Biodiversity Information Facility (GBIF), an international organization that provides access to biodiversity information. Many researchers who use iNaturalist data get their data from GBIF. More info about iNaturalist licenses. This means if iNaturalist observers want their data to be used by scientists, they need to use one of those three licenses.\nWe can use table() to see the license types and count.\n\ntable(inat_data$license)\n\n\n      CC-BY    CC-BY-NC CC-BY-NC-ND CC-BY-NC-SA    CC-BY-ND    CC-BY-SA \n       5384      129677        1199        2934          35          79 \n        CC0 \n       4934 \n\n\nLet’s get observations with CC0, CC-BY, or CC-BY-NC license.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC')) %&gt;%\n  select(user_login, observed_on, common_name, license)\n\ndim(my_data)\n\n[1] 139995      4\n\n\n\nunique(my_data$license)\n\n[1] \"CC-BY\"    \"CC-BY-NC\" \"CC0\"     \n\n\n\n\n\n& (and) versus | (or)\n& (and) return rows where all conditions are true. This code looks for observations where user_login is ‘natureinla’ and common_name is ‘Western Fence Lizard’.\n\nand_data &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla' & common_name == 'Western Fence Lizard')\n\ndim(and_data)\n\n[1] 79 37\n\n\n\nunique(and_data$user_login)\n\n[1] \"natureinla\"\n\n\n\nunique(and_data$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\nWe get 79 rows with 1 user_login and 1 common_name\n| (or) returns rows where any conditions are true. This code looks for observations where user_login is ‘natureinla’ plus observations where common_name is ‘Western Fence Lizard’\n\nor_data &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla' | common_name == 'Western Fence Lizard')\n\ndim(or_data)\n\n[1] 6216   37\n\n\n\nunique(or_data$user_login) %&gt;% length\n\n[1] 1052\n\n\n\nunique(or_data$common_name) %&gt;% length\n\n[1] 1031\n\n\nWe get 6,216 rows with 1052 user_login and 1031 common_name\n& vs | will return different results. Check the results of your code to make sure your results matches what you intended.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-2",
    "href": "lessons/working-with-data.html#exercise-2",
    "title": "Working with data",
    "section": "Exercise 2",
    "text": "Exercise 2\nGet all your observations that are research grade\n\nUse & with filter() since we want to pick observations by both username and quality grade\nUse select() to pick 4 columns\n\n\n\ninat_data %&gt;%\n  filter(user_login == 'natureinla' & \n           quality_grade == 'research') %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)\n\n# A tibble: 1,556 × 4\n   user_login observed_on common_name            scientific_name              \n   &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;                  &lt;chr&gt;                        \n 1 natureinla 2016-04-14  Red-eared Slider       Trachemys scripta elegans    \n 2 natureinla 2016-04-14  Monarch                Danaus plexippus             \n 3 natureinla 2016-04-14  San Diego Gopher Snake Pituophis catenifer annectens\n 4 natureinla 2016-04-14  California Towhee      Melozone crissalis           \n 5 natureinla 2016-04-14  Cooper's Hawk          Astur cooperii               \n 6 natureinla 2016-04-14  Monarch                Danaus plexippus             \n 7 natureinla 2016-04-14  Allen's Hummingbird    Selasphorus sasin            \n 8 natureinla 2016-04-15  Northern Mockingbird   Mimus polyglottos            \n 9 natureinla 2016-04-15  House Sparrow          Passer domesticus            \n10 natureinla 2016-04-15  Indian Peafowl         Pavo cristatus               \n# ℹ 1,546 more rows",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#more-complex-queries",
    "href": "lessons/working-with-data.html#more-complex-queries",
    "title": "Working with data",
    "section": "More complex queries",
    "text": "More complex queries\nSometimes we want to use both & | to select the rows. You can use multiple filter() statememts. Multiple filter() is the equivalent of &.\n\nselect observations by multiple user_login and common_name\nLet’s get observations where user is ‘cdegroof’ or ‘deedeeflower5’, and species is ‘Western Fence Lizard’.\n\ncomplex_query &lt;- inat_data %&gt;%\n  filter(user_login == 'cdegroof' | \n           user_login == 'deedeeflower5') %&gt;%\n  filter(common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\ncomplex_query\n\n# A tibble: 33 × 4\n   user_login    common_name          scientific_name         observed_on\n   &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;                   &lt;date&gt;     \n 1 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 2 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 3 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 4 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 5 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 6 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 7 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 8 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n 9 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n10 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n# ℹ 23 more rows\n\n\n\nunique(complex_query$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\n\nunique(complex_query$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis query using just | & does not give us what we want.\n\nalt_1 &lt;- inat_data %&gt;%\n  filter(user_login == 'cdegroof' | user_login == 'deedeeflower5' & \n           common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\nalt_1\n\n# A tibble: 374 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 2 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 3 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 4 deedeeflower5 Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 5 deedeeflower5 Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 cdegroof      Common Gilled Mushrooms and Allies  Agaricales      2016-04-14 \n 7 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 8 cdegroof      Garden Snail                        Cornu aspersum  2016-04-14 \n 9 cdegroof      Tiger Moths                         Arctiini        2016-04-14 \n10 cdegroof      Western Toad                        Anaxyrus boreas 2016-04-14 \n# ℹ 364 more rows\n\n\n\nunique(alt_1$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"\n\n\n\nunique(alt_1$common_name) %&gt;% length\n\n[1] 137\n\n\nIn most programming languages, and is evaluated before or. Our query asked find all observations by ‘deedeeflower5’ for ‘Western Fence Lizard’, and find all observations by ‘cdegroof’.\nThis query using | & () does give us what we want. We used parenthesis around the two user_login.\n\nalt_2 &lt;- inat_data %&gt;%\n  filter((user_login == 'cdegroof' | user_login == 'deedeeflower5') & \n           common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\nalt_2\n\n# A tibble: 33 × 4\n   user_login    common_name          scientific_name         observed_on\n   &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;                   &lt;date&gt;     \n 1 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 2 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 3 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 4 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 5 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 6 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 7 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 8 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n 9 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n10 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n# ℹ 23 more rows\n\n\n\nunique(alt_2$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"\n\n\n\nunique(alt_2$common_name) %&gt;% length\n\n[1] 1",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-3",
    "href": "lessons/working-with-data.html#exercise-3",
    "title": "Working with data",
    "section": "Exercise 3",
    "text": "Exercise 3\nGet all your observations for two species\n\nUse unique(my_obs$common_names) from Exercise 1 to find two species name.\nUse filter() to pick two species and your username.\n\nUse | or %in% c()% to handle multiple species.\nUse select() to pick four columns.\n\n\n\nunique(my_obs$common_name)[0:10]\n\n [1] \"Red-eared Slider\"       \"Monarch\"                \"San Diego Gopher Snake\"\n [4] \"California Towhee\"      \"Cooper's Hawk\"          \"tropical milkweed\"     \n [7] \"Allen's Hummingbird\"    \"Northern Mockingbird\"   \"House Sparrow\"         \n[10] \"Indian Peafowl\"        \n\n\n\ninat_data %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  filter(common_name == 'Red-eared Slider' | common_name=='Monarch') %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)\n\n# A tibble: 44 × 4\n   user_login observed_on common_name      scientific_name          \n   &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;            &lt;chr&gt;                    \n 1 natureinla 2016-04-14  Red-eared Slider Trachemys scripta elegans\n 2 natureinla 2016-04-14  Monarch          Danaus plexippus         \n 3 natureinla 2016-04-14  Monarch          Danaus plexippus         \n 4 natureinla 2016-04-14  Monarch          Danaus plexippus         \n 5 natureinla 2016-04-14  Red-eared Slider Trachemys scripta elegans\n 6 natureinla 2016-04-16  Monarch          Danaus plexippus         \n 7 natureinla 2016-04-15  Monarch          Danaus plexippus         \n 8 natureinla 2016-04-17  Monarch          Danaus plexippus         \n 9 natureinla 2016-04-15  Monarch          Danaus plexippus         \n10 natureinla 2016-04-15  Monarch          Danaus plexippus         \n# ℹ 34 more rows",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#higher-taxonomy",
    "href": "lessons/working-with-data.html#higher-taxonomy",
    "title": "Working with data",
    "section": "Higher taxonomy",
    "text": "Higher taxonomy\nSo far we looked at species. Instead of looking at specific species, we can also look for a group of related species.\nLet’s look for observations for all oak trees. We can use filter where the common_name is ‘oaks’.\n\noaks_obs &lt;- inat_data %&gt;%\n  filter(common_name == 'oaks') \n\ndim(oaks_obs)\n\n[1] 218  37\n\n\nWe have 218 observations. However, when we used the iNaturalist site to look for ‘oaks’ for ‘Los Angeles City Nature Challenge Cumulative Observations 2016-2024’, we get 1369 observations. What’s causing the difference?\nWhen you search for ‘oaks’ on iNaturalist, click the ‘About’ link, and it will bring you to the taxa page for ‘oaks’.\n\n\n‘Oaks’ is the common name for genus Quercus. When you search iNaturalist observations for ‘oaks’, iNaturalist returns observations that belong to the genus Quercus, which includes species such as ‘Live Coast Oak’ and ‘Valley Oak’.\nLet’s look at the scientific name when we use common_name == 'oaks'\n\nunique(oaks_obs$scientific_name)\n\n[1] \"Quercus\"\n\n\nThe scientific name for the 218 ‘oaks’ observation is Quercus. This means we aren’t including oak species. To match the iNaturalist search results, we need to look for all observations where the genus equals Quercus including oak species.\nWe can use names() to get all the taxon name fields. There are several taxon__xxx__name fields.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen you download iNaturalist data, you can to select which taxon name fields to include in the download. By default, none are selected because the ‘Taxon extras’ fields slow down the export process.\n\nWe included the main taxon ranks names in the CNC observations csv.\n\n\nThe ‘Taxonomy’ tab on iNaturalist taxa pages show the taxonomic hierarchy with all the taxon ranks.\n\nWe can create a filter command to represent the taxonomic hierarchy.\n\noaks_obs_fixed &lt;- inat_data %&gt;%\n  filter(\n    taxon_kingdom_name == 'Plantae' &\n    taxon_phylum_name == 'Tracheophyta' &\n    taxon_class_name == 'Magnoliopsida' &\n    taxon_order_name == 'Fagales' &\n    taxon_family_name == 'Fagaceae' &\n    taxon_genus_name == 'Quercus'\n  )\n\nThe reason why I listed the hierarchy instead of just filtering by taxon_genus_name == 'Quercus' is because of limitations of my taxonomy knowledge and the limitations of the information provided by the CSV. Some Latin words are used multiple times to represent different taxa. For instance Eisenia is a genus for a type of worm and a genus for a type kelp. A filter command for taxon_genus_name == 'Eisenia' would return observations for two very different organisms. I don’t have enough expertise to know if a taxa name is unique, so to play it safe, I list the entire taxonomy hierarchy. Someone with more expertise might know there is only one Quercus in Plantae, and use filter(taxon_kingdom_name == 'Plantae' & taxon_genus_name == 'Quercus').\niNaturalist gives each taxa name a unique id. Worm Eisenia is 128842, kelp Eisenia is 125880. When iNaturalist searches for observations for a given taxa, it uses the unique id for the search to avoid the problem of duplicate scientific names. Unfortunately the CSV download does not provide ids for each taxon rank, so we can’t do a search by taxon rank id. It is possible to get the ids for all the taxon ranks, but that involves more advance coding techniques.\n\ndim(oaks_obs_fixed)\n\n[1] 1367   37\n\n\nWe now get 1367 observations.\n\n\n\n\n\n\nNote\n\n\n\nThe reason why iNaturalist has 1369 observations for ‘oaks’ but we have 1367 is because iNaturalist has two ‘oaks’ observations which don’t have latitude and longitude data. Our cleaned iNaturalist data excludes observations without latitude and longitude.\n\n\nLet’s examine the number of observations for each type of oak. We can use count() to get the counts.\n\noaks_count &lt;- oaks_obs_fixed %&gt;%\n  count(common_name, scientific_name) %&gt;%\n  arrange(desc(n))\n\noaks_count\n\n# A tibble: 34 × 3\n   common_name          scientific_name            n\n   &lt;chr&gt;                &lt;chr&gt;                  &lt;int&gt;\n 1 coast live oak       Quercus agrifolia        711\n 2 oaks                 Quercus                  218\n 3 valley oak           Quercus lobata           113\n 4 California scrub oak Quercus berberidifolia    74\n 5 canyon live oak      Quercus chrysolepis       55\n 6 Tucker's Oak         Quercus john-tuckeri      25\n 7 high-latitude oaks   Quercus                   20\n 8 Engelmann oak        Quercus engelmannii       17\n 9 &lt;NA&gt;                 Dumosae                   16\n10 cork oak             Quercus suber             12\n# ℹ 24 more rows\n\n\nWhile most of the observations are species, there are 218 observations that could only be identified to the genus Quercus.\nAnother example, let’s search for ‘trees’. When we search iNaturalist for ‘trees’, the first result is Phylum Tracheophyta. Let’s look at our data using taxon_phylum_name and ‘Tracheophyta’\n\ntrees_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Plantae' &\n           taxon_phylum_name == 'Tracheophyta')\n\ndim(trees_obs)\n\n[1] 95372    37\n\n\nThere are 95372 Tracheophyta observations.\nLet’s get a count of observations for Tracheophyta.\n\ntrees_count &lt;- trees_obs %&gt;%\n  count(common_name) %&gt;%\n  arrange(desc(n))\n\ntrees_count\n\n# A tibble: 3,759 × 2\n   common_name                n\n   &lt;chr&gt;                  &lt;int&gt;\n 1 &lt;NA&gt;                    2433\n 2 dicots                  2013\n 3 flowering plants        1161\n 4 California poppy         934\n 5 California brittlebush   842\n 6 black sage               796\n 7 California sagebrush     794\n 8 California Buckwheat     751\n 9 coast live oak           711\n10 grasses                  673\n# ℹ 3,749 more rows\n\n\nWe are getting plants such as California poppy, grasses, which aren’t trees. Why is that?\nIf we look up ‘Tracheophyta’ in Wikipedia:\n\nThe group includes most land plants (c. 300,000 accepted known species) other than mosses.\n\nIf we look up ‘tree’ in Wikipedia:\n\nTrees are not a monophyletic taxonomic group but consist of a wide variety of plant species that have independently evolved a trunk and branches as a way to tower above other plants to compete for sunlight. The majority of tree species are angiosperms or hardwoods; of the rest, many are gymnosperms or softwoods.\n\n\nAlthough “tree” is a common word, there is no universally recognised precise definition of what a tree is, either botanically or in common language.\n\nIn other words, there is no one word we can use to find all trees. The fact that iNaturalist shows Tracheophyta as the first search result for ‘trees’ is a little quirk with the iNaturalist search algorithm. To find all trees, we would need to get a list of trees names, and create a filter command with all the tree names.\nA quick internet search came up with LA County recommended trees and Wikipedia list of trees and shrubs. You can use lists like these as the basis of creating a list of trees. Your search might look something like this.\nSearch by species.\n\nlaco_species &lt;- c('Acacia aneura', 'Acacia stenophylla', 'Afrocarpus falcatus', \"Agonis flexuosa\", 'Angophora costata', \"Arbutus 'marina'\", 'Arbutus unedo'  )\n\nlaco_species_obs &lt;- inat_data %&gt;%\n  filter(taxon_species_name %in% laco_species & \n           taxon_kingdom_name == 'Plantae') %&gt;%\n  select(user_login, common_name, scientific_name, taxon_species_name)\n\n\nlaco_species_count &lt;- laco_species_obs %&gt;%\n  count(common_name, scientific_name, taxon_species_name) %&gt;%\n  arrange(desc(n))\n\nlaco_species_count\n\n# A tibble: 4 × 4\n  common_name                   scientific_name     taxon_species_name      n\n  &lt;chr&gt;                         &lt;chr&gt;               &lt;chr&gt;               &lt;int&gt;\n1 strawberry tree               Arbutus unedo       Arbutus unedo          16\n2 Outeniqua Yellowwood          Afrocarpus falcatus Afrocarpus falcatus     5\n3 Western Australian Peppermint Agonis flexuosa     Agonis flexuosa         5\n4 shoestring acacia             Acacia stenophylla  Acacia stenophylla      3\n\n\nSearch by genera.\n\nlaco_genera &lt;- c('Acacia',  'Afrocarpus', \"Agonis\", 'Angophora', \"Arbutus\" )\n\nlaco_genera_obs &lt;- inat_data %&gt;%\n  filter(taxon_genus_name %in% laco_genera & \n           taxon_kingdom_name == 'Plantae') %&gt;%\n  select(user_login, common_name, scientific_name, taxon_genus_name)\n\n\nlaco_genera_count &lt;- laco_genera_obs %&gt;%\n  count(common_name, scientific_name, taxon_genus_name) %&gt;%\n  arrange(desc(n))\n\nlaco_genera_count\n\n# A tibble: 30 × 4\n   common_name             scientific_name      taxon_genus_name     n\n   &lt;chr&gt;                   &lt;chr&gt;                &lt;chr&gt;            &lt;int&gt;\n 1 wattles                 Acacia               Acacia              33\n 2 western coastal wattle  Acacia cyclops       Acacia              32\n 3 madrones                Arbutus              Arbutus             23\n 4 strawberry tree         Arbutus unedo        Arbutus             16\n 5 Longleaf Wattle         Acacia longifolia    Acacia              14\n 6 blackwood               Acacia melanoxylon   Acacia              14\n 7 vanilla-scented wattle  Acacia redolens      Acacia               8\n 8 Cootamundra wattle      Acacia baileyana     Acacia               6\n 9 East African yellowwood Afrocarpus gracilior Afrocarpus           6\n10 golden wreath wattle    Acacia saligna       Acacia               6\n# ℹ 20 more rows\n\n\nWhen searching for species, it’s generally better to search by scientific names rather than common names. A species should only have one scientific name. A species can have zero to many common names in many languages, and different sources can use different common names. For example iNaturalist uses strawberry tree and LA County tree list uses strawberry madrone for Arbutus unedo. The downside of searching by scientific names is trying to spell and say all these Latin words.\nWhen looking for a group of related organisms using higher taxonomy, it might take some additional research, and trial and error to get the results you want.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#add-new-columns-with-mutate",
    "href": "lessons/working-with-data.html#add-new-columns-with-mutate",
    "title": "Working with data",
    "section": "Add new columns with mutate()",
    "text": "Add new columns with mutate()\nAnother common task is creating a new column based on values in existing columns. For example, we could add a new column for year.\nUse mutate() from dplry to add a column. We pass in the name of the new column, and the value of the column.\nUse year() from lubridate on a date column to get the year.\n\n\n\n\n\n\nTip\n\n\n\nVector is a list of items. We can access specific values in a vector by using vector_name[number]. To access a range of values use vector_name[start_number:end_number]\n\nletters &lt;- c('a','b','c', 'd')\n\n# get first item \nletters[1]\n\n[1] \"a\"\n\n# get second and third item\nletters[2:3]\n\n[1] \"b\" \"c\"\n\n\n\n\nLet’s get observed_on for rows 10317 to 10320.\n\ninat_data$observed_on[10317:10320]\n\n[1] \"2016-04-18\" \"2016-04-16\" \"2017-04-14\" \"2017-04-15\"\n\n\nLet’s get use year() to get the year from observed_on for rows 10317 to 10320\n\nyear(inat_data$observed_on)[10317:10320]\n\n[1] 2016 2016 2017 2017\n\n\nThis code will add year column using the year(observed_on)\n\ntemp &lt;- inat_data %&gt;%\n  mutate(year = year(observed_on))\n\nYou can click on temp in Environment tab to see the data frame with year column.\nWe can also use table() to get the number of observations per year.\n\ntable(temp$year)\n\n\n 2016  2017  2018  2019  2020  2021  2022  2023  2024 \n10392 17495 19164 34057 19524 22549 19597 26602 22258 \n\n\nUse class() to check the data type.\n\nclass(temp$year)\n\n[1] \"numeric\"\n\n\n\nselect observations by year\nLet’s get all observations for 2020. Use mutate() to add year column, and use filter() to select rows where year is 2020.\n\ninat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  filter(year == 2020)\n\n# A tibble: 19,524 × 38\n         id observed_on time_observed_at user_id user_login user_name created_at\n      &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 43036512 2020-04-24  2020-04-24 07:0…  907908 samatha    &lt;NA&gt;      2020-04-2…\n 2 43036525 2020-04-24  2020-04-24 07:0… 2556338 charlesja… Charles … 2020-04-2…\n 3 43036534 2020-04-24  2020-04-24 07:0…  146517 maiz       &lt;NA&gt;      2020-04-2…\n 4 43036755 2020-04-24  2020-04-24 07:0… 2556338 charlesja… Charles … 2020-04-2…\n 5 43036856 2020-04-24  2020-04-24 07:0… 2556338 charlesja… Charles … 2020-04-2…\n 6 43036989 2020-04-24  2020-04-24 07:0…   74669 amyjaecke… Amy Jaec… 2020-04-2…\n 7 43037041 2020-04-24  2020-04-24 07:0…   74669 amyjaecke… Amy Jaec… 2020-04-2…\n 8 43037308 2020-04-24  2020-04-24 07:1… 2556338 charlesja… Charles … 2020-04-2…\n 9 43037581 2020-04-24  2020-04-24 07:1… 2556338 charlesja… Charles … 2020-04-2…\n10 43037631 2020-04-24  2020-04-24 07:1…  403949 jaeckerb   &lt;NA&gt;      2020-04-2…\n# ℹ 19,514 more rows\n# ℹ 31 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nSince year column contains numbers, we can do greater than or less than comparison.\nLet’s get observations between 2018 and 2020, (e.g. 2018 2019 2020).\n\ntemp &lt;- inat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  filter(year &gt;= 2018 & year &lt;= 2020)\n\n\nunique(temp$year)\n\n[1] 2018 2019 2020",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-4",
    "href": "lessons/working-with-data.html#exercise-4",
    "title": "Working with data",
    "section": "Exercise 4",
    "text": "Exercise 4\nGet all of your observations from 2024.\n\nUse mutate() and year() to add year column\nUse filter() to pick observations with your username and year is 2024\nUse select() to pick 4 columns\n\n\n\ninat_data %&gt;%\n   mutate(year = year(observed_on)) %&gt;%\n  filter(user_login == 'natureinla' & year == 2024) %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)\n\n# A tibble: 1 × 4\n  user_login observed_on common_name                scientific_name             \n  &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;                      &lt;chr&gt;                       \n1 natureinla 2024-04-29  San Diego Alligator Lizard Elgaria multicarinata webbii",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#count-the-number-of-rows-with-count",
    "href": "lessons/working-with-data.html#count-the-number-of-rows-with-count",
    "title": "Working with data",
    "section": "Count the number of rows with count()",
    "text": "Count the number of rows with count()\nUse count() from dplyr to count the number of values for one or more columns. We pass in the column names as arguments to count()\n\nget observations per year\nLet’s try counting of all observations by year. Use mutate() to add a year column. Use count() to count the number of observations for each year. By default, count will add a new column caled n.\n\ninat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  count(year)\n\n# A tibble: 9 × 2\n   year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\nWe can specify the name of the count column by passing in name argument to count().\n\ninat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='obs_count')\n\n# A tibble: 9 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016     10392\n2  2017     17495\n3  2018     19164\n4  2019     34057\n5  2020     19524\n6  2021     22549\n7  2022     19597\n8  2023     26602\n9  2024     22258\n\n\n\n\nget top ten most observed species\nLet’s count the number of observations for each species. We will pass in both ‘common_name’ and ‘scientific_name’ to count() because some species don’t have a common_name.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count')\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name                             scientific_name        obs_count\n   &lt;chr&gt;                                   &lt;chr&gt;                      &lt;int&gt;\n 1 Abalone                                 Haliotis                       7\n 2 Abbott's bushmallow                     Malacothamnus abbottii         1\n 3 Abelias                                 Abelia                         1\n 4 Abert's Thread-waisted Wasp             Ammophila aberti               3\n 5 Abyssinian banana                       Ensete ventricosum             1\n 6 Acacia Psyllid                          Acizzia uncatoides             2\n 7 Acacias, Mimosas, mesquites, and allies Mimosoideae                   10\n 8 Acalyptrate Flies                       Acalyptratae                  66\n 9 Acanthus                                Acanthus                      23\n10 Achilid Planthoppers                    Achilidae                      1\n# ℹ 9,855 more rows\n\n\nIt’s often useful to take a look at the results in some order, like the lowest count to highest. We can use the arrange() function from dplyr for that. We pass in the columns we want to order by to arrange(). By default, arrange() will return values from lowest to highest.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count')   %&gt;%\n  arrange(obs_count)\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name                     scientific_name         obs_count\n   &lt;chr&gt;                           &lt;chr&gt;                       &lt;int&gt;\n 1 Abbott's bushmallow             Malacothamnus abbottii          1\n 2 Abelias                         Abelia                          1\n 3 Abyssinian banana               Ensete ventricosum              1\n 4 Achilid Planthoppers            Achilidae                       1\n 5 Acorn Moth                      Blastobasis glandulella         1\n 6 Acotylean Flatworms             Acotylea                        1\n 7 Active Free-living Bristleworms Errantia                        1\n 8 Afghan Tortoise                 Testudo horsfieldii             1\n 9 African Clawed Frog             Xenopus laevis                  1\n10 African Milk Weed               Euphorbia trigona               1\n# ℹ 9,855 more rows\n\n\nIf we want to reverse the order, we can wrap the column names in desc() from dplyr. This will return values from highest to lowest.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count))\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929\n# ℹ 9,855 more rows\n\n\nuse slice() from dplyr to return only certain number of records. slice(start:end) will return rows from the starting number to the ending number.\nLet’s get the top ten species with the most observations.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count))  %&gt;%\n  slice(1:10)\n\ncounts\n\n# A tibble: 10 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-5",
    "href": "lessons/working-with-data.html#exercise-5",
    "title": "Working with data",
    "section": "Exercise 5",
    "text": "Exercise 5\nGet the number of observation you made per year\n\nUse mutate() and year() to add year column\nUse count() to count the number of observations per year\nUse filter() to select observations with your username\n\n\n\ninat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  count(year, name='obs_count')\n\n# A tibble: 8 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016       930\n2  2017      1055\n3  2018       599\n4  2019       350\n5  2020        10\n6  2021         2\n7  2023         9\n8  2024         1",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#save-data",
    "href": "lessons/working-with-data.html#save-data",
    "title": "Working with data",
    "section": "Save data",
    "text": "Save data\nIf you want to save your results, you can save the data frames as CSVs.\nFor instance, a user might only want to analyze their observations that are research grade and unobscured location. Instead of writing that filter command every time, they can save that data.frame to data/cleaned directory, and use that saved data set for all their analysis.\nFirst, assign the data frame to an object.\n\nmy_obs &lt;- my_data &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla' & \n           quality_grade == 'research' & \n           coordinates_obscured == FALSE) \n\nmy_obs\n\n# A tibble: 1,296 × 37\n        id observed_on time_observed_at user_id user_login user_name  created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n 1 2935688 2016-04-14  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 2 2935724 2016-04-14  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 3 2935782 2016-04-14  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 4 2954406 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 5 2954533 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 6 2954609 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 7 2954698 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 8 2954805 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 9 2966003 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n10 2966084 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n# ℹ 1,286 more rows\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nThen use write_csv() from dplyr to create a CSV.\n\nThe first argument is the data frame to save.\nThe second argument is the relative path of where to save the file.\nTo keep our files organized, we are saving CSVs to the results folder.\nYou should give the file a sensible name to help you remember what is in the file. Some people add the date to the file name to keep track of the various versions.\nBy default NA values will be saved as ‘NA’ string. na='' will save NA values as empty strings.\n\n\nwrite_csv(my_obs, 'data/cleaned/my_observations.csv', na='')",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html",
    "href": "lessons/creating-maps.html",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?\n\n\n\n\n\nLearn how to plot iNaturalist observations on a map.\nLearn how to create static maps with ggplot2.\nLearn how to create interactive maps with mapview.",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#questions",
    "href": "lessons/creating-maps.html#questions",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#objectives",
    "href": "lessons/creating-maps.html#objectives",
    "title": "Creating maps",
    "section": "",
    "text": "Learn how to plot iNaturalist observations on a map.\nLearn how to create static maps with ggplot2.\nLearn how to create interactive maps with mapview.",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#mapping-inaturalist-data",
    "href": "lessons/creating-maps.html#mapping-inaturalist-data",
    "title": "Creating maps",
    "section": "Mapping iNaturalist data",
    "text": "Mapping iNaturalist data\niNaturalist data includes latitude and longitude information, which means we can put the observations on a map.\nMain steps:\n\nLoad iNaturalist data\nAdd geometry column to iNaturalist data\nUse filter(), select(), mutate(), and count() to get the rows and columns we want\nCreate map\n\nLoading R packages. We will use ggplot, sf and mapview packages to create maps.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(mapview) # create interactive maps\n\nFirst, we need to read data from the CNC iNaturalist observation file.\n\ninat_data &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\nWe can use names() to see all the column names. “latitude” and “longitude” are the column names we need.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\nst_as_sf() function from sf package will take the longitude and latitude values and add a geometry column that we can use for mapping.\n\nWe pass in longitude and latitude columns as a vector to coords argument. We must wrap longitude and latitude in quotes.\ncrs argument sets the coordinate reference system (CRS). 4326 is the code for the EPSG:4326, a commonly used CRS.\nst_as_sf() removes the longitude and latitude columns and adds a geometry column.\n\n\ninat_map &lt;- inat_data %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nst_crs() from sf returns the CRS for a data frame. Let’s use st_crs() to look at the CRS.\n\nst_crs(inat_map)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nLet’s look at the geometry value for the first observation. inat_map$geometry returns all the values in geometry column as a vector. [1] returns the the geometry value in the first observation.\n\ninat_map$geometry[1]\n\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -117.8219 ymin: 34.05829 xmax: -117.8219 ymax: 34.05829\nGeodetic CRS:  WGS 84\n\n\nPOINT (-117.8219 34.05829)\n\n\nFor this workshop, we won’t go into details about what all this information means. Just be aware that sf package needs certain information to process geospatial data.\nWe use select() to pick which columns we want for the map.\n\n inat_map &lt;- inat_map %&gt;% \n  select(user_login, common_name, scientific_name, observed_on,  url, geometry, quality_grade) \n\nUse dim() to show the number of rows and columns. There are over 191K rows.\n\ndim(inat_map)\n\n[1] 191638      7\n\n\nLet’s get the observations for ‘Quercus agrifolia’ aka Coast Live Oak.\n\ninat_oak_map &lt;- inat_map %&gt;% \n  filter(scientific_name == 'Quercus agrifolia')\n\nUse dim() to get number of observations. There is 711 rows.\n\ndim(inat_oak_map)\n\n[1] 711   7",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#static-map",
    "href": "lessons/creating-maps.html#static-map",
    "title": "Creating maps",
    "section": "static map",
    "text": "static map\nggplot2 is a powerful package that allows you to create complex plots from tabular data (data in a table format with rows and columns). The gg in ggplot2 stands for “grammar of graphics”, and the package uses consistent vocabulary to create plots step by step by adding new layers, which allows for extensive flexibility and customization of plots. ggplot2 is most commonly used for charts, but it can also be used to create static maps.\nLet’s create a map for Coast Live Oak observations.\nCall ggplot() to start a map. Then we use + to add a new layer to the map. We pass the iNaturalist data to geom_sf() using the data argument. geom_sf() uses the information in the geometry column to plot each row.\n\nggplot() +\n  geom_sf(data = inat_oak_map)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#interactive-map",
    "href": "lessons/creating-maps.html#interactive-map",
    "title": "Creating maps",
    "section": "interactive map",
    "text": "interactive map\nWe can use mapview package to create interactive maps where you can zoom in and out.\nLet’s create interactive map for ‘Coast Live Oak’.\n\nmapview(inat_oak_map)\n\n\nYou can zoom in and out. When you click on layer button on the left, you can change basemap and turn on/off layers. When you click on a map marker, all the fields that were passed into select() will be displayed in a popup. Clicking on the layer names in the lower right will zoom the map to show all objects in the layer.",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#using-other-geospatial-files",
    "href": "lessons/creating-maps.html#using-other-geospatial-files",
    "title": "Creating maps",
    "section": "Using other geospatial files",
    "text": "Using other geospatial files\nLet’s add the boundaries for LA County to the map.\nThere are various places where you can download geospatial files for free. We downloaded the LA County boundaries from LA City Geohub. Geohub offers files in various formats including CSV, Shapefile, GeoJSON, and KML. We are using a Shapefile.\nread_sf() function from sf package can read files and databases in various formats. We will use read_sf() to read the LA County boundary file.\n\nla_county_boundary &lt;- read_sf('data/raw/LA_County_Boundary/LA_County_Boundary.shp')\n\nWe can use glimpse() to examine the LA County boundary file.\n\nglimpse(la_county_boundary)\n\nRows: 1\nColumns: 6\n$ OBJECTID   &lt;int&gt; 974\n$ TYPE       &lt;chr&gt; \"land\"\n$ NAME       &lt;chr&gt; \"Los Angeles County\"\n$ ShapeSTAre &lt;dbl&gt; 113863152934\n$ ShapeSTLen &lt;dbl&gt; 2918802\n$ geometry   &lt;MULTIPOLYGON [US_survey_foot]&gt; MULTIPOLYGON (((6430642 138...\n\n\nShapefiles includes a geometry column.\nWhen working with multiple geospatial files, it’s important that all the data uses the same coordinate reference system (CRS). Let’s use st_crs() to check if the CRS for the iNaturalist data and the LA County boundary are the same. == checks if two things are equal.\n\nst_crs(la_county_boundary) == st_crs(inat_oak_map)\n\n[1] FALSE\n\n\nSince the CRS are different, we need to use st_transform() to change the CRS of the LA County boundary. First argument is the data frame. crs is the new CRS value.\n\nla_county_boundary &lt;- st_transform(la_county_boundary,  crs = 4326)\n\nst_crs(la_county_boundary) == st_crs(inat_oak_map)\n\n[1] TRUE\n\n\n\nStatic maps\nLet’s create a static map with LA County and oak observations. Create a new layer for each data set using two geom_sf() and +.\n\nggplot() +\n  geom_sf(data = la_county_boundary)  +\n  geom_sf(data = inat_oak_map) \n\n\n\n\n\n\n\n\nWhen ggplot2 draws the iNaturalist observations, it draws a round circle. When it draws the LA County boundary, it draws a polygon (closed shape with many sides). The data in the geometry column determines how ggplot2 draws things.\n\nla_county_boundary$geometry[1]\n\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.9447 ymin: 32.79959 xmax: -117.6464 ymax: 34.8233\nGeodetic CRS:  WGS 84\n\n\nMULTIPOLYGON (((-118.4262 32.79991, -118.4261 3...\n\n\n\ninat_oak_map$geometry[1]\n\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -118.0178 ymin: 34.21069 xmax: -118.0178 ymax: 34.21069\nGeodetic CRS:  WGS 84\n\n\nPOINT (-118.0178 34.21069)\n\n\nThe Geometry type for the LA County boundary is a MULTIPOLYGON, and for iNaturalist is a POINT.\nFor points, use the color argument to set the color. For polygons, use color to set the border color and fill to set the fill color.\n\nggplot() +\n  geom_sf(data = la_county_boundary, color=\"black\", fill='beige')  +\n  geom_sf(data = inat_oak_map, color='green')  \n\n\n\n\n\n\n\n\nWe can also use alpha() to set the opacity. 0 is transparent, 1 is solid.\n\nggplot() +\n  geom_sf(data = la_county_boundary, color=\"black\", fill=alpha('beige', .5))  +\n  geom_sf(data = inat_oak_map, color=alpha('green', .3))  \n\n\n\n\n\n\n\n\nInstead of using one color for all the observations, we can also set the color to represent values in a particular column using geom_sf(mapping=aes(color=&lt;column_name&gt;)). mapping argument tells ggplot2 how relate data values to elements in the plot. aes() function is short for aesthetic mappings, and it describes how data are mapped to visual properties. We set the color argument to the name of a column.\nLet’s use quality_grade to set the color of the map markers.\n\nggplot() +\n  geom_sf(data = la_county_boundary, color=\"black\", fill='beige')  +\n  geom_sf(data = inat_oak_map, mapping=aes(color=quality_grade))  \n\n\n\n\n\n\n\n\nggplot2 will assign a different color to each value, and add a legend.\nWe can set the map title and legend title using labs(title='', subtitle='', color=''). We can add theme_void() to get rid of the grey background and axis labels.\n\nggplot() +\n  geom_sf(data = la_county_boundary, color=\"black\", fill='beige')  +\n  geom_sf(data = inat_oak_map, mapping=aes(color=quality_grade)) +\n  labs(title = 'CNC observations for Live Coast Oaks in LA County',\n       subtitle='2016-2024',\n       color='Quality Grade') +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\nInteractive maps\nLet’s create an interactive map with LA County and oak observations. Create a new layer for each dataset using +.\n\nmapview(la_county_boundary) +\n  mapview(inat_oak_map) \n\n\nmapview will add a legend for each layer. We can hide the legend with legend=FALSE.\n\nmapview(la_county_boundary, legend=FALSE) +\n  mapview(inat_oak_map, legend=FALSE) \n\n\nUse color to set the border color, and col.regions to set the color of the fill.\n\nmapview(la_county_boundary, legend=FALSE,\n        color='black', col.regions='beige') +\n  mapview(inat_oak_map, legend=FALSE,\n          color='black', col.regions='green') \n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, mapview will draw purple layers and use CartoDB Positron basemap.\nIf we use custom colors, mapview will pick a basemap based on the custom colors. If we want mapview to always use CartoDB Positron basemap, we need to turn off color shuffle.\nmapviewOptions(basemaps.color.shuffle = FALSE)\n\n\nWe can also set the color of the observation to represent values in a particular column using zcol=&lt;column_name&gt;.\nLet’s use quality_grade to set the color of the map markers.\n\nmapview(la_county_boundary, legend=FALSE,\n        color='black', col.regions='beige') +\n  mapview(inat_oak_map, zcol='quality_grade')\n\n\nWe can set the legend title using layer.name. mapview does not have the ability to add a title.\n\nmapview(la_county_boundary, legend=FALSE,\n        color='black', col.regions='beige') +\n  mapview(inat_oak_map, zcol='quality_grade',\n          layer.name='Quality Grade')",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-1",
    "href": "lessons/creating-maps.html#exercise-1",
    "title": "Creating maps",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a map for one species. Include the boundaries for LA County.\n\nuse filter() to select observations for one species\ncreate either a static or interactive map.\n\n\n\ninat_finch &lt;- inat_map %&gt;% \n  filter(common_name == 'House Finch')\n\nmapview(la_county_boundary) + \n  mapview(inat_finch)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#map-observations-for-a-specific-area",
    "href": "lessons/creating-maps.html#map-observations-for-a-specific-area",
    "title": "Creating maps",
    "section": "Map observations for a specific area",
    "text": "Map observations for a specific area\nLet’s look for all iNaturalist observations made in Exposition Park.\nSometimes we won’t be able to find a pre-existing file that has boundaries for an area that we want to analyze. In these cases, we need to create our own boundaries. I used this Draw map boundaries webpage to draw and download the boundaries of Exposition Park. The file is in GeoJSON format.\nLet’s use read_sf() to read a geojson file.\n\nexpo_park_boundary &lt;- read_sf('data/raw/boundaries_expo_park_area.geojson')  \n\nWe can use glimpse() to examine the file.\n\nglimpse(expo_park_boundary)\n\nRows: 1\nColumns: 3\n$ id       &lt;chr&gt; \"f08494fe-c69f-418b-ae94-ca7e34727134\"\n$ mode     &lt;chr&gt; \"polygon\"\n$ geometry &lt;POLYGON [°]&gt; POLYGON ((-118.2915 34.0180...\n\n\nThe GeoJSON file has a geometry column.\nLet’s use st_crs() to check if the CRS for the iNaturalist data and Expo Park are the same.\n\nst_crs(expo_park_boundary) == st_crs(inat_map)\n\n[1] TRUE\n\n\nLet’s create static and interactive maps of Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park_boundary) \n\n\n\n\n\n\n\n\n\nmapview(expo_park_boundary) \n\n\nThe following code will get the observations that are inside Exposition Park. We will save the observations to inat_expo.\n\ninat_expo &lt;- inat_map[lengths(st_intersects(inat_map, expo_park_boundary)) &gt; 0, ]\n\ninat_expo\n\nSimple feature collection with 2964 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -118.2911 ymin: 34.01173 xmax: -118.2829 ymax: 34.01805\nGeodetic CRS:  WGS 84\n# A tibble: 2,964 × 7\n   user_login  common_name                     scientific_name observed_on url  \n   &lt;chr&gt;       &lt;chr&gt;                           &lt;chr&gt;           &lt;date&gt;      &lt;chr&gt;\n 1 smartrf     Bot Flies, Blow Flies, and All… Oestroidea      2016-04-14  http…\n 2 smartrf     Common Pill Woodlouse           Armadillidium … 2016-04-15  http…\n 3 smartrf     House Finch                     Haemorhous mex… 2016-04-15  http…\n 4 smartrf     Lesser Goldfinch                Spinus psaltria 2016-04-15  http…\n 5 smartrf     Large-tailed Aphideater         Eupeodes voluc… 2016-04-15  http…\n 6 smartrf     Western Honey Bee               Apis mellifera  2016-04-15  http…\n 7 smartrf     Threeband Slugs                 Ambigolimax     2016-04-15  http…\n 8 smartrf     Asian Lady Beetle               Harmonia axyri… 2016-04-15  http…\n 9 smartrf     Mourning Dove                   Zenaida macrou… 2016-04-15  http…\n10 steviekgold Armyworm Moth                   Mythimna unipu… 2016-04-15  http…\n# ℹ 2,954 more rows\n# ℹ 2 more variables: geometry &lt;POINT [°]&gt;, quality_grade &lt;chr&gt;\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor those who want to understand that chunk of code, here’s a explanation.\nst_intersects() from sf tells us the number of items in one spatial object touch, cross, or is within items in a second spatial object.\nThe following code returns the number of items in each row in inat_map that is within expo_park_boundary. Since each row only contains one location, we will either get 1 or empty.\n\nst_intersects(inat_map, expo_park_boundary)\n\nSparse geometry binary predicate list of length 191638, where the\npredicate was `intersects'\nfirst 10 elements:\n 1: (empty)\n 2: 1\n 3: (empty)\n 4: (empty)\n 5: (empty)\n 6: (empty)\n 7: (empty)\n 8: (empty)\n 9: (empty)\n 10: (empty)\n\n\nWe use lengths(st_intersects(inat_map, expo_park_boundary)) &gt; 0 to create a vector that has TRUE or FALSE. A vector with TRUE/FALSE is called logical vector. If a row for inat_map has 1 item inside expo_park_boundary, return TRUE. Otherwise return FALSE.\n\n# we are limited the output to the first 50 rows for this explation\n(lengths(st_intersects(inat_map, expo_park_boundary)) &gt; 0)[1:50]\n\n [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE\n\n\nWe can use a logical vectors to filter rows in data frame by using dataframe[logical_vector, ]. If the logical vector is true, return the row. Otherwise ignore the row.\nThis code selects all rows in inat_map where there is one or more items in the row that are inside expo_park_boundary\n\ninat_expo_2 &lt;- inat_map[lengths(st_intersects(inat_map, expo_park_boundary)) &gt; 0, ]\n\n\n\nUse dim() to get row and column count. 191K observations in LA county, 2964 observation in Expo Park.\n\ndim(inat_map)\n\n[1] 191638      7\n\ndim(inat_expo)\n\n[1] 2964    7\n\n\nLet’s create map of all observations in Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park_boundary)  +\n  geom_sf(data = inat_expo) \n\n\n\n\n\n\n\n\n\nmapview(expo_park_boundary) +\n  mapview(inat_expo)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-2",
    "href": "lessons/creating-maps.html#exercise-2",
    "title": "Creating maps",
    "section": "Exercise 2",
    "text": "Exercise 2\nCreate a map for all CNC observations that are inside of a specific area\n\nUsed Draw map boundaries to draw and download an area that you are interested in.\nSave the file to the data/raw directory.\nuse read_sf to read your boundary data.\nuse inat_map[lengths(st_intersects(inat_map, your_boundary)) &gt; 0, ] to get observations inside a boundary\n\n\n\nusc_boundary &lt;- read_sf('data/raw/boundaries_usc.geojson')  %&gt;% \n  st_transform(4326)\n\ninat_usc &lt;- inat_map[st_intersects(inat_map, usc_boundary) %&gt;% lengths &gt; 0, ]\n\nmapview(usc_boundary) + \n  mapview(inat_usc)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exporting-maps",
    "href": "lessons/creating-maps.html#exporting-maps",
    "title": "Creating maps",
    "section": "Exporting maps",
    "text": "Exporting maps\nWe can export the maps created with ggplot and mapview as image files.\n\nstatic maps\nAssign the map created by ggplot to an object. Then run ggsave() to save our map. The first argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\n# create map\nmy_map &lt;- ggplot() +\n  geom_sf(data = expo_park_boundary)  +\n  geom_sf(data = inat_expo) \n\n# save map\nggsave(filename = 'results/expo_park_observations.jpg', plot = my_map,  height = 6, width = 8)\n\n\n\ninteractive map\nAssign the map created by mapview to an object. Then run mapshot() to save our map. The first argument is map you want to to save. The second argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, or png.\n\n# create map\nmy_map_2 &lt;- mapview(expo_park_boundary) + \n  mapview(inat_expo)\n\n# save map\nmapshot(my_map_2, file = 'results/expo_park_observations_2.jpg')",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html",
    "href": "lessons/intro-science-coding.html",
    "title": "Science and Coding concepts",
    "section": "",
    "text": "More content needed…\n\n\n\nWikipedia description of taxonomy\n\nIn biology, taxonomy (from Ancient Greek τάξις (taxis) ‘arrangement’ and -νομία (-nomia) ‘method’) is the scientific study of naming, defining (circumscribing) and classifying groups of biological organisms based on shared characteristics. Organisms are grouped into taxa (singular: taxon) and these groups are given a taxonomic rank; groups of a given rank can be aggregated to form a more inclusive group of higher rank, thus creating a taxonomic hierarchy. The principal ranks in modern use are domain, kingdom, phylum (division is sometimes used in botany in place of phylum), class, order, family, genus, and species.\n\nThe current system of taxonomy uses Latin names for the scientific name. Each scientific name can have multiple common names in multiple languages.\nHere’s iNaturalist taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.\nRank: Latin scientific name (English common name)\n\nKingdom: Animalia (Animals)\nPhylum: Chordata (Chordates)\nClass: Reptilia (Reptiles)\nOrder: Squamata (Snakes and Lizards)\nFamily: Phrynosomatidae (Phrynosomatid Lizards)\nGenus: Sceloporus (Spiny Lizards)\nSpecies: Sceloporus occidentalis (Western Fence Lizard)\n\nIn theory, every iNaturalist observation represents a species. In practice, an iNaturalist observation will be assigned to a particular taxa name and taxon rank based on the quality of the recorded data, the expertise of the observer, the suggestion algorithms of iNaturalist, and the expertise of people who help identify observations.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#biology-concepts",
    "href": "lessons/intro-science-coding.html#biology-concepts",
    "title": "Science and Coding concepts",
    "section": "",
    "text": "More content needed…\n\n\n\nWikipedia description of taxonomy\n\nIn biology, taxonomy (from Ancient Greek τάξις (taxis) ‘arrangement’ and -νομία (-nomia) ‘method’) is the scientific study of naming, defining (circumscribing) and classifying groups of biological organisms based on shared characteristics. Organisms are grouped into taxa (singular: taxon) and these groups are given a taxonomic rank; groups of a given rank can be aggregated to form a more inclusive group of higher rank, thus creating a taxonomic hierarchy. The principal ranks in modern use are domain, kingdom, phylum (division is sometimes used in botany in place of phylum), class, order, family, genus, and species.\n\nThe current system of taxonomy uses Latin names for the scientific name. Each scientific name can have multiple common names in multiple languages.\nHere’s iNaturalist taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.\nRank: Latin scientific name (English common name)\n\nKingdom: Animalia (Animals)\nPhylum: Chordata (Chordates)\nClass: Reptilia (Reptiles)\nOrder: Squamata (Snakes and Lizards)\nFamily: Phrynosomatidae (Phrynosomatid Lizards)\nGenus: Sceloporus (Spiny Lizards)\nSpecies: Sceloporus occidentalis (Western Fence Lizard)\n\nIn theory, every iNaturalist observation represents a species. In practice, an iNaturalist observation will be assigned to a particular taxa name and taxon rank based on the quality of the recorded data, the expertise of the observer, the suggestion algorithms of iNaturalist, and the expertise of people who help identify observations.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#coding-concepts",
    "href": "lessons/intro-science-coding.html#coding-concepts",
    "title": "Science and Coding concepts",
    "section": "Coding Concepts",
    "text": "Coding Concepts\nThe basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions. We write these instructions in the form of code, which is a common language that is understood by the computer and humans (after some practice). We call these instructions commands, and we tell the computer to follow the instructions by running (also called executing) the commands.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#geospatial-concepts",
    "href": "lessons/intro-science-coding.html#geospatial-concepts",
    "title": "Science and Coding concepts",
    "section": "Geospatial concepts",
    "text": "Geospatial concepts\nGeospatial data is data that has a particular location. There are different software tools that can be used to display and analyze geospatial data.\n\nCoordinate Reference Systems\nEarth is a 3D sphere. Maps are 2D representation of a 3D sphere. Map projections are ways to flatten a spherical Earth to a flat surface.\nIn order for software to correctly display and manipulate geospatial data, the data must include coordinate reference system (CRS) information. The CRS tells the mapping software which map projection to use and where the data is located.\n\n\n\nSource: opennews.org, from: https://media.opennews.org/cache/06/37/0637aa2541b31f526ad44f7cb2db7b6c.jpg\n\n\nThe above image shows maps of the United States in different projections. The differences in shape are a direct result of the calculations used to flatten the data onto a 2-dimensional map.\nData from the same location but saved in different projections will not line up in any geospatial software. Thus, it’s important when working with multiple geospatial data sets to use the same coordinate reference system for data processing and analysis.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html",
    "href": "lessons/editing-geo-files.html",
    "title": "Editing geospatial files",
    "section": "",
    "text": "Sometimes we find a geospatial file that has more than we need. For instance, I downloaded a file that has all the state parks in California, but I only want the state parks in LA County. In this section we’ll cover how to extract data from existing files.\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(mapview)\nlibrary(tigris)\nlibrary(stringr)",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-selected-california-counties",
    "href": "lessons/editing-geo-files.html#find-selected-california-counties",
    "title": "Editing geospatial files",
    "section": "Find selected California counties",
    "text": "Find selected California counties\nCalifornia state has a file that lists all the counties in California. https://gis.data.ca.gov/datasets/California::california-county-boundaries-and-identifiers/explore\nLet’s get the boundaries for Los Angeles County.\nRead the file with all the counties in California.\n\nca_counties &lt;- read_sf('data/raw/California_County_Boundaries_and_Identifiers_Blue_Version_view_2716745428963682036/California_County_Boundaries_and_Identifiers.shp')\n\n\nglimpse(ca_counties)\n\nRows: 73\nColumns: 13\n$ COUNTY     &lt;chr&gt; \"Alameda County\", \"Alpine County\", \"Amador County\", \"Butte …\n$ COPRI      &lt;chr&gt; \"01000\", \"02000\", \"03000\", \"04000\", \"05000\", \"06000\", \"0700…\n$ PLACE_NAME &lt;chr&gt; \"Alameda County\", \"Alpine County\", \"Amador County\", \"Butte …\n$ GEOID      &lt;chr&gt; \"06001\", \"06003\", \"06005\", \"06007\", \"06009\", \"06011\", \"0601…\n$ PLACE_TYPE &lt;chr&gt; \"County\", \"County\", \"County\", \"County\", \"County\", \"County\",…\n$ GNIS_ID    &lt;dbl&gt; 1675839, 1675840, 1675841, 1675842, 1675885, 1675902, 16759…\n$ LEGAL_PLAC &lt;chr&gt; \"Alameda County\", \"Alpine County\", \"Amador County\", \"Butte …\n$ PLACE_ABBR &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ CNTY_ABBR  &lt;chr&gt; \"ALA\", \"ALP\", \"AMA\", \"BUT\", \"CAL\", \"COL\", \"CCA\", \"DNE\", \"ED…\n$ AREA_SqMi  &lt;dbl&gt; 820.7918, 741.0404, 606.0190, 1677.8158, 1035.7786, 1156.65…\n$ COASTAL    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ GlobalID   &lt;chr&gt; \"1ef554be-bce2-4a37-b205-c10f99330cb3\", \"8f6df77e-8ec0-4cda…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((-136862.7 -..., MULTIPOLYGON (…\n\n\nWe see the name of the county is in COUNTY column. Use filter() to select the rows for ‘Los Angeles County’.\n\nLA &lt;- ca_counties %&gt;%\n  filter(COUNTY == 'Los Angeles County')\n\nLA\n\nSimple feature collection with 2 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96851.82 ymin: -583500.2 xmax: 216620.6 ymax: -352271.1\nProjected CRS: NAD83 / California Albers\n# A tibble: 2 × 13\n  COUNTY         COPRI PLACE_NAME GEOID PLACE_TYPE GNIS_ID LEGAL_PLAC PLACE_ABBR\n* &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     \n1 Los Angeles C… 19000 Los Angel… 06037 County      277283 Los Angel… &lt;NA&gt;      \n2 Los Angeles C… 19000 Los Angel… 06037 County      277283 Los Angel… &lt;NA&gt;      \n# ℹ 5 more variables: CNTY_ABBR &lt;chr&gt;, AREA_SqMi &lt;dbl&gt;, COASTAL &lt;chr&gt;,\n#   GlobalID &lt;chr&gt;, geometry &lt;MULTIPOLYGON [m]&gt;\n\n\n\nggplot() +\n  geom_sf(data=LA) \n\n\n\n\n\n\n\n\nUse st_write() to save the state parks within LA County as a Shape file. The first argument is the map data we want to save, and the second argument is the file path.\n\nst_write(LA, 'data/cleaned/los_angeles_county/los_angeles_county.shp')",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-waterways-in-los-angeles-county",
    "href": "lessons/editing-geo-files.html#find-waterways-in-los-angeles-county",
    "title": "Editing geospatial files",
    "section": "Find waterways in Los Angeles County",
    "text": "Find waterways in Los Angeles County\nThe US Census produces geospatial data that are linked to the Census data. This data is called Topologically Integrated Geographic Encoding and Referencing (TIGER). We can use the tigris package to download TIGER/Line shapefiles.\narea_water() from tigris returns: The area hydrography shapefile contains the geometry and attributes of both perennial and intermittent area hydrography features, including ponds, lakes, oceans, swamps, glaciers, and the area covered by large streams represented as double-line drainage.\nWe can find waterways in LA County by passing the state and county to area_water().\n\narea_water &lt;- area_water(state = \"CA\", county=\"Los Angeles\") \n\n\nggplot() +\n  geom_sf(data = area_water)\n\n\n\n\n\n\n\n\nLet’s find the LA River\nUse names() to get the column names.\n\nnames(area_water)\n\n[1] \"ANSICODE\" \"HYDROID\"  \"FULLNAME\" \"MTFCC\"    \"ALAND\"    \"AWATER\"   \"INTPTLAT\"\n[8] \"INTPTLON\" \"geometry\"\n\n\nLet’s look for FULLNAME equals ‘Los Angeles River’\n\nla_river &lt;- area_water %&gt;% \n  filter(FULLNAME == 'Los Angeles River')\n\nla_river\n\nSimple feature collection with 0 features and 8 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  NAD83\n[1] ANSICODE HYDROID  FULLNAME MTFCC    ALAND    AWATER   INTPTLAT INTPTLON\n[9] geometry\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nNo records found.\nLet’s use str_starts() from stringr package to look for items that start with ‘Los Angeles’\n\nla_river &lt;- area_water %&gt;% \n  filter(str_starts(FULLNAME, 'Los Angeles'))\n\nla_river\n\nSimple feature collection with 3 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -118.6292 ymin: 33.7672 xmax: -118.1685 ymax: 34.26373\nGeodetic CRS:  NAD83\n  ANSICODE       HYDROID        FULLNAME MTFCC  ALAND  AWATER    INTPTLAT\n1     &lt;NA&gt; 1104493447410 Los Angeles Riv H3010      0  420146 +34.1822808\n2     &lt;NA&gt; 1104493447488 Los Angeles Riv H3010 280531 4988447 +34.1531554\n3     &lt;NA&gt; 1102527993275 Los Angeles Riv H2030      0      58 +33.8743457\n      INTPTLON                       geometry\n1 -118.5074316 POLYGON ((-118.6291 34.1721...\n2 -118.2783531 POLYGON ((-118.4705 34.1634...\n3 -118.1906547 POLYGON ((-118.1907 33.8743...\n\n\nWe get three records. The river is called ‘Los Angeles Riv’\n\nggplot(data = la_river) +\n   geom_sf()\n\n\n\n\n\n\n\n\nSave the files\n\nst_write(la_river, 'data/cleaned/los_angeles_river.geojson')\n\nst_write(la_river, 'data/cleaned/la_county_waterareas.geojson')",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-state-parks-in-la-county",
    "href": "lessons/editing-geo-files.html#find-state-parks-in-la-county",
    "title": "Editing geospatial files",
    "section": "Find state parks in LA County",
    "text": "Find state parks in LA County\nLet’s get the all the California state parks within Los Angeles county.\nCalifornia State Parks has file that lists all the state parks in California. https://www.parks.ca.gov/?page_id=29682\nCalifornia state has a file that lists all the counties in California. https://gis.data.ca.gov/datasets/California::california-county-boundaries-and-identifiers/explore\nFirst we read the file with all state parks in California.\n\nstate_parks &lt;- read_sf('data/raw/Park_Boundaries/ParkBoundaries.shp')\n\nThe we read the file with LA County\n\nLA_county &lt;- read_sf('data/cleaned/los_angeles_county/los_angeles_county.shp')\n\nCompare CRS for the state parks map and the county map.\n\nst_crs(state_parks) == st_crs(LA_county)\n\n[1] FALSE\n\n\nUse st_transform() to change the CRS of counties map to match the parks map.\n\nLA_county &lt;- st_transform(LA_county, crs = st_crs(state_parks))\n\nst_crs(state_parks) == st_crs(LA_county)\n\n[1] TRUE\n\n\nUse st_intersects() to find the state parks within LA county. This is similar to how we got all the observations in Expo park in an earlier lesson.\n\nLA_parks &lt;- state_parks[st_intersects(state_parks, LA_county ) %&gt;% lengths &gt; 0,]\n\nCreate a map showing LA County and state parks within LA County.\n\nggplot() +\n  geom_sf(data=LA_county) + \n  geom_sf(data=LA_parks, fill='yellow') \n\n\n\n\n\n\n\n\nSave the file.\n\nst_write(LA_parks, 'data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp')",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-national-parks-in-la-county",
    "href": "lessons/editing-geo-files.html#find-national-parks-in-la-county",
    "title": "Editing geospatial files",
    "section": "Find national parks in LA County",
    "text": "Find national parks in LA County\nLet’s get the National Parks within Los Angeles county.\nNational Park Boundaries https://catalog.data.gov/dataset/national-park-boundaries\n\nparks_nps &lt;- read_sf('data/raw/nps_boundary/nps_boundary.shp')\n\nla_county &lt;- read_sf('data/cleaned/los_angeles_county/los_angeles_county.shp')\n\ncheck if CRS are the same\n\nst_crs(parks_nps) == st_crs(la_county)\n\n[1] FALSE\n\n\nSet CRS of the parks to match LA County.\n\nparks_nps &lt;- st_transform(parks_nps, crs = st_crs(la_county) )\nst_crs(parks_nps) == st_crs(la_county)\n\n[1] TRUE\n\n\nget national parks within LA county\n\nca_nps_parks &lt;- parks_nps[st_intersects(parks_nps, la_county ) %&gt;% lengths &gt; 0,]\n\nggplot() +\n  geom_sf(data=la_county) + \n  geom_sf(data=ca_nps_parks, fill='yellow') \n\n\n\n\n\n\n\n\nSave the file.\n\nst_write(ca_nps_parks, 'data/cleaned/nps_la_county.geojson')",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/cleaning-data.html",
    "href": "lessons/cleaning-data.html",
    "title": "Cleaning data",
    "section": "",
    "text": "A common step during data analysis is to clean up the raw data. We fix any obvious errors, edit column names, exclude rows we do not want, and save the cleaned up data set. We do the analysis on the cleaned data set.",
    "crumbs": [
      "Extra",
      "Cleaning data"
    ]
  },
  {
    "objectID": "lessons/cleaning-data.html#cleaning-up-inaturalist-file",
    "href": "lessons/cleaning-data.html#cleaning-up-inaturalist-file",
    "title": "Cleaning data",
    "section": "Cleaning up iNaturalist file",
    "text": "Cleaning up iNaturalist file\nLoad libraries\n\nlibrary(readr)\nlibrary(dplyr)\n\nSave the file paths as objects.\n\nobservations_raw_path &lt;- 'data/raw/observations-513664.csv'\nobservations_cleaned_path &lt;- 'data/cleaned/cnc-los-angeles-observations.csv'\nthreatened_raw_path &lt;- 'data/raw/observations-514065_threatened.csv'\nintroduced_raw_path &lt;- 'data/raw/observations-514069_introduced.csv'\nnative_raw_path &lt;- 'data/raw/observations-514076_native.csv'\n\nThe CSV we downloaded from iNaturalist had several problems.\n\nsome observation did not have a species\nsome observations did not have location information\nsome observations were not in Los Angeles\nthere were some fields that we did not need\ninformation about observations with threatened, native, and introduced species had to be downloaded separately\n\nIn order to simplify things for the workshop attendees, we fixed the various issues and created a cleaned up CSV.\nThese are the steps we took to produced the cleaned up file. The raw file is at ‘data/raw/observations-513664.csv’, the cleaned file is at ‘data/cleaned/cnc-los-angeles-observations.csv’\n\ninat_raw &lt;- read_csv(observations_raw_path)\n\nUse colSums(is.na()) to count the number of rows that have NA values for each column.\n\ncolSums(is.na(inat_raw))\n\n                              id                             uuid \n                               0                                0 \n              observed_on_string                      observed_on \n                               0                                0 \n                time_observed_at                        time_zone \n                            5862                                0 \n                         user_id                       user_login \n                               0                                0 \n                       user_name                       created_at \n                           72542                                0 \n                      updated_at                    quality_grade \n                               0                                0 \n                         license                              url \n                           48002                                0 \n                       image_url                        sound_url \n                            2530                           192990 \n                        tag_list                      description \n                          186884                           169938 \n   num_identification_agreements num_identification_disagreements \n                               0                                0 \n              captive_cultivated             oauth_application_id \n                               0                            71706 \n                     place_guess                         latitude \n                             440                              438 \n                       longitude              positional_accuracy \n                             438                            40407 \n             private_place_guess                 private_latitude \n                          193738                           193738 \n               private_longitude       public_positional_accuracy \n                          193738                            36853 \n                      geoprivacy                 taxon_geoprivacy \n                          180034                           144575 \n            coordinates_obscured               positioning_method \n                               0                           176278 \n              positioning_device                    species_guess \n                          174658                            29909 \n                 scientific_name                      common_name \n                            1671                            12223 \n               iconic_taxon_name                         taxon_id \n                            1862                             1670 \n              taxon_kingdom_name                taxon_phylum_name \n                            1846                             3906 \n            taxon_subphylum_name            taxon_superclass_name \n                           15073                           191497 \n                taxon_class_name              taxon_subclass_name \n                            6165                           142186 \n           taxon_superorder_name                 taxon_order_name \n                          183410                            10661 \n             taxon_suborder_name           taxon_superfamily_name \n                          148094                           153153 \n               taxon_family_name             taxon_subfamily_name \n                           16037                            79392 \n           taxon_supertribe_name                 taxon_tribe_name \n                          190875                           105525 \n             taxon_subtribe_name                 taxon_genus_name \n                          168941                            28054 \n          taxon_genushybrid_name               taxon_species_name \n                          193738                            55501 \n               taxon_hybrid_name            taxon_subspecies_name \n                          193139                           190760 \n              taxon_variety_name                  taxon_form_name \n                          192195                           193738 \n\n\nAll rows have id, observed_on, and user_id.\nsome rows don’t have scientific_name, latitude or longitude.\nUse filter to select the observations we want.\n!is.na will select rows that have are not NA, meaning rows that have a value. We select observations that have latitude, langitude, and scientific_name. We also ignored observations outside of LA\nWe save the cleaned up data in a new object inat.\n\ninat &lt;- inat_raw %&gt;% \n  filter(!is.na(latitude) &\n           !is.na(longitude) &\n           !is.na(scientific_name)) %&gt;%\n    filter(latitude &lt; 40)  \n\nThe original data frame ‘inat_raw’ had 193K rows, the cleaned dataframe ‘inat’ has 191K rows.\nWe can double check our work.\nlatitude, longitude, scientific_name have zero NA.\n\ncolSums(is.na(inat))\n\n                              id                             uuid \n                               0                                0 \n              observed_on_string                      observed_on \n                               0                                0 \n                time_observed_at                        time_zone \n                            5819                                0 \n                         user_id                       user_login \n                               0                                0 \n                       user_name                       created_at \n                           71186                                0 \n                      updated_at                    quality_grade \n                               0                                0 \n                         license                              url \n                           47396                                0 \n                       image_url                        sound_url \n                            2243                           190893 \n                        tag_list                      description \n                          184803                           168134 \n   num_identification_agreements num_identification_disagreements \n                               0                                0 \n              captive_cultivated             oauth_application_id \n                               0                            71018 \n                     place_guess                         latitude \n                               1                                0 \n                       longitude              positional_accuracy \n                               0                            40057 \n             private_place_guess                 private_latitude \n                          191638                           191638 \n               private_longitude       public_positional_accuracy \n                          191638                            36540 \n                      geoprivacy                 taxon_geoprivacy \n                          178390                           142538 \n            coordinates_obscured               positioning_method \n                               0                           174275 \n              positioning_device                    species_guess \n                          172680                            28434 \n                 scientific_name                      common_name \n                               0                            10525 \n               iconic_taxon_name                         taxon_id \n                             190                                0 \n              taxon_kingdom_name                taxon_phylum_name \n                             174                             2221 \n            taxon_subphylum_name            taxon_superclass_name \n                           13372                           189405 \n                taxon_class_name              taxon_subclass_name \n                            4465                           140237 \n           taxon_superorder_name                 taxon_order_name \n                          181350                             8944 \n             taxon_suborder_name           taxon_superfamily_name \n                          146151                           151144 \n               taxon_family_name             taxon_subfamily_name \n                           14269                            77518 \n           taxon_supertribe_name                 taxon_tribe_name \n                          188777                           103590 \n             taxon_subtribe_name                 taxon_genus_name \n                          166888                            26258 \n          taxon_genushybrid_name               taxon_species_name \n                          191638                            53654 \n               taxon_hybrid_name            taxon_subspecies_name \n                          191043                           188661 \n              taxon_variety_name                  taxon_form_name \n                          190096                           191638 \n\n\nWe want to delete unneeded columns to keep the CSV under 100 MB for Github\n\nnames(inat)\n\n [1] \"id\"                               \"uuid\"                            \n [3] \"observed_on_string\"               \"observed_on\"                     \n [5] \"time_observed_at\"                 \"time_zone\"                       \n [7] \"user_id\"                          \"user_login\"                      \n [9] \"user_name\"                        \"created_at\"                      \n[11] \"updated_at\"                       \"quality_grade\"                   \n[13] \"license\"                          \"url\"                             \n[15] \"image_url\"                        \"sound_url\"                       \n[17] \"tag_list\"                         \"description\"                     \n[19] \"num_identification_agreements\"    \"num_identification_disagreements\"\n[21] \"captive_cultivated\"               \"oauth_application_id\"            \n[23] \"place_guess\"                      \"latitude\"                        \n[25] \"longitude\"                        \"positional_accuracy\"             \n[27] \"private_place_guess\"              \"private_latitude\"                \n[29] \"private_longitude\"                \"public_positional_accuracy\"      \n[31] \"geoprivacy\"                       \"taxon_geoprivacy\"                \n[33] \"coordinates_obscured\"             \"positioning_method\"              \n[35] \"positioning_device\"               \"species_guess\"                   \n[37] \"scientific_name\"                  \"common_name\"                     \n[39] \"iconic_taxon_name\"                \"taxon_id\"                        \n[41] \"taxon_kingdom_name\"               \"taxon_phylum_name\"               \n[43] \"taxon_subphylum_name\"             \"taxon_superclass_name\"           \n[45] \"taxon_class_name\"                 \"taxon_subclass_name\"             \n[47] \"taxon_superorder_name\"            \"taxon_order_name\"                \n[49] \"taxon_suborder_name\"              \"taxon_superfamily_name\"          \n[51] \"taxon_family_name\"                \"taxon_subfamily_name\"            \n[53] \"taxon_supertribe_name\"            \"taxon_tribe_name\"                \n[55] \"taxon_subtribe_name\"              \"taxon_genus_name\"                \n[57] \"taxon_genushybrid_name\"           \"taxon_species_name\"              \n[59] \"taxon_hybrid_name\"                \"taxon_subspecies_name\"           \n[61] \"taxon_variety_name\"               \"taxon_form_name\"                 \n\n\nSetting a column to NULL will remove the column.\n\ninat$uuid &lt;- NULL\ninat$observed_on_string &lt;- NULL\ninat$time_zone &lt;- NULL\ninat$num_identification_agreements &lt;- NULL\ninat$num_identification_disagreements &lt;- NULL\ninat$oauth_application_id &lt;- NULL\ninat$place_guess &lt;- NULL\ninat$private_place_guess &lt;- NULL\ninat$private_longitude &lt;- NULL\ninat$private_latitude &lt;- NULL\ninat$positioning_method &lt;- NULL\ninat$positioning_device &lt;- NULL\n\nuse filter and dim to see how often the taxon names were used.\n\ninat %&gt;% filter(!is.na(taxon_subphylum_name)) %&gt;% dim\n\n[1] 178266     50\n\n\n\ninat %&gt;% filter(!is.na(taxon_superclass_name)) %&gt;% dim\n\n[1] 2233   50\n\ninat %&gt;% filter(!is.na(taxon_subclass_name)) %&gt;% dim\n\n[1] 51401    50\n\n\n\ninat %&gt;% filter(!is.na(taxon_superorder_name)) %&gt;% dim\n\n[1] 10288    50\n\ninat %&gt;% filter(!is.na(taxon_suborder_name)) %&gt;% dim\n\n[1] 45487    50\n\n\n\ninat %&gt;% filter(!is.na(taxon_superfamily_name)) %&gt;% dim\n\n[1] 40494    50\n\ninat %&gt;% filter(!is.na(taxon_subfamily_name)) %&gt;% dim\n\n[1] 114120     50\n\n\n\ninat %&gt;% filter(!is.na(taxon_supertribe_name)) %&gt;% dim\n\n[1] 2861   50\n\ninat %&gt;% filter(!is.na(taxon_tribe_name)) %&gt;% dim\n\n[1] 88048    50\n\ninat %&gt;% filter(!is.na(taxon_subtribe_name)) %&gt;% dim\n\n[1] 24750    50\n\n\n\ninat %&gt;% filter(!is.na(taxon_genushybrid_name)) %&gt;% dim\n\n[1]  0 50\n\ninat %&gt;% filter(!is.na(taxon_hybrid_name)) %&gt;% dim\n\n[1] 595  50\n\n\n\ninat %&gt;% filter(!is.na(taxon_subspecies_name)) %&gt;% dim\n\n[1] 2977   50\n\ninat %&gt;% filter(!is.na(taxon_variety_name)) %&gt;% dim\n\n[1] 1542   50\n\ninat %&gt;% filter(!is.na(taxon_form_name)) %&gt;% dim\n\n[1]  0 50\n\n\n\ninat$species_guess &lt;- NULL\n\ninat$taxon_subphylum_name &lt;- NULL\n\ninat$taxon_superclass_name &lt;- NULL\ninat$taxon_subclass_name &lt;- NULL\n\ninat$taxon_superorder_name &lt;- NULL\ninat$taxon_suborder_name &lt;- NULL\n\ninat$taxon_superfamily_name &lt;- NULL\ninat$taxon_subfamily_name &lt;- NULL\n\ninat$taxon_supertribe_name &lt;- NULL\ninat$taxon_tribe_name &lt;- NULL\ninat$taxon_subtribe_name &lt;- NULL\n\ninat$taxon_genushybrid_name &lt;- NULL\ninat$taxon_hybrid_name &lt;- NULL\n\ninat$taxon_variety_name &lt;- NULL\ninat$taxon_form_name &lt;- NULL\n\n\nnames(inat)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"     \n\n\nWe want to save the cleaned up data set so we can use it later. We can save data.frame to a CSV using the write_csv() function from the readr package. The first argument is the name of the data.frame, and the second is the path to the new file we want to create.\n\nwrite_csv(inat, file= observations_cleaned_path, na = \"\" )",
    "crumbs": [
      "Extra",
      "Cleaning data"
    ]
  },
  {
    "objectID": "lessons/cleaning-data.html#adding-more-information",
    "href": "lessons/cleaning-data.html#adding-more-information",
    "title": "Cleaning data",
    "section": "Adding more information",
    "text": "Adding more information\nIn order to get information about observations with threatened, introduced, and native species, we had to download a separate CSV for each option. We want to merge all these files into one cleaned observations file.\n\ninat_data &lt;- read_csv(observations_cleaned_path)\nthreatened_raw &lt;- read_csv(threatened_raw_path)\nintroduced_raw &lt;- read_csv(introduced_raw_path)\nnative_raw &lt;- read_csv(native_raw_path)\n\nGet threatened species.\n\nthreatened_data &lt;- threatened_raw %&gt;% \n  mutate(threatened = TRUE)\n\nthreatened_data &lt;- threatened_data[!duplicated(threatened_data), ]\n\nthreatened_data\n\n# A tibble: 337 × 2\n   taxon_id threatened\n      &lt;dbl&gt; &lt;lgl&gt;     \n 1    48662 TRUE      \n 2  1454382 TRUE      \n 3    59575 TRUE      \n 4   210624 TRUE      \n 5   221090 TRUE      \n 6    80308 TRUE      \n 7   144205 TRUE      \n 8    78804 TRUE      \n 9    61164 TRUE      \n10    77658 TRUE      \n# ℹ 327 more rows\n\n\nGet introduced species.\n\nintroduced_data &lt;- introduced_raw %&gt;% \n  mutate(establishment_means = 'introduced') \n  \nintroduced_data &lt;- introduced_data[!duplicated(introduced_data), ]\n\n\nintroduced_data\n\n# A tibble: 1,440 × 2\n   taxon_id establishment_means\n      &lt;dbl&gt; &lt;chr&gt;              \n 1   480298 introduced         \n 2    13858 introduced         \n 3   187316 introduced         \n 4    51271 introduced         \n 5    46020 introduced         \n 6   236935 introduced         \n 7   552449 introduced         \n 8    53168 introduced         \n 9   162972 introduced         \n10    53025 introduced         \n# ℹ 1,430 more rows\n\n\nGet native species.\n\nnative_data &lt;- native_raw %&gt;% \n  mutate(establishment_means = 'native') \n  \nnative_data &lt;- native_data[!duplicated(native_data), ]\n\n\nnative_data\n\n# A tibble: 3,058 × 2\n   taxon_id establishment_means\n      &lt;dbl&gt; &lt;chr&gt;              \n 1    54247 native             \n 2    36100 native             \n 3    36204 native             \n 4     6930 native             \n 5     7470 native             \n 6    43115 native             \n 7    48662 native             \n 8     7089 native             \n 9    50822 native             \n10    29053 native             \n# ℹ 3,048 more rows\n\n\nGet combine introduced and native dataframes\n\nestablishment_means &lt;- rbind(introduced_data, native_data)\n\nestablishment_means\n\n# A tibble: 4,498 × 2\n   taxon_id establishment_means\n      &lt;dbl&gt; &lt;chr&gt;              \n 1   480298 introduced         \n 2    13858 introduced         \n 3   187316 introduced         \n 4    51271 introduced         \n 5    46020 introduced         \n 6   236935 introduced         \n 7   552449 introduced         \n 8    53168 introduced         \n 9   162972 introduced         \n10    53025 introduced         \n# ℹ 4,488 more rows\n\n\nremove rows where taxon_id is listed as both native and introduced\n\nnon_duplicates &lt;- establishment_means %&gt;%\n  count(taxon_id) %&gt;%\n  arrange(desc(n)) %&gt;%\n  filter(n == 1)  \n  \nkeep_ids &lt;- non_duplicates$taxon_id\n\nlength(keep_ids)\n\n[1] 4436\n\n\n\ndedup_establishment_means &lt;- establishment_means %&gt;%\n  filter(taxon_id %in% keep_ids)\n\nadd threatened info to the main inat dataframe.\n\ncombined_data &lt;- left_join(inat_data, threatened_data)\n\nJoining with `by = join_by(taxon_id, threatened)`\n\n\nadd native, introduced info to main inat dataframe\n\ncombined_data &lt;- left_join(combined_data, dedup_establishment_means)\n\nJoining with `by = join_by(taxon_id, establishment_means)`\n\n\nsave file\n\nwrite_csv(combined_data, observations_cleaned_path, na = \"\")",
    "crumbs": [
      "Extra",
      "Cleaning data"
    ]
  },
  {
    "objectID": "lessons/setup.html",
    "href": "lessons/setup.html",
    "title": "Setup",
    "section": "",
    "text": "This workshop use Github Codespaces to host the software, data, and code needed for the workshop. This way attendees won’t need to install stuff on their own computer.\nIf you are interested in install all the software, data, and code on your computer, visit the Setup - local page",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lessons/setup.html#functions",
    "href": "lessons/setup.html#functions",
    "title": "Setup",
    "section": "Functions",
    "text": "Functions\nFunctions are predefined bits of code that do a specific task. Arguments are values that we pass into a function. A function takes the arguments and something to the values.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lessons/setup.html#r-packages",
    "href": "lessons/setup.html#r-packages",
    "title": "Setup",
    "section": "R packages",
    "text": "R packages\nR itself has many built-in functions, but we can access many more by installing and loading other packages of functions and data into R. We will use several R packages for the workshop.\nTo install these packages, use install.packages() function from R. We pass in the package names as arguments. The name of the packages must be in quotes.\n\ninstall.packages(\"readr\")\n\nR will connect to the internet and download packages from servers that have R packages. R will then install the packages on your computer. The console window will show you the progress of the installation process.\nTo save time, we have already installed all the packages we need for the workshop.\nIn order to use a package, use library() function from R to load the package. We pass in the name of the package as an argument. Do not use quotes around the package name when using library().\nThese are the R packages we will use in this workshop.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(lubridate) # manipulate dates\nlibrary(mapview) # create interactive maps\n\nGenerally it is a good idea to list all the libraries that you will use in the script at the beginning of the script. You want to install a package to your computer once, and then load it with library() in each script where you need to use it.",
    "crumbs": [
      "Setup"
    ]
  }
]