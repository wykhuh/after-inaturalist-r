[
  {
    "objectID": "lessons/setup-my-account.html",
    "href": "lessons/setup-my-account.html",
    "title": "Setup - Codespace on my Github account page",
    "section": "",
    "text": "Coming soon…"
  },
  {
    "objectID": "lessons/setup.html",
    "href": "lessons/setup.html",
    "title": "Setup",
    "section": "",
    "text": "R is a programming language that will be used for this workshop.\nRStudio is a software application to write and run R code.\nGitHub is an online platform that lets people store, manage, and share their code. Github uses version control software called Git that keeps track of changes for all files inside a folder. We call a folder that uses Git to track changes a repository.\nGitHub Codespaces provide an online development environment where people can run their code online without installing stuff on their computer.\nGitHub Classroom is a tool that teachers can use to share, manage, and grade assignments.\nVisual Studio Code is a software application to write and run code in a variety of languages.\nThere are several ways to setup a computer for the material covered in this workshop.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lessons/setup.html#intitial-setup",
    "href": "lessons/setup.html#intitial-setup",
    "title": "Setup",
    "section": "Intitial Setup",
    "text": "Intitial Setup\nThis workshop use GitHub to host and run the code, data, software, and infrastructure needed for the workshop. Attendees will not need to install stuff on their own computer; everything is available online using GitHub.\nIt will take about ten minutes to set things up on Github.\n\nCreate Github account\nIf you don’t have a Github account, create an account.\n\nSign up for a GitHub account.\nAfter you login, update your settings.\nGo to Emails settings.\n\nSelect ‘Keep my email addresses private’. ‘Block command line pushes that expose my email’ should also be automatically selected.\n\nOptional. Go to Password and authentication settings.\n\nIf needed, setup Passkey or two-factor authentication.\n\n\n\n\nSetup Github Classroom and Codespaces\nFor workshop attendees, we will use Github Classroom to share files and setup Codespaces. To access the files needed for the workshop, join the After iNaturalist Github Classroom.\n\nClick on the invitation link for After iNaturalist classroom that we emailed to you.\nYou will see a “Accept the assignment” page. Click “Accept this assignment” button.\n\nThis will create a repository in GitHub with code and data for the workshop. The repository will be created in data-explorers-feb-2025 Github account. You will save your work to this repository. Only you and the workshop organizers can access your repository.\n\n\nYou will see a “You’re ready to go!” page. You can open that link in another browser tab or window to view your repository.\nClick “Open in GitHub Codespaces” button.\nThis will set up an online development environment where you can write and run code.\n\nYou will see page with “Setting up remote connection: Building codespace…” message in the corner. The software for the workshop is being downloaded and installed. This will take about 5 minutes.\nThis is Visual Studio Code, the default code editor for GitHub Codespaces. We want to use RStudio as our code editor.\n\n\n\nOnce the Codespace if finished building, click on the “PORTS” tab at the bottom.\n\nIn the PORTS tab, hover over the item named RStudio or 8787. Click on the middle globe icon to start RStudio in a new browser tab.\n\nNow you are ready to write and run R code using RStudio.\n\nNext step is to stop R and Codespace . Follow the steps listed in Stop R and Codespace.\n\nYou are done setting up Github. If you have problems, please email us.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lessons/setup.html#restart-codespace",
    "href": "lessons/setup.html#restart-codespace",
    "title": "Setup",
    "section": "Restart Codespace",
    "text": "Restart Codespace\nAfter the initial setup of Codespace, you can restart an existing Codespace.\n\nGo to data-explorers-feb-2025 Github page, and you should see your repository. Click on your repository.\nScroll to the bottom of the page, and click the “Open in GitHub Codespaces” button. This will restart the Codespace created in the “Setup Github Classroom and Codespaces” section.\n\nThis is Visual Studio Code, the default code editor for GitHub Codespaces. We want to use RStudio as our code editor.\n\nOnce the Codespace has started, click on the “PORTS” tab at the bottom.\n\nIn the PORTS tab, hover over the item named RStudio or 8787. Click on the middle globe icon to start RStudio in a new browser tab.\n\n\n\nNow you are ready to write and run R code using RStudio.\nEven though we won’t use Visual Studio Code to write R code, keep the tab for Visual Studio Code open.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lessons/setup.html#stop-codespace",
    "href": "lessons/setup.html#stop-codespace",
    "title": "Setup",
    "section": "Stop Codespace",
    "text": "Stop Codespace\nAfter you finish your work for the day, you need to stop R, push your code changes to your repository and, stop Codespace.\nTo stop R, click the orange circle in the upper right of RStudio.\n\nYou’ll see a message “R Session Ended”. Close the browser tab for RStudio.\n\nGo to the Visual Studio Code browser tab. Click “bash”. Click “TERMINAL”.\n\nTo save the changed files to your repository, type “bash scripts/save_files.sh” after the $, and hit return/enter.\n\nTo stop Codespace, click the blue area in the lower left corner of Visual Studio Code.\n\nA popup window will appear. Click “Stop Current Codespace”.\n\nAfter a little while, you will see a “Codespace is stopped” message. You can now close the browser tab.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lessons/cleaning-data.html",
    "href": "lessons/cleaning-data.html",
    "title": "Cleaning data",
    "section": "",
    "text": "A common step during data analysis is to clean up the raw data. We fix any obvious errors, edit column names, exclude rows we do not want, and save the cleaned up data set. We do the analysis on the cleaned data set.\nLoad libraries\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(pdftools) # process pdfs\nlibrary(stringr) # work with string\nlibrary(here) # file paths",
    "crumbs": [
      "Extra",
      "Cleaning data"
    ]
  },
  {
    "objectID": "lessons/cleaning-data.html#inaturalist",
    "href": "lessons/cleaning-data.html#inaturalist",
    "title": "Cleaning data",
    "section": "iNaturalist",
    "text": "iNaturalist\n\nCleaning up iNaturalist file\nSave the file paths as objects.\n\nobservations_raw_path &lt;- tempfile()\nzip_path &lt;- here('data/raw/observations-513664.csv.zip')\nunzip(zipfile = zip_path, exdir = observations_raw_path)\n\nWarning in unzip(zipfile = zip_path, exdir = observations_raw_path): error 1 in\nextracting from zip file\n\nobservations_cleaned_path &lt;- here('data/cleaned/cnc-los-angeles-observations.csv')\n\nThe CSV we downloaded from iNaturalist had several problems.\n\nsome observation did not have a species\nsome observations did not have location information\nsome observations were not in Los Angeles\nthere were some fields that we did not need\ninformation about observations with threatened, native, and introduced species had to be downloaded separately\n\nIn order to simplify things for the workshop attendees, we fixed the various issues and created a cleaned up CSV.\nThese are the steps we took to produced the cleaned up file. The raw file is at ‘/var/folders/zw/0kb57jnn5nv9k3pgxsz86n7h0000gq/T//Rtmp2nh4Rw/fileef4f2dd5f7d6’, the cleaned file is at ‘/Users/wyk/Development/science/city_nature_challenge/NHMLA_workshop/after_inaturalist_lesson/data/cleaned/cnc-los-angeles-observations.csv’\n\ntmp &lt;- tempfile()\nzip_path &lt;- here('data/raw/observations-513664.zip')\nunzip(zipfile = zip_path, exdir = tmp)\n\ninat_raw &lt;- read_csv(paste(tmp, 'observations-513664.csv', sep='/'))\n\nUse colSums(is.na()) to count the number of rows that have NA values for each column.\n\ncolSums(is.na(inat_raw))\n\n                              id                             uuid \n                               0                                0 \n              observed_on_string                      observed_on \n                               0                                0 \n                time_observed_at                        time_zone \n                            5862                                0 \n                         user_id                       user_login \n                               0                                0 \n                       user_name                       created_at \n                           72542                                0 \n                      updated_at                    quality_grade \n                               0                                0 \n                         license                              url \n                           48002                                0 \n                       image_url                        sound_url \n                            2530                           192990 \n                        tag_list                      description \n                          186884                           169938 \n   num_identification_agreements num_identification_disagreements \n                               0                                0 \n              captive_cultivated             oauth_application_id \n                               0                            71706 \n                     place_guess                         latitude \n                             440                              438 \n                       longitude              positional_accuracy \n                             438                            40407 \n             private_place_guess                 private_latitude \n                          193738                           193738 \n               private_longitude       public_positional_accuracy \n                          193738                            36853 \n                      geoprivacy                 taxon_geoprivacy \n                          180034                           144575 \n            coordinates_obscured               positioning_method \n                               0                           176278 \n              positioning_device                    species_guess \n                          174658                            29909 \n                 scientific_name                      common_name \n                            1671                            12223 \n               iconic_taxon_name                         taxon_id \n                            1862                             1670 \n              taxon_kingdom_name                taxon_phylum_name \n                            1846                             3906 \n            taxon_subphylum_name            taxon_superclass_name \n                           15073                           191497 \n                taxon_class_name              taxon_subclass_name \n                            6165                           142186 \n           taxon_superorder_name                 taxon_order_name \n                          183410                            10661 \n             taxon_suborder_name           taxon_superfamily_name \n                          148094                           153153 \n               taxon_family_name             taxon_subfamily_name \n                           16037                            79392 \n           taxon_supertribe_name                 taxon_tribe_name \n                          190875                           105525 \n             taxon_subtribe_name                 taxon_genus_name \n                          168941                            28054 \n          taxon_genushybrid_name               taxon_species_name \n                          193738                            55501 \n               taxon_hybrid_name            taxon_subspecies_name \n                          193139                           190760 \n              taxon_variety_name                  taxon_form_name \n                          192195                           193738 \n\n\nAll rows have id, observed_on, and user_id.\nsome rows don’t have scientific_name, latitude or longitude.\nUse filter to select the observations we want.\n!is.na will select rows that have are not NA, meaning rows that have a value. We select observations that have latitude, longitude, and scientific_name. We also ignored observations outside of LA\nWe save the cleaned up data in a new object inat.\n\ninat &lt;- inat_raw %&gt;% \n  filter(!is.na(latitude) &\n           !is.na(longitude) &\n           !is.na(scientific_name)) %&gt;%\n    filter(latitude &lt; 40)  \n\nThe original data frame ‘inat_raw’ had 193K rows, the cleaned data frame ‘inat’ has 191K rows.\nWe can double check our work.\nlatitude, longitude, scientific_name have zero NA.\n\ncolSums(is.na(inat))\n\n                              id                             uuid \n                               0                                0 \n              observed_on_string                      observed_on \n                               0                                0 \n                time_observed_at                        time_zone \n                            5819                                0 \n                         user_id                       user_login \n                               0                                0 \n                       user_name                       created_at \n                           71186                                0 \n                      updated_at                    quality_grade \n                               0                                0 \n                         license                              url \n                           47396                                0 \n                       image_url                        sound_url \n                            2243                           190893 \n                        tag_list                      description \n                          184803                           168134 \n   num_identification_agreements num_identification_disagreements \n                               0                                0 \n              captive_cultivated             oauth_application_id \n                               0                            71018 \n                     place_guess                         latitude \n                               1                                0 \n                       longitude              positional_accuracy \n                               0                            40057 \n             private_place_guess                 private_latitude \n                          191638                           191638 \n               private_longitude       public_positional_accuracy \n                          191638                            36540 \n                      geoprivacy                 taxon_geoprivacy \n                          178390                           142538 \n            coordinates_obscured               positioning_method \n                               0                           174275 \n              positioning_device                    species_guess \n                          172680                            28434 \n                 scientific_name                      common_name \n                               0                            10525 \n               iconic_taxon_name                         taxon_id \n                             190                                0 \n              taxon_kingdom_name                taxon_phylum_name \n                             174                             2221 \n            taxon_subphylum_name            taxon_superclass_name \n                           13372                           189405 \n                taxon_class_name              taxon_subclass_name \n                            4465                           140237 \n           taxon_superorder_name                 taxon_order_name \n                          181350                             8944 \n             taxon_suborder_name           taxon_superfamily_name \n                          146151                           151144 \n               taxon_family_name             taxon_subfamily_name \n                           14269                            77518 \n           taxon_supertribe_name                 taxon_tribe_name \n                          188777                           103590 \n             taxon_subtribe_name                 taxon_genus_name \n                          166888                            26258 \n          taxon_genushybrid_name               taxon_species_name \n                          191638                            53654 \n               taxon_hybrid_name            taxon_subspecies_name \n                          191043                           188661 \n              taxon_variety_name                  taxon_form_name \n                          190096                           191638 \n\n\nWe want to delete unneeded columns to keep the CSV under 100 MB for Github\n\nnames(inat)\n\n [1] \"id\"                               \"uuid\"                            \n [3] \"observed_on_string\"               \"observed_on\"                     \n [5] \"time_observed_at\"                 \"time_zone\"                       \n [7] \"user_id\"                          \"user_login\"                      \n [9] \"user_name\"                        \"created_at\"                      \n[11] \"updated_at\"                       \"quality_grade\"                   \n[13] \"license\"                          \"url\"                             \n[15] \"image_url\"                        \"sound_url\"                       \n[17] \"tag_list\"                         \"description\"                     \n[19] \"num_identification_agreements\"    \"num_identification_disagreements\"\n[21] \"captive_cultivated\"               \"oauth_application_id\"            \n[23] \"place_guess\"                      \"latitude\"                        \n[25] \"longitude\"                        \"positional_accuracy\"             \n[27] \"private_place_guess\"              \"private_latitude\"                \n[29] \"private_longitude\"                \"public_positional_accuracy\"      \n[31] \"geoprivacy\"                       \"taxon_geoprivacy\"                \n[33] \"coordinates_obscured\"             \"positioning_method\"              \n[35] \"positioning_device\"               \"species_guess\"                   \n[37] \"scientific_name\"                  \"common_name\"                     \n[39] \"iconic_taxon_name\"                \"taxon_id\"                        \n[41] \"taxon_kingdom_name\"               \"taxon_phylum_name\"               \n[43] \"taxon_subphylum_name\"             \"taxon_superclass_name\"           \n[45] \"taxon_class_name\"                 \"taxon_subclass_name\"             \n[47] \"taxon_superorder_name\"            \"taxon_order_name\"                \n[49] \"taxon_suborder_name\"              \"taxon_superfamily_name\"          \n[51] \"taxon_family_name\"                \"taxon_subfamily_name\"            \n[53] \"taxon_supertribe_name\"            \"taxon_tribe_name\"                \n[55] \"taxon_subtribe_name\"              \"taxon_genus_name\"                \n[57] \"taxon_genushybrid_name\"           \"taxon_species_name\"              \n[59] \"taxon_hybrid_name\"                \"taxon_subspecies_name\"           \n[61] \"taxon_variety_name\"               \"taxon_form_name\"                 \n\n\nSetting a column to NULL will remove the column.\n\ninat$uuid &lt;- NULL\ninat$observed_on_string &lt;- NULL\ninat$time_zone &lt;- NULL\ninat$num_identification_agreements &lt;- NULL\ninat$num_identification_disagreements &lt;- NULL\ninat$oauth_application_id &lt;- NULL\ninat$place_guess &lt;- NULL\ninat$private_place_guess &lt;- NULL\ninat$private_longitude &lt;- NULL\ninat$private_latitude &lt;- NULL\ninat$positioning_method &lt;- NULL\ninat$positioning_device &lt;- NULL\n\nuse filter and dim to see how often the taxon names were used.\n\ninat %&gt;% filter(!is.na(taxon_subphylum_name)) %&gt;% dim\n\n[1] 178266     50\n\n\n\ninat %&gt;% filter(!is.na(taxon_superclass_name)) %&gt;% dim\n\n[1] 2233   50\n\ninat %&gt;% filter(!is.na(taxon_subclass_name)) %&gt;% dim\n\n[1] 51401    50\n\n\n\ninat %&gt;% filter(!is.na(taxon_superorder_name)) %&gt;% dim\n\n[1] 10288    50\n\ninat %&gt;% filter(!is.na(taxon_suborder_name)) %&gt;% dim\n\n[1] 45487    50\n\n\n\ninat %&gt;% filter(!is.na(taxon_superfamily_name)) %&gt;% dim\n\n[1] 40494    50\n\ninat %&gt;% filter(!is.na(taxon_subfamily_name)) %&gt;% dim\n\n[1] 114120     50\n\n\n\ninat %&gt;% filter(!is.na(taxon_supertribe_name)) %&gt;% dim\n\n[1] 2861   50\n\ninat %&gt;% filter(!is.na(taxon_tribe_name)) %&gt;% dim\n\n[1] 88048    50\n\ninat %&gt;% filter(!is.na(taxon_subtribe_name)) %&gt;% dim\n\n[1] 24750    50\n\n\n\ninat %&gt;% filter(!is.na(taxon_genushybrid_name)) %&gt;% dim\n\n[1]  0 50\n\ninat %&gt;% filter(!is.na(taxon_hybrid_name)) %&gt;% dim\n\n[1] 595  50\n\n\n\ninat %&gt;% filter(!is.na(taxon_subspecies_name)) %&gt;% dim\n\n[1] 2977   50\n\ninat %&gt;% filter(!is.na(taxon_variety_name)) %&gt;% dim\n\n[1] 1542   50\n\ninat %&gt;% filter(!is.na(taxon_form_name)) %&gt;% dim\n\n[1]  0 50\n\n\n\ninat$species_guess &lt;- NULL\n\ninat$taxon_subphylum_name &lt;- NULL\n\ninat$taxon_superclass_name &lt;- NULL\ninat$taxon_subclass_name &lt;- NULL\n\ninat$taxon_superorder_name &lt;- NULL\ninat$taxon_suborder_name &lt;- NULL\n\ninat$taxon_superfamily_name &lt;- NULL\ninat$taxon_subfamily_name &lt;- NULL\n\ninat$taxon_supertribe_name &lt;- NULL\ninat$taxon_tribe_name &lt;- NULL\ninat$taxon_subtribe_name &lt;- NULL\n\ninat$taxon_genushybrid_name &lt;- NULL\ninat$taxon_hybrid_name &lt;- NULL\n\ninat$taxon_variety_name &lt;- NULL\ninat$taxon_form_name &lt;- NULL\n\n\nnames(inat)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"     \n\n\nWe want to save the cleaned up data set so we can use it later. We can save data.frame to a CSV using the write_csv() function from the readr package. The first argument is the name of the data.frame, and the second is the path to the new file we want to create.\n\nwrite_csv(inat, file= observations_cleaned_path, na = \"\" )\n\n\n\nAdding more information\nIn order to get information about observations with threatened, introduced, and native species, we had to download a separate CSV for each option. We want to merge all these files into one cleaned observations file.\n\ninat_data &lt;- read_csv(observations_cleaned_path)\nthreatened_raw &lt;- read_csv(here('data/raw/observations-514065_threatened.csv'))\nintroduced_raw &lt;- read_csv(here('data/raw/observations-514069_introduced.csv'))\nnative_raw &lt;- read_csv(here('data/raw/observations-514076_native.csv'))\n\nGet threatened species.\n\nthreatened_data &lt;- threatened_raw %&gt;% \n  mutate(threatened = TRUE)\n\nthreatened_data &lt;- threatened_data[!duplicated(threatened_data), ]\n\nthreatened_data\n\n# A tibble: 337 × 2\n   taxon_id threatened\n      &lt;dbl&gt; &lt;lgl&gt;     \n 1    48662 TRUE      \n 2  1454382 TRUE      \n 3    59575 TRUE      \n 4   210624 TRUE      \n 5   221090 TRUE      \n 6    80308 TRUE      \n 7   144205 TRUE      \n 8    78804 TRUE      \n 9    61164 TRUE      \n10    77658 TRUE      \n# ℹ 327 more rows\n\n\nGet introduced species.\n\nintroduced_data &lt;- introduced_raw %&gt;% \n  mutate(establishment_means = 'introduced') \n  \nintroduced_data &lt;- introduced_data[!duplicated(introduced_data), ]\n\n\nintroduced_data\n\n# A tibble: 1,440 × 2\n   taxon_id establishment_means\n      &lt;dbl&gt; &lt;chr&gt;              \n 1   480298 introduced         \n 2    13858 introduced         \n 3   187316 introduced         \n 4    51271 introduced         \n 5    46020 introduced         \n 6   236935 introduced         \n 7   552449 introduced         \n 8    53168 introduced         \n 9   162972 introduced         \n10    53025 introduced         \n# ℹ 1,430 more rows\n\n\nGet native species.\n\nnative_data &lt;- native_raw %&gt;% \n  mutate(establishment_means = 'native') \n  \nnative_data &lt;- native_data[!duplicated(native_data), ]\n\n\nnative_data\n\n# A tibble: 3,058 × 2\n   taxon_id establishment_means\n      &lt;dbl&gt; &lt;chr&gt;              \n 1    54247 native             \n 2    36100 native             \n 3    36204 native             \n 4     6930 native             \n 5     7470 native             \n 6    43115 native             \n 7    48662 native             \n 8     7089 native             \n 9    50822 native             \n10    29053 native             \n# ℹ 3,048 more rows\n\n\nGet combine introduced and native data frames\n\nestablishment_means &lt;- rbind(introduced_data, native_data)\n\nestablishment_means\n\n# A tibble: 4,498 × 2\n   taxon_id establishment_means\n      &lt;dbl&gt; &lt;chr&gt;              \n 1   480298 introduced         \n 2    13858 introduced         \n 3   187316 introduced         \n 4    51271 introduced         \n 5    46020 introduced         \n 6   236935 introduced         \n 7   552449 introduced         \n 8    53168 introduced         \n 9   162972 introduced         \n10    53025 introduced         \n# ℹ 4,488 more rows\n\n\nremove rows where taxon_id is listed as both native and introduced\n\nnon_duplicates &lt;- establishment_means %&gt;%\n  count(taxon_id) %&gt;%\n  arrange(desc(n)) %&gt;%\n  filter(n == 1)  \n  \nkeep_ids &lt;- non_duplicates$taxon_id\n\nlength(keep_ids)\n\n[1] 4436\n\n\n\ndedup_establishment_means &lt;- establishment_means %&gt;%\n  filter(taxon_id %in% keep_ids)\n\nadd threatened info to the main inat data frame.\n\ncombined_data &lt;- left_join(inat_data, threatened_data)\n\nJoining with `by = join_by(taxon_id, threatened)`\n\n\nadd native, introduced info to main inat data frame\n\ncombined_data &lt;- left_join(combined_data, dedup_establishment_means)\n\nJoining with `by = join_by(taxon_id, establishment_means)`\n\n\nsave file\n\nwrite_csv(combined_data, observations_cleaned_path, na = \"\")",
    "crumbs": [
      "Extra",
      "Cleaning data"
    ]
  },
  {
    "objectID": "lessons/cleaning-data.html#lasan",
    "href": "lessons/cleaning-data.html#lasan",
    "title": "Cleaning data",
    "section": "LASAN",
    "text": "LASAN\n\nIndicator species\nConvert pdf to CSV\n\npdf &lt;- pdf_text(here(\"data/raw/LASAN/cnt061142_indicator_species.pdf\")) %&gt;%\n  readr::read_lines()  \n\n\nmy_list = list()\nfor (line in pdf[5:189]) {\n  if (line != '') {\n    matches &lt;- str_match(line, \n        \"^([a-zA-Z]+)  +([a-zA-Z]+ [a-zA-Z.()]+ ([a-zA-Z.()]+ [a-zA-Z.()]+)?)  +([-'a-zA-Z ]+)  +\"  \n    )\n    row &lt;- c(matches[1,2], matches[1,3],  matches[1,5], 'species') %&gt;% str_squish()\n    my_list[[length(my_list)+1]] &lt;- row\n  }\n}\n\nstats_df &lt;- plyr::ldply(my_list) \ncolnames(stats_df) &lt;- c('group', 'scientific name', 'common name', 'taxon rank')\n\nstats_df &lt;- stats_df %&gt;% filter_all(any_vars(!is.na(.)))\nstats_df &lt;- stats_df %&gt;% filter(group != 'Group')\n\nstats_df[2,'common name'] &lt;- paste(stats_df[2,'common name'], 'Salamander')\nstats_df[18,'common name'] &lt;- paste(stats_df[18,'common name'], 'Jerusalem crickets')\nstats_df[22,'common name'] &lt;- paste(stats_df[22,'common name'], 'hairstreak')\nstats_df[23,'common name'] &lt;- paste(stats_df[23,'common name'], 'butterfly')\nstats_df[23,'taxon rank'] &lt;- 'subspecies'\nstats_df[25,'scientific name'] &lt;- 'Mutillidae'\nstats_df[25,'taxon rank'] &lt;- 'family'\nstats_df[26,'scientific name'] &lt;- 'Pogonomyrmex'\nstats_df[26,'taxon rank'] &lt;- 'genus'\n\n\nwrite_csv(stats_df, here('data/cleaned/LA_city_indicator_species.csv'))",
    "crumbs": [
      "Extra",
      "Cleaning data"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html",
    "href": "lessons/editing-geo-files.html",
    "title": "Editing geospatial files",
    "section": "",
    "text": "Sometimes we find a geospatial file that has more than we need. For instance, I downloaded a file that has all the state parks in California, but I only want the state parks in LA County. In this section we’ll cover how to extract data from existing files.\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(stringr) # work with string\nlibrary(here) # file paths\nlibrary(sf) # handle vector geospatial data\nlibrary(tigris) # access TIGER/Line shapefiles",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-selected-california-counties",
    "href": "lessons/editing-geo-files.html#find-selected-california-counties",
    "title": "Editing geospatial files",
    "section": "Find selected California counties",
    "text": "Find selected California counties\nCalifornia state has a file that lists all the counties in California. https://gis.data.ca.gov/datasets/California::california-county-boundaries-and-identifiers/explore\nLet’s get the boundaries for Los Angeles County.\nRead the file with all the counties in California.\n\nca_counties &lt;- read_sf(here('data/raw/California_County_Boundaries_and_Identifiers_Blue_Version_view_2716745428963682036/California_County_Boundaries_and_Identifiers.shp'))\n\n\nglimpse(ca_counties)\n\nRows: 73\nColumns: 13\n$ COUNTY     &lt;chr&gt; \"Alameda County\", \"Alpine County\", \"Amador County\", \"Butte …\n$ COPRI      &lt;chr&gt; \"01000\", \"02000\", \"03000\", \"04000\", \"05000\", \"06000\", \"0700…\n$ PLACE_NAME &lt;chr&gt; \"Alameda County\", \"Alpine County\", \"Amador County\", \"Butte …\n$ GEOID      &lt;chr&gt; \"06001\", \"06003\", \"06005\", \"06007\", \"06009\", \"06011\", \"0601…\n$ PLACE_TYPE &lt;chr&gt; \"County\", \"County\", \"County\", \"County\", \"County\", \"County\",…\n$ GNIS_ID    &lt;dbl&gt; 1675839, 1675840, 1675841, 1675842, 1675885, 1675902, 16759…\n$ LEGAL_PLAC &lt;chr&gt; \"Alameda County\", \"Alpine County\", \"Amador County\", \"Butte …\n$ PLACE_ABBR &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ CNTY_ABBR  &lt;chr&gt; \"ALA\", \"ALP\", \"AMA\", \"BUT\", \"CAL\", \"COL\", \"CCA\", \"DNE\", \"ED…\n$ AREA_SqMi  &lt;dbl&gt; 820.7918, 741.0404, 606.0190, 1677.8158, 1035.7786, 1156.65…\n$ COASTAL    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ GlobalID   &lt;chr&gt; \"1ef554be-bce2-4a37-b205-c10f99330cb3\", \"8f6df77e-8ec0-4cda…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((-136862.7 -..., MULTIPOLYGON (…\n\n\nWe see the name of the county is in COUNTY column. Use filter() to select the rows for ‘Los Angeles County’.\n\nLA &lt;- ca_counties %&gt;%\n  filter(COUNTY == 'Los Angeles County')\n\nLA\n\nSimple feature collection with 2 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96851.82 ymin: -583500.2 xmax: 216620.6 ymax: -352271.1\nProjected CRS: NAD83 / California Albers\n# A tibble: 2 × 13\n  COUNTY         COPRI PLACE_NAME GEOID PLACE_TYPE GNIS_ID LEGAL_PLAC PLACE_ABBR\n* &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     \n1 Los Angeles C… 19000 Los Angel… 06037 County      277283 Los Angel… &lt;NA&gt;      \n2 Los Angeles C… 19000 Los Angel… 06037 County      277283 Los Angel… &lt;NA&gt;      \n# ℹ 5 more variables: CNTY_ABBR &lt;chr&gt;, AREA_SqMi &lt;dbl&gt;, COASTAL &lt;chr&gt;,\n#   GlobalID &lt;chr&gt;, geometry &lt;MULTIPOLYGON [m]&gt;\n\n\n\nggplot() +\n  geom_sf(data=LA) \n\n\n\n\n\n\n\n\nUse st_write() to save the state parks within LA County as a Shape file. The first argument is the map data we want to save, and the second argument is the file path.\n\nst_write(LA, here('data/cleaned/los_angeles_county/los_angeles_county.shp'))",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-waterways-in-los-angeles-county",
    "href": "lessons/editing-geo-files.html#find-waterways-in-los-angeles-county",
    "title": "Editing geospatial files",
    "section": "Find waterways in Los Angeles County",
    "text": "Find waterways in Los Angeles County\nThe US Census produces geospatial data that are linked to the Census data. This data is called Topologically Integrated Geographic Encoding and Referencing (TIGER). We can use the tigris package to download TIGER/Line shapefiles.\narea_water() from tigris returns: The area hydrography shapefile contains the geometry and attributes of both perennial and intermittent area hydrography features, including ponds, lakes, oceans, swamps, glaciers, and the area covered by large streams represented as double-line drainage.\nWe can find waterways in LA County by passing the state and county to area_water().\n\narea_water &lt;- area_water(state = \"CA\", county=\"Los Angeles\") \n\n\nggplot() +\n  geom_sf(data = area_water)\n\nLet’s find the LA River\nUse names() to get the column names.\n\nnames(area_water)\n\nLet’s look for FULLNAME equals ‘Los Angeles River’\n\nla_river &lt;- area_water %&gt;% \n  filter(FULLNAME == 'Los Angeles River')\n\nla_river\n\nNo records found.\nLet’s use str_starts() from stringr package to look for items that start with ‘Los Angeles’\n\nla_river &lt;- area_water %&gt;% \n  filter(str_starts(FULLNAME, 'Los Angeles'))\n\nla_river\n\nWe get three records. The river is called ‘Los Angeles Riv’\nWe want row 1 and 2. row 3 is a weird triangle\n\nggplot() +\n  geom_sf(data=la_river[1,]) +\n  geom_sf(data=la_river[2,]) \n\n\nggplot() +\n  geom_sf(data=la_river[3,]) \n\n\nfixed_river &lt;- la_river %&gt;% \n  filter(HYDROID %in% c(1104493447410, 1104493447488))\n\n\nggplot() +\n  geom_sf(data=fixed_river) \n\nSave the files\n\nst_write(fixed_river, here('data/cleaned/los_angeles_river.geojson'))\n\nst_write(area_water, here('data/cleaned/la_county_waterareas.geojson'))",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-state-parks-in-la-county",
    "href": "lessons/editing-geo-files.html#find-state-parks-in-la-county",
    "title": "Editing geospatial files",
    "section": "Find state parks in LA County",
    "text": "Find state parks in LA County\nLet’s get the all the California state parks within Los Angeles county.\nCalifornia State Parks has file that lists all the state parks in California. https://www.parks.ca.gov/?page_id=29682\nCalifornia state has a file that lists all the counties in California. https://gis.data.ca.gov/datasets/California::california-county-boundaries-and-identifiers/explore\nFirst we read the file with all state parks in California.\n\nstate_parks &lt;- read_sf(here('data/raw/Park_Boundaries/ParkBoundaries.shp'))\n\nThe we read the file with LA County\n\nLA_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\nCompare CRS for the state parks map and the county map.\n\nst_crs(state_parks) == st_crs(LA_county)\n\n[1] FALSE\n\n\nUse st_transform() to change the CRS of counties map to match the parks map.\n\nLA_county &lt;- st_transform(LA_county, crs = st_crs(state_parks))\n\nst_crs(state_parks) == st_crs(LA_county)\n\n[1] TRUE\n\n\nUse st_intersects() to find the state parks within LA county. This is similar to how we got all the observations in Expo park in an earlier lesson.\n\nLA_parks &lt;- state_parks[st_intersects(state_parks, LA_county ) %&gt;% lengths &gt; 0,]\n\nCreate a map showing LA County and state parks within LA County.\n\nggplot() +\n  geom_sf(data=LA_county) + \n  geom_sf(data=LA_parks, fill='yellow') \n\n\n\n\n\n\n\n\nSave the file.\n\nst_write(LA_parks, here('data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp'))",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#find-national-parks-in-la-county",
    "href": "lessons/editing-geo-files.html#find-national-parks-in-la-county",
    "title": "Editing geospatial files",
    "section": "Find national parks in LA County",
    "text": "Find national parks in LA County\nLet’s get the National Parks within Los Angeles county.\nNational Park Boundaries https://catalog.data.gov/dataset/national-park-boundaries\n\nparks_nps &lt;- read_sf(here('data/raw/nps_boundary/nps_boundary.shp'))\n\nla_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\ncheck if CRS are the same\n\nst_crs(parks_nps) == st_crs(la_county)\n\n[1] FALSE\n\n\nSet CRS of the parks to match LA County.\n\nparks_nps &lt;- st_transform(parks_nps, crs = st_crs(la_county) )\nst_crs(parks_nps) == st_crs(la_county)\n\n[1] TRUE\n\n\nget national parks within LA county\n\nca_nps_parks &lt;- parks_nps[st_intersects(parks_nps, la_county ) %&gt;% lengths &gt; 0,]\n\nggplot() +\n  geom_sf(data=la_county) + \n  geom_sf(data=ca_nps_parks, fill='yellow') \n\n\n\n\n\n\n\n\nSave the file.\n\nst_write(ca_nps_parks, here('data/cleaned/nps_la_county.geojson'))",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#la-county-park-needs-assessment",
    "href": "lessons/editing-geo-files.html#la-county-park-needs-assessment",
    "title": "Editing geospatial files",
    "section": "LA County Park Needs Assessment",
    "text": "LA County Park Needs Assessment\nThe LA County Park Needs Assessment has layer for the entire county wide. We want to remove the county wide layer.\n\nla_county_pna &lt;- read_sf(here('data/raw/PNA_Demographics_for_Dashboard_(View_Layer_SDE)_8662424390864523907.geojson'))\n\ndim(la_county_pna)\n\n[1] 189  96\n\n\n\nla_county_pna_edit &lt;- la_county_pna[-189, ]\n\ndim(la_county_pna_edit)\n\n[1] 188  96\n\n\n\nggplot(la_county_pna_edit) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nst_write(la_county_pna_edit, here('data/cleaned/LA_County_PNA_Demographics.geojson'))",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/editing-geo-files.html#wildfires",
    "href": "lessons/editing-geo-files.html#wildfires",
    "title": "Editing geospatial files",
    "section": "Wildfires",
    "text": "Wildfires\nLet’s get the wildfires within Los Angeles County from California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program (FRAP) and Wildland Fire Interagency Geospatial Services (WFIGS) Group.\n\ntmp &lt;- tempfile()\nzip_path &lt;- here('data/raw/California_Fire_Perimeters_(all).zip')\nunzip(zipfile = zip_path, exdir = tmp)\nca_fires_all &lt;- read_sf(tmp)\n\nNIFC_FIRIS &lt;- read_sf(here('data/raw/CA_Perimeters_NIFC_FIRIS_public_view/CA_Perimeters_NIFC_FIRIS_public_view.shp'))\n\ntmp &lt;- tempfile()\nzip_path &lt;- here('data/raw/POSTFIRE_MASTER_DATA_SHARE_2101786311546707294.zip')\nunzip(zipfile = zip_path, exdir = tmp)\nDINS &lt;- read_sf(tmp)\n\nWFIGS_2025 &lt;- read_sf(here('data/raw/WFIGS_Interagency_Perimeters_YearToDate_-5395415287356828930/Perimeters.shp'))\n\nla_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\ncheck if CRS are the same\n\nst_crs(ca_fires_all) == st_crs(la_county)\n\n[1] FALSE\n\nst_crs(NIFC_FIRIS) == st_crs(la_county)\n\n[1] FALSE\n\nst_crs(DINS) == st_crs(la_county)\n\n[1] FALSE\n\nst_crs(WFIGS_2025) == st_crs(la_county)\n\n[1] FALSE\n\n\nSet CRS of the fires to match LA County.\n\nca_fires_all &lt;- st_transform(ca_fires_all, crs = st_crs(la_county))\n\nNIFC_FIRIS &lt;- st_transform(NIFC_FIRIS, crs = st_crs(la_county))\n\nDINS &lt;- st_transform(DINS, crs = st_crs(la_county))\n\nWFIGS_2025 &lt;- st_transform(WFIGS_2025, crs = st_crs(la_county))\n\nget fires within LA county\n\nla_fires_all &lt;- ca_fires_all[st_intersects(ca_fires_all, la_county ) %&gt;% lengths &gt; 0,]\n\nggplot() +\n  geom_sf(data=la_county) + \n  geom_sf(data=la_fires_all) \n\n\n\n\n\n\n\n\n\nNIFC_FIRIS_la &lt;- NIFC_FIRIS[st_intersects(NIFC_FIRIS, la_county ) %&gt;% lengths &gt; 0,]\n\nggplot() +\n  geom_sf(data=la_county) + \n  geom_sf(data=NIFC_FIRIS_la) \n\n\n\n\n\n\n\n\n\nDINS_la &lt;- DINS[st_intersects(DINS, la_county ) %&gt;% lengths &gt; 0,]\n\nggplot() +\n  geom_sf(data=la_county) + \n  geom_sf(data=DINS_la) \n\n\n\n\n\n\n\n\n\nWFIGS_2025_la &lt;- WFIGS_2025[st_intersects(WFIGS_2025, la_county ) %&gt;% lengths &gt; 0,]\n\nggplot() +\n  geom_sf(data=la_county) + \n  geom_sf(data=WFIGS_2025_la) \n\n\n\n\n\n\n\n\n\nSave the file\n\nst_write(la_fires_all, here('data/cleaned/cal_fire_los_angeles_county.geojson'))\n\nst_write(NIFC_FIRIS_la, here('data/cleaned/NIFC_FIRIS_los_angeles_county.geojson'))\n\nst_write(DINS_la, here('data/cleaned/DINS_los_angeles_county.geojson'))\n\nst_write(WFIGS_2025_la, here('data/cleaned/wfigs_2025_los_angeles_county.geojson'))",
    "crumbs": [
      "Extra",
      "Editing geospatial files"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html",
    "href": "lessons/intro-data-analysis.html",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "How do we begin to analyze iNaturalist data?\n\n\n\n\n\nLearn how to download data from iNaturalist.\nLearn about the different ways to analyze tabular data.\nGet an overview of the workshop.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#questions",
    "href": "lessons/intro-data-analysis.html#questions",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "How do we begin to analyze iNaturalist data?",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#objectives",
    "href": "lessons/intro-data-analysis.html#objectives",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "Learn how to download data from iNaturalist.\nLearn about the different ways to analyze tabular data.\nGet an overview of the workshop.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#inaturalist-data",
    "href": "lessons/intro-data-analysis.html#inaturalist-data",
    "title": "Introduction to Data Analysis",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nWhen iNaturalist users add an observation through the iNaturalist app, that data is saved to the iNaturalist database. People can download the iNaturalist data as CSVs.\n\n\n\n\n\n\nNote\n\n\n\nCSV comma-separated values\nCSV is a text file format for tabular data. Each line represents one record. Each column represents a field. The fields are separated by commas. CSVs can be opened in text editors or spreadsheet programs.\nCSV as plain text file.\n\nCSV in CSV or spreadsheet application.\n\n\n\nThe iNaturalist CSV has information about:\n\nthe user who made observation\nthe location of the observation\nthe observed species\nlinks for photos, videos, sounds\n\nHere’s a rough draft that lists descriptions for each field.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#downloading-inaturalist-data",
    "href": "lessons/intro-data-analysis.html#downloading-inaturalist-data",
    "title": "Introduction to Data Analysis",
    "section": "Downloading iNaturalist data",
    "text": "Downloading iNaturalist data\nIf you would like to download iNaturalist data, here’s some info.\n\n\nHow to Search iNaturalist Observations\nstep-by-step to download iNaturalist data\nTo save time and ensure everyone at the workshop has the same data, we provide a CSV with data from iNaturalist City Nature Challenge Los Angeles from 2013 to 2024. We made some changes to the CSVs we downloaded from iNaturalist, and the code we used edit the CSV is available here.\nNote: Another place to download iNaturalist data is Global Biodiversity Information Facility (GBIF). iNaturalist recommends using GBIF for large downloads. Many researchers use GBIF downloads because GBIF provides a Digital Object Identifier (DOI) that people can cite in their publications.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#analyzing-data-using-r",
    "href": "lessons/intro-data-analysis.html#analyzing-data-using-r",
    "title": "Introduction to Data Analysis",
    "section": "Analyzing data using R",
    "text": "Analyzing data using R\nIt is difficult for people to see any patterns when reading rows after row of text. To make it easier to see patterns, we can use software to analyze tabular data.\nThere are various tools to analyze tabular data including spreadsheets applications like Excel and Google Sheets, and programming languages such as R and Python. If the data has location information, Geographic Information Systems (GIS) such ArcGIS and QGIS can be used.\nIn this workshop we will use R programming language to analyze iNaturalist data. Programming languages allow people to write instructions to tell a computer to do stuff. The reason we are using R is because R is a popular language in ecology research.",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#workshop-overview",
    "href": "lessons/intro-data-analysis.html#workshop-overview",
    "title": "Introduction to Data Analysis",
    "section": "Workshop overview",
    "text": "Workshop overview\nHere’s an overview of what we learn in this workshop.\nLoad software that will will need.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(stringr) # work with string\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\nlibrary(basemaps) # access open source basemaps\nlibrary(tigris) # access TIGER/Line shapefiles\nlibrary(pdftools) # process pdfs\nlibrary(webshot2) # save mapview maps\n\nLoad iNaturalist data from City Nature Challenge Los Angeles 2013-2024. There are over 191,000 observations.\n\ninat &lt;- read_csv(here(\"data/cleaned/cnc-los-angeles-observations.csv\"))\n\nSelect the data you want. For instance, get all the research grade observations for one user.\n\ninat %&gt;%\n  filter(user_login == 'natureinla' & \n           quality_grade == 'research') %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 1,556 × 4\n   user_login common_name            scientific_name               observed_on\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;                         &lt;date&gt;     \n 1 natureinla Red-eared Slider       Trachemys scripta elegans     2016-04-14 \n 2 natureinla Monarch                Danaus plexippus              2016-04-14 \n 3 natureinla San Diego Gopher Snake Pituophis catenifer annectens 2016-04-14 \n 4 natureinla California Towhee      Melozone crissalis            2016-04-14 \n 5 natureinla Cooper's Hawk          Astur cooperii                2016-04-14 \n 6 natureinla Monarch                Danaus plexippus              2016-04-14 \n 7 natureinla Allen's Hummingbird    Selasphorus sasin             2016-04-14 \n 8 natureinla Northern Mockingbird   Mimus polyglottos             2016-04-15 \n 9 natureinla House Sparrow          Passer domesticus             2016-04-15 \n10 natureinla Indian Peafowl         Pavo cristatus                2016-04-15 \n# ℹ 1,546 more rows\n\n\nCreate summaries of the data. For instance, get the 10 most commonly observed ‘species’.\n\ntop_10 &lt;- inat %&gt;%\n  select(common_name, scientific_name) %&gt;%\n  count(common_name, scientific_name, name='count')  %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:10)\n\ntop_10\n\n# A tibble: 10 × 3\n   common_name            scientific_name          count\n   &lt;chr&gt;                  &lt;chr&gt;                    &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis   3339\n 2 Western Honey Bee      Apis mellifera            2060\n 3 dicots                 Magnoliopsida             2013\n 4 plants                 Plantae                   1712\n 5 Eastern Fox Squirrel   Sciurus niger             1475\n 6 House Finch            Haemorhous mexicanus      1263\n 7 Mourning Dove          Zenaida macroura          1205\n 8 flowering plants       Angiospermae              1161\n 9 California poppy       Eschscholzia californica   934\n10 Convergent Lady Beetle Hippodamia convergens      929\n\n\nCreate maps. For example, create a map showing all the observations for Western Fence Lizard\n\nlizard &lt;- inat %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE) %&gt;%\n  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry) %&gt;%\n  filter(common_name == 'Western Fence Lizard')\n\n\nmapview(lizard)\n\n\nCreate charts. For example, create a bar chart showing the number of observations per year.\n\ninat %&gt;%\n  mutate(year = year(observed_on))  %&gt;%\n  group_by(year) %&gt;%\n  ggplot(aes(x = year)) +\n  geom_bar()",
    "crumbs": [
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html",
    "href": "lessons/other-datasets.html",
    "title": "Using to other datasets",
    "section": "",
    "text": "How do we get other datasets?\n\n\n\n\n\nLearn about pre-selected data sets provided in this workshop.\nLoad packages\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\nlibrary(here) # file paths\nlibrary(lubridate) #\nThere is a bug with sf https://github.com/r-spatial/sf/issues/1762. This bit of code is fix for the bug.\nsf_use_s2(FALSE)\n\nSpherical geometry (s2) switched off",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#questions",
    "href": "lessons/other-datasets.html#questions",
    "title": "Using to other datasets",
    "section": "",
    "text": "How do we get other datasets?",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#objectives",
    "href": "lessons/other-datasets.html#objectives",
    "title": "Using to other datasets",
    "section": "",
    "text": "Learn about pre-selected data sets provided in this workshop.",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#other-datasets",
    "href": "lessons/other-datasets.html#other-datasets",
    "title": "Using to other datasets",
    "section": "Other datasets",
    "text": "Other datasets\nThere are various geospatial datasets that are free to use. Data sources used for this course include LA City Geohub, Data.gov, California State Parks, County of Los Angeles Open Data, and US Census TIGER.\nWe’ve pre-selected some geospatial data that workshop attendees might want to use to analyze iNaturalist data and provided a preview in the code below. These files are in the data/raw directory. We modified some of the downloaded data to make things easier for workshop attendees; see Editing geospatial files for more details. These files are in the data/cleaned directory.\nWhen you use data from other sources, it’s a good idea to tell people where you got the data. Some data sets require people to cite the original source. Plus, it helps people who are looking at your analysis to know where you got the data.",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-city-neighborhood-councils-boundaries",
    "href": "lessons/other-datasets.html#la-city-neighborhood-councils-boundaries",
    "title": "Using to other datasets",
    "section": "LA City Neighborhood Councils boundaries",
    "text": "LA City Neighborhood Councils boundaries\nSome people might be interested in comparing iNaturalist data within different LA city neighborhoods.\nLA City Neighborhood Councils boundaries https://geohub.lacity.org/datasets/lahub::neighborhood-council-boundaries-2018/about\n\nnc_boundaries &lt;- read_sf(here('data/raw/Neighborhood_Councils_(Certified)/Neighborhood_Councils_(Certified).shp'))\n\nUse View() to see all the records.\n\nView(nc_boundaries)\n\n\nggplot() +\n  geom_sf(data=nc_boundaries) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nIf we want the boundaries for one neighborhood, we can use filter(). Let’s get the boundaries for Arroyo Seco neighborhood council. We have to use capital letters because that’s the format of the original data.\n\narroyo_seco &lt;- nc_boundaries %&gt;%\n  filter(NAME == 'ARROYO SECO NC')\n\n\nggplot() +\n  geom_sf(data=arroyo_seco) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nWe can save the boundaries for Arroyo Seco NC using st_write(). First argument is the sf object, the second argument is the path. We can save the file as a Shapefile using .shp extension, or as GeoJSON file using .geojson extension.\n\nst_write(arroyo_seco, here('data/cleaned/arroyo_seco_boundaries.geojson'))",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#los-angeles-times---la-neighborhoods",
    "href": "lessons/other-datasets.html#los-angeles-times---la-neighborhoods",
    "title": "Using to other datasets",
    "section": "Los Angeles Times - LA neighborhoods",
    "text": "Los Angeles Times - LA neighborhoods\nSome people might be interested in comparing iNaturalist data with different neighborhoods in LA county.\nLos Angeles Times Data Desk developed a map that broke down L.A. County in 272 neighborhoods. https://maps.latimes.com/about/index.html\n\nla_neighborhoods &lt;- read_sf(here('data/raw/la_times_la_county_neighborhoods.json'))\n\n\nggplot() +\n  geom_sf(data=la_neighborhoods)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-county-incorporated-and-unincorporated-boundaries",
    "href": "lessons/other-datasets.html#la-county-incorporated-and-unincorporated-boundaries",
    "title": "Using to other datasets",
    "section": "LA County incorporated and unincorporated boundaries",
    "text": "LA County incorporated and unincorporated boundaries\nSome people might be interested in comparing iNaturalist data in the incorporated and unincorporated areas of Los Angeles County.\nCity and Unincorporated Community Boundary (LA County Planning) https://geohub.lacity.org/datasets/lacounty::city-and-unincorporated-community-boundary-la-county-planning/about This layer shows all incorporated and unincorporated areas of Los Angeles County\n\nadmin_boundaries &lt;- read_sf(here('data/raw/admin_dist_SDE_DIST_DRP_CITY_COMM_BDY_-2349953032962506288/admin_dist_SDE_DIST_DRP_CITY_COMM_BDY.shp'))\n\n\nggplot() +\n  geom_sf(data=admin_boundaries)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#parks-in-la-county",
    "href": "lessons/other-datasets.html#parks-in-la-county",
    "title": "Using to other datasets",
    "section": "Parks in LA County",
    "text": "Parks in LA County\nSome people might be interested in comparing iNaturalist data with the location of parks.\nNational Park Boundaries: https://catalog.data.gov/dataset/national-park-boundaries\nCalifornia State Parks: https://www.parks.ca.gov/?page_id=29682\nCounty of Los Angeles parks: https://geohub.lacity.org/datasets/lacounty::dpr-park-facilities-view-accessible-parks/explore\nCity of Los Angeles parks: https://geohub.lacity.org/datasets/lahub::los-angeles-recreation-and-parks-boundaries/about\nLoad all the parks data.\n\nparks_national &lt;- read_sf(here('data/cleaned/nps_la_county.geojson'))\n\nparks_state &lt;- read_sf(here('data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp'))\n\nparks_county &lt;- read_sf(here('data/raw/DPR_Park_Facilities_View_(Accessible_Parks)/DPR_Park_Facilities_View_(Accessible_Parks).shp'))\n\nparks_city &lt;- read_sf(here('data/raw/Los_Angeles_Recreation_and_Parks_Boundaries/Los_Angeles_Recreation_and_Parks_Boundaries.shp'))\n\nWe want to convert the CRS of the parks data be the same\n\nparks_county &lt;- st_transform(parks_county, crs = st_crs(parks_national))\n\n\nparks_city &lt;- st_transform(parks_city, crs = st_crs(parks_national))\n\n\nparks_state &lt;- st_transform(parks_state, crs = st_crs(parks_national))\n\nCreate map with parks and iNaturalist data. Use col.region to set the color of the parks.\n\nmapview(parks_national, col.region='orange') + \n  mapview(parks_county, col.region='red') + \n  mapview(parks_city, col.region='yellow') +\n  mapview(parks_state, col.region='green')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-county-water-areas",
    "href": "lessons/other-datasets.html#la-county-water-areas",
    "title": "Using to other datasets",
    "section": "LA County water areas",
    "text": "LA County water areas\nSome people might be interested in comparing iNaturalist data with streams, rivers, lakes, ponds in LA County.\nWe got water areas using US Census TIGER/Line data.\n\nwater_areas &lt;- read_sf(here('data/cleaned/la_county_waterareas.geojson'))\n\n\nggplot() +\n  geom_sf(data=water_areas)\n\n\n\n\n\n\n\n\nWe also have a file for the LA River.\n\nla_river &lt;- read_sf(here('data/cleaned/los_angeles_river.geojson'))\n\n\nggplot() +\n  geom_sf(data=la_river)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#wildfires-in-la-county",
    "href": "lessons/other-datasets.html#wildfires-in-la-county",
    "title": "Using to other datasets",
    "section": "Wildfires in LA County",
    "text": "Wildfires in LA County\nSome people might be interested in comparing iNaturalist data with wildfires.\nCalifornia Department of Forestry and Fire Protection’s Fire and Resource Assessment Program (FRAP) keeps track wildfires in California. CAL FIRE website, CAL FIRE datasets.\nCalifornia Fire Perimeters (all): This dataset covers California wildfires from 1878 to 2023. “Although the dataset represents the most complete digital record of fire perimeters in California, it is still incomplete, and users should be cautious when drawing conclusions based on the data.”\nCAL FIRE Damage Inspection (DINS) Data: “This database represents structures impacted by wildland fire that are inside or within 100 meters of the fire perimeter.” This dataset covers 2013 to 2025.\nCA Perimeters NIFC FIRIS public view: “This public layer was created to be used by the CAL FIRE Communications Program for the CAL FIRE incident map.” This dataset covers 2024 to 2025.\nThe Wildland Fire Interagency Geospatial Services (WFIGS) Group keeps track of wildfires in the United States.\nWFIGS 2025 Interagency Fire Perimeters to Date: “Best available perimeters for all reported wildland fires in the United States in the current year to date”. This dataset covers 2025.\nWe downloaded the datasets and extracted data for the wildfires in Los Angeles County.\n\nla_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\n\nCalifornia Fire Perimeters (all) for LA county\nWildfires in LA County from 1878 to 2023.\n\nfires_all_la &lt;- read_sf(here('data/cleaned/cal_fire_los_angeles_county.geojson'))\n\ndim(fires_all_la)\n\n[1] 2619   22\n\n\n2619 wildfires\nLet’s get wildfires in the last ten years.\nThis dataset has a YEAR column. We can filter() by YEAR\n\ndecade_fires &lt;- fires_all_la %&gt;%\n  filter(YEAR_ &gt;= 2015)\n\ndim(decade_fires)\n\n[1] 264  22\n\n\n264 wildfires\n\nggplot() +\n  geom_sf(data=la_county) +\n  geom_sf(data=decade_fires, fill='yellow')\n\n\n\n\n\n\n\n\nLet’s get all wildfires for a particular location.\nWe can use st_point() to create a point using longitude and latitude. Then use st_sfc() to add geometry and CRS.\n\npoint &lt;- st_point(c(-118.809407, 34.089205))\nlocation &lt;- st_sfc(point, crs=st_crs(4326))\n\nlocation\n\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -118.8094 ymin: 34.0892 xmax: -118.8094 ymax: 34.0892\nGeodetic CRS:  WGS 84\n\n\nPOINT (-118.8094 34.0892)\n\n\n\nmapview(location) \n\n\ncheck if CRS are the same\n\nst_crs(location) == st_crs(fires_all_la)\n\n[1] FALSE\n\n\nSet CRS of the fires_all_la to match the location.\n\nfires_all_la &lt;- st_transform(fires_all_la, crs=4326)\n\nst_crs(location) == st_crs(fires_all_la)\n\n[1] TRUE\n\n\nFind the fires that intersect with the location.\n\nfires_for_location &lt;- fires_all_la[lengths(st_intersects(fires_all_la, location)) &gt; 0,]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\nfires_for_location\n\nSimple feature collection with 2 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.9975 ymin: 34.00705 xmax: -118.6479 ymax: 34.24306\nGeodetic CRS:  WGS 84\n# A tibble: 2 × 22\n  OBJECTID YEAR_ STATE AGENCY UNIT_ID FIRE_NAME  INC_NUM  ALARM_DATE CONT_DATE \n     &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;date&gt;     &lt;date&gt;    \n1     2214  2018 CA    CCO    LAC     WOOLSEY    00338981 2018-11-08 2018-11-20\n2    12425  1978 CA    CCO    LAC     KANAN FIRE 00312036 1978-10-23 NA        \n# ℹ 13 more variables: CAUSE &lt;int&gt;, C_METHOD &lt;int&gt;, OBJECTIVE &lt;int&gt;,\n#   GIS_ACRES &lt;dbl&gt;, COMMENTS &lt;chr&gt;, COMPLEX_NA &lt;chr&gt;, IRWINID &lt;chr&gt;,\n#   FIRE_NUM &lt;chr&gt;, COMPLEX_ID &lt;chr&gt;, DECADES &lt;int&gt;, Shape__Are &lt;dbl&gt;,\n#   Shape__Len &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\nmapview(fires_for_location, zcol=\"FIRE_NAME\") +\n  mapview(location) \n\n\n\n\nCAL FIRE Damage Inspection (DINS) for LA county\nStructures in LA County impacted by wildfires from 2013 to 2025.\n\nDINS_la &lt;-read_sf(here('data/cleaned/DINS_los_angeles_county.geojson'))\n\ndim(DINS_la)\n\n[1] 34266    44\n\n\n34, 266 structures were damaged in wildfire.\nLet’s get the damaged structures for 2025.\n\nrecent_DINS &lt;- DINS_la %&gt;% \n  mutate(year = year(INCIDENTST)) %&gt;%\n  filter(year == 2025)\n\ndim(recent_DINS)\n\n[1] 30493    45\n\n\n30,493 structures were damaged in 2025.\n\nggplot() +\n  geom_sf(data=la_county) +\n  geom_sf(data=recent_DINS)\n\n\n\n\n\n\n\n\n\n\nCA Perimeters NIFC FIRIS for LA county\nWildfires in LA County from 2024 to 2025.\n\nNIFC_FIRIS_la &lt;- read_sf(here('data/cleaned/NIFC_FIRIS_los_angeles_county.geojson'))\n\nggplot() +\n  geom_sf(data=la_county) +\n  geom_sf(data=NIFC_FIRIS_la, fill='yellow')\n\n\n\n\n\n\n\n\n\n\nWFIGS 2025 Interagency Fire Perimeters to Date for LA county\nWildfires in LA County in 2025.\n\nWFIGS_2025_la &lt;- read_sf(here('data/cleaned/wfigs_2025_los_angeles_county.geojson'))\n\nggplot() +\n  geom_sf(data=la_county) +\n  geom_sf(data=WFIGS_2025_la, fill='yellow')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#demographics-data",
    "href": "lessons/other-datasets.html#demographics-data",
    "title": "Using to other datasets",
    "section": "Demographics data",
    "text": "Demographics data\nSome people might be interested in comparing iNaturalist data with demographics data about people in LA County.\nL.A. County completed Comprehensive Countywide Park Needs Assessment in 2016. As part of that study, they looked at demographics data throughout the county. For more information: https://geohub.lacity.org/datasets/lacounty::l-a-county-park-needs-assessment-demographics/about\n\n\n\n\n\n\nNote\n\n\n\nA lot of demographics data from the Park Needs Assessment comes from the U.S. Census. The reason we’re using the parks data instead directly using Census data is because the Census data is more difficult to use. If you want to learn how to use U.S. Census data in R, check out the book Analyzing US Census Data: Methods, Maps, and Models in R\n\n\nWe load Park Needs Assessment data using read_sf() to read GeoJSON file. Click la_county_pna in the Environment pane to browse the data frame.\n\nla_county_pna &lt;- read_sf(here('data/cleaned/LA_County_PNA_Demographics.geojson'))\n\nThere are 96 fields in the data set. Here’s a short description of the fields.\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\nSTUD_AR_ID\nStudy Area ID\n\n\nSTUD_AR_NM\nStudy Area Name\n\n\nSTUD_AR_LBL\nLabel\n\n\nTOOLKIT_ID\nToolkit ID\n\n\nAcres\nPark Acres\n\n\nAC_PER_1K\nAcres/1000\n\n\nRepPrkAc\nAccessible Park Acres\n\n\nNEED_DESCP\nNeed Description\n\n\nPCT_Walk\nWalkable Percentage\n\n\npopulationtotals_totpop_cy\nTotal Population\n\n\nhouseholdtotals_avghhsz_cy\nAverage Household Size\n\n\nhouseholdincome_medhinc_cy\nMedian Household Income\n\n\neducationalattainment_nohs_cy\nPop Age 25+: &lt; 9th Grade\n\n\neducationalattainment_somehs_cy\nPop Age 25+: High School/No Diploma\n\n\neducationalattainment_hsgrad_cy\nPop Age 25+: High School Diploma\n\n\neducationalattainment_ged_cy\nPop Age 25+: GED\n\n\neducationalattainment_smcoll_cy\nPop Age 25+: Some College/No Degree\n\n\neducationalattainment_asscdeg_c\nPop Age 25+: Associate’s Degree\n\n\neducationalattainment_bachdeg_c\nPop Age 25+: Bachelor’s Degree\n\n\neducationalattainment_graddeg_c\nPop Age 25+: Grad/Professional Degree\n\n\neducationalattainment_educbasec\nEducational Attainment Base\n\n\nsports_mp33003a_b_i\nParticipated in baseball in last 12 months: Index\n\n\nsports_mp33004a_b_i\nParticipated in basketball in last 12 months: Index\n\n\nsports_mp33005a_b_i\nParticipated in bicycling (mountain) in last 12 mo: Index\n\n\nsports_mp33012a_b_i\nParticipated in football in last 12 months: Index\n\n\nsports_mp33014a_b_i\nParticipated in golf in last 12 months: Index\n\n\nsports_mp33015a_b_i\nParticipated in hiking in last 12 months: Index\n\n\nsports_mp33016a_b_i\nParticipated in horseback riding in last 12 months: Index\n\n\nsports_mp33020a_b_i\nParticipated in jogging/running in last 12 months: Index\n\n\nsports_mp33024a_b_i\nParticipated in soccer in last 12 months: Index\n\n\nsports_mp33025a_b_i\nParticipated in softball in last 12 months: Index\n\n\nsports_mp33026a_b_i\nParticipated in swimming in last 12 months: Index\n\n\nsports_mp33028a_b_i\nParticipated in tennis in last 12 months: Index\n\n\nsports_mp33029a_b_i\nParticipated in volleyball in last 12 months: Index\n\n\nsports_mp33030a_b_i\nParticipated in walking for exercise in last 12 mo: Index\n\n\nF5yearincrements_pop0_cy\nPopulation Age 0-4\n\n\nF5yearincrements_pop5_cy\nPopulation Age 5-9\n\n\nF5yearincrements_pop10_cy\nPopulation Age 10-14\n\n\nF5yearincrements_pop15_cy\nPopulation Age 15-19\n\n\nF5yearincrements_pop20_cy\nPopulation Age 20-24\n\n\nF5yearincrements_pop25_cy\nPopulation Age 25-29\n\n\nF5yearincrements_pop30_cy\nPopulation Age 30-34\n\n\nF5yearincrements_pop35_cy\nPopulation Age 35-39\n\n\nF5yearincrements_pop40_cy\nPopulation Age 40-44\n\n\nF5yearincrements_pop45_cy\nPopulation Age 45-49\n\n\nF5yearincrements_pop50_cy\nPopulation Age 50-54\n\n\nF5yearincrements_pop55_cy\nPopulation Age 55-59\n\n\nF5yearincrements_pop60_cy\nPopulation Age 60-64\n\n\nF5yearincrements_pop65_cy\nPopulation Age 65-69\n\n\nF5yearincrements_pop70_cy\nPopulation Age 70-74\n\n\nF5yearincrements_pop75_cy\nPopulation Age 75-79\n\n\nF5yearincrements_pop80_cy\nPopulation Age 80-84\n\n\nF5yearincrements_pop85_cy\nPopulation Age 85+\n\n\nF5yearincrements_pop18up_cy\nPopulation Age 18+\n\n\nF1yearincrements_age18_cy\nPopulation Age 18\n\n\nF1yearincrements_age19_cy\nPopulation Age 19\n\n\nMEAN_Asthma\nMEAN Asthma\n\n\nMEAN_Low_Birth_Weight\nMEAN Low_Birth_Weight\n\n\nMEAN_Cardiovascular\nMEAN Cardiovascular\n\n\nraceandhispanicorigin_hisppop_c\nHispanic Population\n\n\nraceandhispanicorigin_nonhisp_c\nNon-Hispanic Population\n\n\nraceandhispanicorigin_nhspwht_c\nNon-Hispanic White Pop\n\n\nraceandhispanicorigin_nhspblk_c\nNon-Hispanic Black Pop\n\n\nraceandhispanicorigin_nhspai_cy\nNon-Hispanic American Indian Pop\n\n\nraceandhispanicorigin_nhspasn_c\nNon-Hispanic Asian Pop\n\n\nraceandhispanicorigin_nhsppi_cy\nNon-Hispanic Pacific Islander Pop\n\n\nraceandhispanicorigin_nhspoth_c\nNon-Hispanic Other Race Pop\n\n\nraceandhispanicorigin_nhspmlt_c\nNon-Hispanic Multiple Race Pop\n\n\nAge0_17Pct\nAge 0-17 Pct\n\n\nAge18_34Pct\nAge 18-34 Pct\n\n\nAge35_54Pct\nAge 35-54 Pct\n\n\nAge55_69Pct\nAge 55-69 Pct\n\n\nAge70upPct\nAge 70+ Pct\n\n\nHispanicPct\nHispanic Pct\n\n\nWhitePct\nWhite Pct\n\n\nBlack_Pct\nBlack Pct\n\n\nAsian_Pct\nAsian Pct\n\n\nAm_Indian\nAmerican Indian Pct\n\n\nPac_Island\nPacific Islander Pct\n\n\nOther_Race\nOther Race Pct\n\n\nMulti_Race\nMultiple Race Pct\n\n\nNo_HS\nNo High School Diploma Pct\n\n\nHS_Grad\nHigh School Graduate Pct\n\n\nSome_College\nSome College Pct\n\n\nCollege\nCollege Degree Pct\n\n\nunemprt_cy\nUnemployment Rate\n\n\n\n\nHousehold Median Income\nLet’s look at the Household Median Income. We can use zcol to choose which column view to in the map. The field ‘householdincome_medhinc_cy’ refers to Household Median Income.\n\nmapview(la_county_pna, \n        zcol='householdincome_medhinc_cy')\n\n\nThere are two issues with the previous map.\n\nThe name of the layer is too long. We can rename the layer using layer.name ='New Name'. layer.name ='Avg income' sets the layer name to ‘Avg income’.\nWhen you click on region, the popup shows too many fields. Use select() to pick the columns you need, and assign the results to a new object.\n\n\nla_county_pna_map &lt;- la_county_pna %&gt;%\n  select(STUD_AR_NM, householdincome_medhinc_cy)\n\nmapview(la_county_pna_map, \n        zcol='householdincome_medhinc_cy',\n        layer.name ='Avg income')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-county-environmental-justice-screening-method",
    "href": "lessons/other-datasets.html#la-county-environmental-justice-screening-method",
    "title": "Using to other datasets",
    "section": "LA County Environmental Justice Screening Method",
    "text": "LA County Environmental Justice Screening Method\nSome people might be interested in comparing iNaturalist data with environmental factors.\nThe Environmental Justice Screening Method (EJSM) was developed for Los Angeles County by USC PERE / Occidental College for LA County’s Green Zones Program. This tool can be used to identify stationary sources of pollution and analyze cumulative environmental impacts. The overall score show the pollution impacts for each census tract. https://egis-lacounty.hub.arcgis.com/datasets/lacounty::ejsm-scores/about\n\nejsm &lt;- read_sf(here('data/raw/EJSM_Scores-shp/6cbc6914-690f-48ec-a54f-2649a8ddb321202041-1-139ir98.m1ys.shp'))\n\n\nejsm_edit &lt;- ejsm %&gt;% \n  select(CIscore, HazScore, HealthScor, SVscore, CCVscore)\n\nThere are 5 fields in the data set.\n\n\n\nCIscore\nCumulative Impact Score\n\n\nHazScore\nHazard Proximity Score\n\n\nHealthScor\nHealth Score\n\n\nSVscore\nSocial Vulnerability Score\n\n\nCCVscore\nClimate Change Vulnerability Score\n\n\n\n\nmapview(ejsm_edit, zcol='CIscore',\n        layer.name='Cumulative Impact')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#los-angeles-ecotopes",
    "href": "lessons/other-datasets.html#los-angeles-ecotopes",
    "title": "Using to other datasets",
    "section": "Los Angeles Ecotopes",
    "text": "Los Angeles Ecotopes\nLA Sanitation and Environment (LASAN) oversees the City of Los Angeles biodiversity initiative. LASAN published 2020 Biodiversity Report that outlines how to measure the health of the urban ecosystem in Los Angeles. As part of that report, they identified 17 ecological regions in LA called ecotopes. “Ecotopes are also envisioned as future management units to address biodiversity and related urban ecosystem stewardship topics of ecosystem services, pollution, and ecological hazards.”\n\necotopes &lt;- read_sf(here('data/raw/LA_Area_Ecotopes/FINAL Ecotope_Boundaries.shp'))\n\nnames(ecotopes)\n\n[1] \"ET_LndsZon\" \"ET_Type\"    \"ET_Number\"  \"geometry\"  \n\n\n\nmapview(ecotopes, zcol='ET_LndsZon')",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#la-city-indicator-species",
    "href": "lessons/other-datasets.html#la-city-indicator-species",
    "title": "Using to other datasets",
    "section": "LA city Indicator Species",
    "text": "LA city Indicator Species\nLASAN worked with the Biodiversity Expert Council to create a list of 37 biodiversity indicator species. When the species are present, it means the area has high quality habitat that can support biodiversity\nLet’s create a map of showing the observations of indicator species.\nGet all iNaturalist observations\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nUse st_as_sf() to add a geometry column so we can map the observations.\n\ninat_sf &lt;- st_as_sf(inat_data, \n                         coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nGet list of indicator species.\n\nindicator_species &lt;- read_csv(here('data/cleaned/LA_city_indicator_species.csv'))\n\nGet the column names for indicator_species.\n\nnames(indicator_species)\n\n[1] \"group\"           \"scientific name\" \"common name\"     \"taxon rank\"     \n\n\nGet the scientific names for all the indicator species.\n\nindicator_scientific_names &lt;- indicator_species$'scientific name'\n\nindicator_scientific_names\n\n [1] \"Anaxyrus boreas\"                  \"Batrachoseps nigriventris\"       \n [3] \"Pseudacris hypochondriaca\"        \"Agelaius phoeniceus\"             \n [5] \"Ardea herodias\"                   \"Bubo virginianus\"                \n [7] \"Buteo jamaicensis\"                \"Callipepla californica\"          \n [9] \"Catherpes mexicanus\"              \"Circus hudsonius\"                \n[11] \"Geococcyx californianus\"          \"Lophodytes cucullatus\"           \n[13] \"Melanerpes formicivorus\"          \"Pipilo maculatus\"                \n[15] \"Sialia mexicana\"                  \"Spatula cyanoptera\"              \n[17] \"Sturnella neglecta\"               \"Ammopelmatus sp.\"                \n[19] \"Anthocharis sara\"                 \"Apodemia virgulti\"               \n[21] \"Bombus sp.\"                       \"Callophrys dumetorum\"            \n[23] \"Euphilotes battoides ssp. allyni\" \"Limenitis lorquini\"              \n[25] \"Mutillidae\"                       \"Pogonomyrmex\"                    \n[27] \"Lynx rufus\"                       \"Neotoma macrotis\"                \n[29] \"Odocoileus hemionus\"              \"Puma concolor\"                   \n[31] \"Urocyon cinereoargenteus\"         \"Actinemys marmorata\"             \n[33] \"Masticophis flagellum\"            \"Crotalus oreganus\"               \n[35] \"Lampropeltis californiae\"         \"Pituophis catenifer\"             \n[37] \"Uta stansburiana\"                \n\n\nFind observations for indicator species by looking for scientific_name that are in the indicator_scientific_names.\n\nindicator_sf &lt;- inat_sf %&gt;%\n  filter(scientific_name %in% indicator_scientific_names) %&gt;%\n  select(scientific_name, common_name)\n\ndim(indicator_sf)\n\n[1] 3374    3\n\n\n\nmapview(indicator_sf)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other-datasets.html#calscape",
    "href": "lessons/other-datasets.html#calscape",
    "title": "Using to other datasets",
    "section": "Calscape",
    "text": "Calscape\nSome people might be interested in observations for native plants.\nCalscape is project by the California Native Plant Society that helps people find native plants in their area. We downloaded a list of native plants for Los Angeles County.\nGet all iNaturalist observations\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nUse st_as_sf() to add a geometry column so we can map the observations.\n\ninat_sf &lt;- st_as_sf(inat_data, \n                         coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nGet list of native plants.\n\ncalscape_la_county &lt;- read_csv(here(\"data/raw/calscape - Los Angeles County, CA.csv\"))\n\nRows: 1027 Columns: 50\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (41): Botanical Name, Common Name, Attracts Wildlife, Plant Type, Form, ...\ndbl  (9): Butterflies and Moths Supported, Elevation (min), Elevation (max),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnames(calscape_la_county)\n\n [1] \"Botanical Name\"                                         \n [2] \"Common Name\"                                            \n [3] \"Butterflies and Moths Supported\"                        \n [4] \"Attracts Wildlife\"                                      \n [5] \"Plant Type\"                                             \n [6] \"Form\"                                                   \n [7] \"Height\"                                                 \n [8] \"Width\"                                                  \n [9] \"Growth Rate\"                                            \n[10] \"Seasonality\"                                            \n[11] \"Flower Color\"                                           \n[12] \"Flowering Season\"                                       \n[13] \"Fragrance\"                                              \n[14] \"Sun\"                                                    \n[15] \"Soil Drainage\"                                          \n[16] \"Water Requirement\"                                      \n[17] \"Summer Irrigation\"                                      \n[18] \"Ease of Care\"                                           \n[19] \"Nursery Availability\"                                   \n[20] \"Companions\"                                             \n[21] \"Special Uses\"                                           \n[22] \"Communities (simplified)\"                               \n[23] \"Communities\"                                            \n[24] \"Hardiness\"                                              \n[25] \"Sunset Zones\"                                           \n[26] \"Soil\"                                                   \n[27] \"Soil Texture\"                                           \n[28] \"Soil pH\"                                                \n[29] \"Soil Toxicity\"                                          \n[30] \"Mulch\"                                                  \n[31] \"Site Type\"                                              \n[32] \"Elevation (min)\"                                        \n[33] \"Elevation (max)\"                                        \n[34] \"Rainfall (min)\"                                         \n[35] \"Rainfall (max)\"                                         \n[36] \"Tips\"                                                   \n[37] \"Pests\"                                                  \n[38] \"Propagation\"                                            \n[39] \"Height (min)\"                                           \n[40] \"Height (max)\"                                           \n[41] \"Width (min)\"                                            \n[42] \"Width (max)\"                                            \n[43] \"Other Names\"                                            \n[44] \"Alternative Common Names\"                               \n[45] \"Obsolete Names\"                                         \n[46] \"Rarity\"                                                 \n[47] \"Is Cultivar\"                                            \n[48] \"Jepson Link\"                                            \n[49] \"Plant Url\"                                              \n[50] \"QR Codes (change number to change image size in pixels)\"\n\n\nGet columns.\n\nnames(calscape_la_county)\n\n [1] \"Botanical Name\"                                         \n [2] \"Common Name\"                                            \n [3] \"Butterflies and Moths Supported\"                        \n [4] \"Attracts Wildlife\"                                      \n [5] \"Plant Type\"                                             \n [6] \"Form\"                                                   \n [7] \"Height\"                                                 \n [8] \"Width\"                                                  \n [9] \"Growth Rate\"                                            \n[10] \"Seasonality\"                                            \n[11] \"Flower Color\"                                           \n[12] \"Flowering Season\"                                       \n[13] \"Fragrance\"                                              \n[14] \"Sun\"                                                    \n[15] \"Soil Drainage\"                                          \n[16] \"Water Requirement\"                                      \n[17] \"Summer Irrigation\"                                      \n[18] \"Ease of Care\"                                           \n[19] \"Nursery Availability\"                                   \n[20] \"Companions\"                                             \n[21] \"Special Uses\"                                           \n[22] \"Communities (simplified)\"                               \n[23] \"Communities\"                                            \n[24] \"Hardiness\"                                              \n[25] \"Sunset Zones\"                                           \n[26] \"Soil\"                                                   \n[27] \"Soil Texture\"                                           \n[28] \"Soil pH\"                                                \n[29] \"Soil Toxicity\"                                          \n[30] \"Mulch\"                                                  \n[31] \"Site Type\"                                              \n[32] \"Elevation (min)\"                                        \n[33] \"Elevation (max)\"                                        \n[34] \"Rainfall (min)\"                                         \n[35] \"Rainfall (max)\"                                         \n[36] \"Tips\"                                                   \n[37] \"Pests\"                                                  \n[38] \"Propagation\"                                            \n[39] \"Height (min)\"                                           \n[40] \"Height (max)\"                                           \n[41] \"Width (min)\"                                            \n[42] \"Width (max)\"                                            \n[43] \"Other Names\"                                            \n[44] \"Alternative Common Names\"                               \n[45] \"Obsolete Names\"                                         \n[46] \"Rarity\"                                                 \n[47] \"Is Cultivar\"                                            \n[48] \"Jepson Link\"                                            \n[49] \"Plant Url\"                                              \n[50] \"QR Codes (change number to change image size in pixels)\"\n\n\nGet the scientific names for all the native plants.\n\nplants_scientific_names &lt;- calscape_la_county$'Botanical Name'\n\nFind observations for native plants by looking for scientific_name that are in the plants_scientific_names.\n\nnative_plants_sf &lt;- inat_sf %&gt;%\n  filter(scientific_name %in% plants_scientific_names) %&gt;%\n  select(scientific_name, common_name, establishment_means)\n\ndim(native_plants_sf)\n\n[1] 29146     4\n\n\n\nmapview(native_plants_sf)",
    "crumbs": [
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/coding-after-workshop.html",
    "href": "lessons/coding-after-workshop.html",
    "title": "Coding after the workshop",
    "section": "",
    "text": "For those who are interested in continue coding in R after the workshop, here are instructions to do so.",
    "crumbs": [
      "Extra",
      "Coding after the workshop"
    ]
  },
  {
    "objectID": "lessons/coding-after-workshop.html#accessing-your-files-after-the-workshop",
    "href": "lessons/coding-after-workshop.html#accessing-your-files-after-the-workshop",
    "title": "Coding after the workshop",
    "section": "Accessing your files after the workshop",
    "text": "Accessing your files after the workshop\nYou will have access to the Codespaces during the workshop so that you can write and run your code. About 2 weeks after the workshop, Codespaces will be turned off. You will still have access to the files in your repository, but you won’t be able use the workshop’s Codespaces to run the code.\nIn order to continuing working on your code after the workshop, you need to set up a development environment that can run R code.\n\nRunning your code on your local machine\nIf you want to run R code on your computer, you need to install RStudio, R, and R packages on your computer.\n\nComplete the steps for Setup - local page &gt; “Install R and RStudio”\nComplete steps for Setup - local page &gt; “Install R packages”\nDownload workshop repository to your computer.\n\nGo to data-explorers-feb-2025 account page, and you should see your repository. Click on your repository. The repository page will have a green “Code” button.\n\nWhen you click on “Code”, there will be a “Local” tab &gt; “Download ZIP” option. Click on “Download ZIP”. A zip file for your repository will be saved to your computer.\n\nUnzip the file. Click on workshop.Rproj file to start RStudio on your machine. Now you can continue editing and running your project code.\nWith R, RStudio, and R packages installed on your computer, you can also create new projects. Follow the instructions on Setup - local page &gt; ”Organizing your project folder” to set up new projects.\n\n\nRunning your code on Github\nCurrently, every free Github account has access to 120 core hours per month to run Codespaces. When you start a Codespace, by default it uses 2 cores. This means you can run a Codespace for 60 hours per month (120 core hours / 2 cores = 60 hours). If you choose 4 cores, you can run a Codespace for 30 hours per month (120 / 4 = 30). For more information, visit Codespaces Billing.\nYou can either continue to use your repository in data-explorers-feb-2025 or you can copy to your repository to your Github account.\n\nCopy repository to your Github account\nTo copy your repository into your Github account, go repository page. There is a “Fork” button. Creating a fork of a repository is one way to copy a repository in Github. Click the “Fork” button.\n\nClick “Create a new fork” in the popup.\n\nOn the “Create a new fork” page, fill in the repository name, optionally add a description, and click “Create fork” button.\n\n\n\n\nA copy of the repo will be added to your Github account.\n\nStart a Codespace\nWhether you use the repo in in data-explorers-feb-2025 or the repo in your Github account, the steps to start a Codespace is the same.\n\nClick the green “Code” button.\n\n\n\nClick “Codespaces” tab.\na. If there are no Codespaces for the repo, click the green “Create codespace on main” button. The browser window loads the codespace.\n\nb. If a Codespace exists for the repo, click the three dots in the “On current branch” section.\n\n\nClick “Open in Browser” in the popup window. This will restart an existing Codespace in a browser tab.",
    "crumbs": [
      "Extra",
      "Coding after the workshop"
    ]
  },
  {
    "objectID": "lessons/setup-local.html",
    "href": "lessons/setup-local.html",
    "title": "Setup - local computer",
    "section": "",
    "text": "The workshop used Github Codespaces to host the code, data, and software. If you want to install stuff on your on own computer, follow these steps.",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/setup-local.html#install-r-and-rstudio",
    "href": "lessons/setup-local.html#install-r-and-rstudio",
    "title": "Setup - local computer",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nR and RStudio are two separate pieces of software:\n\nR is a programming language and software used to run code written in R.\nRStudio is an integrated development environment (IDE) that makes using R easier. In this course we use RStudio to interact with R.\n\nIf you don’t already have R and RStudio installed, follow the instructions for your operating system below. You have to install R before you install RStudio.\n\nFor Windows\n\nDownload R from the CRAN website.\nRun the .exe file that was just downloaded\nGo to the RStudio download page\nUnder Installers select Windows Vista 10/11 - RSTUDIO-xxxx.yy.z-zzz.exe (where x = year, y = month, and z represent version numbers)\nDouble click the file to install it\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\nFor MacOS\n\nDownload R from the CRAN website.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\nGo to the RStudio download page\nUnder Installers select Mac OS 13+ - RSTUDIO-xxxx.yy.z-zzz.dmg (where x = year, y = month, and z represent version numbers)\nDouble click the file to install RStudio\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\nFor Linux\n\nDownload R from the CRAN website.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\nGo to the RStudio download page\nUnder Installers select Your Version of Linux - RSTUDIO-xxxx.yy.z-zzz.dmg (where x = year, y = month, and z represent version numbers)\nDouble click the file to install RStudio\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/setup-local.html#update-r-and-rstudio",
    "href": "lessons/setup-local.html#update-r-and-rstudio",
    "title": "Setup - local computer",
    "section": "Update R and RStudio",
    "text": "Update R and RStudio\nIf you already have R and RStudio installed, first check if your R version is up to date:\n\nWhen you open RStudio your R version will be printed in the console on the bottom left. Alternatively, you can type sessionInfo() into the console. If your R version is 4.0.0 or later, you don’t need to update R for this lesson. If your version of R is older than that, download and install the latest version of R from the R project website for Windows, for MacOS, or for Linux\nIt is not necessary to remove old versions of R from your system, but if you wish to do so you can check How do I uninstall R?\nAfter installing a new version of R, you will have to reinstall all your packages with the new version. For Windows, there is a package called installr that can help you with upgrading your R version and migrate your package library. A similar package called pacman can help with updating R packages across To update RStudio to the latest version, open RStudio and click on Help &gt; Check for Updates. If a new version is available follow the instruction on screen. By default, RStudio will also automatically notify you of new versions every once in a while.\n\n\n\n\n\n\n\nNote\n\n\n\nThe changes introduced by new R versions are usually backwards-compatible. That is, your old code should still work after updating your R version. However, if breaking changes happen, it is useful to know that you can have multiple versions of R installed in parallel and that you can switch between them in RStudio by going to Tools &gt; Global Options &gt; General &gt; Basic.\nWhile this may sound scary, it is far more common to run into issues due to using out-of-date versions of R or R packages. Keeping up with the latest versions of R, RStudio, and any packages you regularly use is a good practice.",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/setup-local.html#install-r-packages",
    "href": "lessons/setup-local.html#install-r-packages",
    "title": "Setup - local computer",
    "section": "Install R packages",
    "text": "Install R packages\nDuring the course we will need a number of R packages. Packages contain useful R code written by other people.\nTo try to install these packages, open RStudio and copy and paste the following command into the console window (look for a blinking cursor on the bottom left), then press the Enter (Windows and Linux) or Return (MacOS) to execute the command.\n\ninstall.packages(c('readr', 'dplyr', 'ggplot2', 'stringr',\n                   'lubridate', 'here',\n                   'sf', 'mapview', 'basemaps', 'tigris',\n                   'pdftools', 'webshot2'))\n\nR will display a messag in the console: “Do you want to proceed? [Y/n]:”\nType “Y”, and hit enter / return.\nR tries to download and install the packages on your machine.\nWhen the installation has finished, you can try to load the packages by pasting the following code into the console:\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(here)\nlibrary(sf)\nlibrary(mapview)\nlibrary(basemaps)\nlibrary(tigris)\nlibrary(pdftools)\nlibrary(webshot2)\n\nIf you do not see an error like there is no package called ‘...’ you are good to go!",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/setup-local.html#organizing-your-project-folder",
    "href": "lessons/setup-local.html#organizing-your-project-folder",
    "title": "Setup - local computer",
    "section": "Organizing your project folder",
    "text": "Organizing your project folder\nIt is a good practice to organize your projects into self-contained folders. Your project should start with a top-level folder that contains everything necessary for the project, including data, scripts, and results, all organized into subfolders.\n\nStart RStudio (you should see a view similar to the screenshot above).\nIn the top right, you will see a blue 3D cube and the words “Project: (None)”. Click on this icon.\nClick New Project from the dropdown menu.\nClick New Directory, then New Project.\nType out a name for the project.\nPut it in a convenient location using the “Create project as a subdirectory of:” section. We recommend your Desktop. You can always move the project somewhere else later, because it will be self-contained.\nClick Create Project and your new project will open.\n\nWhen you need to work on the project, click on the Rproj icon to start RStudio.\nThere are a few settings we will need to adjust to improve the reproducibility of our work. Go to your menu bar, then click Tools → Global Options to open up the Options window.\n\nMake sure your settings match those highlighted in yellow. We don’t want RStudio to store the current status of our R session and reload it the next time we start R. We want to start with a clean, empty R session every time we work.\nWe will use a basic structure for this workshop.\nproject_name\n│\n└── data\n│    └── cleaned\n│    └── raw\n│\n└─── results\n│\n└── scripts\n│\n└── project_name.Rproj\nLet’s start making our new folders. Go to the Files pane (bottom right), and check the current directory, highlighted in yellow below. You should be in the directory for the project you just made. You shouldn’t see any folders in here yet.\n\nNext, click the New Folder button, and type in scripts to generate your scripts folder. It should appear in the Files list now. Repeat the process to make your data, and results folders. Then, click on the data folder in the Files pane. This will take you into the data folder, which will be empty. Use the New Folder button to create raw and cleaned folders. To return to the project folder, click on it in the file path, which is highlighted in yellow in the previous image. It’s worth noting that the Files pane helps you create, find, and open files, but moving through your files won’t change where the working directory of your project is.",
    "crumbs": [
      "Extra",
      "Setup - local computer"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html",
    "href": "lessons/intro-r-rstudio.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "What is R and RStudio?\nHow do you get started working in R and RStudio?\n\n\n\n\n\nUnderstand the difference between R and RStudio.\nDescribe the purpose of the different RStudio panes.\nOrganize files and directories into R Projects.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#questions",
    "href": "lessons/intro-r-rstudio.html#questions",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "What is R and RStudio?\nHow do you get started working in R and RStudio?",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#objectives",
    "href": "lessons/intro-r-rstudio.html#objectives",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Understand the difference between R and RStudio.\nDescribe the purpose of the different RStudio panes.\nOrganize files and directories into R Projects.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#what-are-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#what-are-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "What are R and RStudio?",
    "text": "What are R and RStudio?\nR is a programming language. R is a popular language for data analysis.\nRStudio is software application that can make it easier to write and run R code.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#running-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#running-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Running R and RStudio",
    "text": "Running R and RStudio\nLet’s start R and RStudio in GitHub Codespaces.\n\nGo to data-explorers-feb-2025 on Github.\nClick on your repo.\nClick “Open in GitHub Codespaces” button.\nClick “PORTS” after the Codespace is finished building.\nHover over “RStudio”.\nClick on middle globe icon to start RStudio.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#navigating-rstudio",
    "href": "lessons/intro-r-rstudio.html#navigating-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Navigating RStudio",
    "text": "Navigating RStudio\nWe will use the RStudio integrated development environment (IDE) to write code into scripts, run code in R, navigate files on our computer, inspect objects we create in R, and look at the plots we make.\n\nIn the above screenshot, we can see 4 panes. If you only have 3 panes, and the Console pane is in the top left, press Shift+Cmd+N (Mac) or Shift+Ctrl+N (Windows) to open a blank R script, which should make the Source pane appear.\n\nTop-Left: Source pane that displays scripts and other files.\nTop-Right: Environment pane which shows all the objects in your current R session.\nBottom-Left: Console pane where you can interact directly with an R console, which interprets R commands and prints the results\nBottom-Right: Files pane displays directories and files on your computer. Plot and Viewer displays plots and other types of output. Help display help pages.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#overview-of-workshop-files",
    "href": "lessons/intro-r-rstudio.html#overview-of-workshop-files",
    "title": "Introduction to R and RStudio",
    "section": "Overview of workshop files",
    "text": "Overview of workshop files\nLet’s examine the project files using the Files pane.\nIt is a good practice to organize your projects into self-contained folders. Your project should start with a top-level folder that contains everything necessary for the project, including data, scripts, and results, all organized into subfolders.\nproject_folder\n│\n└── .devcontainer\n│\n└── .gitignore\n|\n└── data\n│    └── cleaned\n│    └── raw\n│\n└── project.Rproj\n│\n└── readme.md\n|\n└── results\n│\n└── scripts\n    └── exercises\n    └── lesson-scripts\nWe have a data folder containing cleaned and raw sub-folders. In general, you want to keep your raw data completely untouched, so once you put data into that folder, you do not modify it. Instead, you read it into R, and if you make any modifications, you write that modified file into the cleaned folder. We also have a results folder for any other documents you might produce. We also have a scripts folder to hold any scripts we write. We have a lesson-scripts subfolder that has all the code from the lesson, and a exercises subfolder for the lesson exercises.\nRStudio provides a “Projects” feature that can make it easier to work on individual projects in R. RStudio projects have a xxx.Rproj file.\nOne of the benefits to using RStudio Projects is that they automatically set the working directory to the top-level folder for the project. The working directory is the folder where R is working, so it views the location of all files (including data and scripts) as being relative to the working directory.\nSince the workshop is hosted on Github, we also have some additional files. .devcontainer has instructions on how to create Github Codespaces. .gitignore lists files and folders that Git should not track. readme.md gives a basic description of this project. Github displays the readme on the repository webpage. If you run R and RStudio on your own computer, then you don’t need these additional files.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#working-in-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#working-in-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Working in R and RStudio",
    "text": "Working in R and RStudio\n\nConsole vs. script\nProgramming is writing instructions for a computer. We refer to those instructions as code. You can run those instructions directly in the R console, or you can write them into an R script.\n\nConsole\n\nThe R console is where code is run/executed\nThe prompt, which is the &gt; symbol, is where you can type commands\nBy pressing Return (Mac) or Enter (Windows), R will execute those commands and print the result.\nWhen you write code in the R console, you will not be able to access your work in future.\n\nLet’s try running some code in the console.\nFirst, click down in the Console pane, and type:\n\n1 + 2\n\n[1] 3\n\n\nHit Return or Enter to run the code. You should see your code echoed, and then the value of 3 returned.\n\n\nScript\n\nWe can also save the code in a plain text file called scripts. For R programming language, the script files have a .R extension\nYou type out lines of R code in a script, then send them to the R console to be evaluated. There are a few ways to run the code\n\nCmd+Return (Mac) or Ctrl+Enter (Windows) will run the line of code that your cursor is on. If you highlight multiple lines of code, you can run all of them by pressing Cmd+Return (Mac) or Ctrl+Enter (Windows)\nclick on the Run button above the editor panel\n\nBy saving the code in a script, you can edit and rerun them quickly, save them for later, and share them with others\nAn additional benefit of scripts is that you can leave comments for yourself or others to read. Lines that start with # are considered comments and will not be interpreted as R code.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#first-script",
    "href": "lessons/intro-r-rstudio.html#first-script",
    "title": "Introduction to R and RStudio",
    "section": "First script",
    "text": "First script\nLet’s create our first script.\nYou can make a new R script by clicking File → New File → R Script, clicking the green + button in the top left corner of RStudio, or pressing Shift+Cmd+N (Mac) or Shift+Ctrl+N (Windows). It will be unsaved, and called “Untitled1”\n\nR as Calculator\nNow click into your blank script, and type:\n\n1 + 2\n\n[1] 3\n\n\nWith your cursor on that line, hit Cmd+Enter (Mac) or Ctrl+Enter (Windows) to run the code. You will see that your code was sent from the script to the console, where it returned a value of 3.\n\n\nSaving scripts\nSave script files by using Cmd+S (Mac) or Ctrl+S (Windows). Give the script a descriptive name such as ‘first_script.R’. Save it in the scripts folder.\nRStudio does not have an auto save. You need to manually save the files. You should save often.\nWhen you change a file, the name of the file will appear red in the tab. That means the file has unsaved changes. When you save the file, the name turns black.\n\n\nObjects and Assignment\nSometimes we want to store values in memory so we can use it later. We can save values using the assignment operator &lt;- (&lt; less than and - hyphen).\nobject_name &lt;- value\nWhen there is &lt;-, R creates an object, names the object object_name, and assigns value to the object. We use the object_name to access the value. Objects are shown in the Environment pane.\nLet’s create price1 and price2 objects and assign them some values.\n\nprice1 &lt;- 2\nprice2 &lt;- 3\n\nNow that we have the two objects saved in memory, we can do things with those objects. We can add the two prices.\n\nprice1 + price2\n\n[1] 5\n\n\nWe can reassign new values to an existing object\n\nprice1 &lt;- 10\n\nprice1 + price2\n\n[1] 13\n\n\n\n\nComparing values\nWe can do comparison of price1 and price2. The comparisons return TRUE or FALSE.\n\nprice1 == price2\n\n[1] FALSE\n\nprice1 &gt; price2\n\n[1] TRUE\n\n\nR comparison operators:\n== equal\n!= not equal\n&gt; greater than\n&gt;= greater or equal than\n&lt; less than\n&lt;= less or equal than\n\n\nNaming objects\nYou should try to use a descriptive name when naming objects to help you remember what information is contained in the object.\nObject names can contain letters, numbers, underscores and periods. They cannot start with a number nor contain spaces. If you want object names with multiple words use underscores, capital letters or periods\n\nfirst_name &lt;- 'Jane'\nfirstName &lt;- 'Jane'\nfirst.name &lt;- 'Jane'\n\n\n\nSave changes to your repository\nWe are using Github and Github Codespaces to host and run our code.\nWhen you create or edit a file, the changes are saved to Codespaces. You also need to save the changes to your repository. By saving the changes to your repository, you will have access to your files after the workshop ends.\nTerminal is a program that allows you to write commands for the computer. To access the terminal, go to first the browser tab for Codespaces. Click “bash” in the bottom right, then click the “TERMINAL” tab.\n\nClick on the $. Then type the following command after the $, and hit enter.\n\nbash  scripts/save_files.sh\n\n\nThis will run a script called “save_files.sh” to save any changes you made to the repository.\nWhen you are done coding for the day, you should run the save_files.sh script.\n\n\n\n\n\n\nNote\n\n\n\nThis script uses Git to update your repository. The script creates a git commit and pushes the commit to your repository. If you want to learn more about Git, watch this 14 minute Git tutorial.",
    "crumbs": [
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/normalizing-inat.html",
    "href": "lessons/normalizing-inat.html",
    "title": "Normalizing iNaturalist data",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\nlibrary(here)\nlibrary(sf)\nlibrary(mapview)\nlibrary(lubridate)\nlibrary(ggplot2)\nThere is a bug with sf https://github.com/r-spatial/sf/issues/1762. This bit of code is fix for the bug.\nsf_use_s2(FALSE)\n\nSpherical geometry (s2) switched off\nWhile community science data is extremely useful and allows you to answer many crucial questions within urban ecology, it has its limitations. One of the major limitations to community science data is that because it relies on public observations instead of consistent, standardized surveying, the data ends up being biased. This means that certain areas end up having more observations than others, and the number of observations changes over time. Certain species are also more likely to get detected, such as charismatic and abundant species, while others are harder to track. There are multiple ways to account for this bias, which is referred to as data normalization.\nSay you want to track species diversity over time in your neighborhood. Species diversity is one indicator of overall biodiversity health. With more diversity in the species found, the urban ecosystem of your neighborhood tends to be more resilient and stable. How do we measure this using community science data?",
    "crumbs": [
      "Normalizing iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/normalizing-inat.html#get-cnc-data",
    "href": "lessons/normalizing-inat.html#get-cnc-data",
    "title": "Normalizing iNaturalist data",
    "section": "Get CNC data",
    "text": "Get CNC data\nFirst, let’s import City Nature Challenge observations over 9 years (2016-2024) within the County of Los Angeles.\n\nallobs &lt;- read_csv(here(\"data/cleaned/cnc-los-angeles-observations.csv\"))\n\nRows: 191638 Columns: 37\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): time_observed_at, user_login, user_name, created_at, updated_at, ...\ndbl   (7): id, user_id, latitude, longitude, positional_accuracy, public_pos...\nlgl   (3): captive_cultivated, coordinates_obscured, threatened\ndate  (1): observed_on\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNext, we want to restrict our dataset to only research grade observations. These are observations that have been identified twice and are of the highest quality. Here, we select that we only want the quality_grade variable to equal “research”.\n\n\nallobs_research &lt;- allobs %&gt;%\n  filter(quality_grade==\"research\")\n\nWe then want to convert this data into points that we can use for geospatial analysis.\n\nallobs_sf &lt;- allobs_research %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)",
    "crumbs": [
      "Normalizing iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/normalizing-inat.html#get-observations-for-a-region",
    "href": "lessons/normalizing-inat.html#get-observations-for-a-region",
    "title": "Normalizing iNaturalist data",
    "section": "Get observations for a region",
    "text": "Get observations for a region\nSay you live in Hollywood. We will want to clip these observations to the boundary of your neighborhood, so the only observations we have are those found within your neighborhood. First, we’ll import the boundary for the neighborhood:\n\nhollywood_boundary &lt;- read_sf(here('data/raw/Hollywood Boundary/hollywood_boundary.shp'))\n\nWe now want to check that the coordinate reference systems (CRS) are the same between our observations and our neighborhood boundary\n\nst_crs(hollywood_boundary) == st_crs(allobs_sf)\n\n[1] FALSE\n\n\nWe get a result of “FALSE”. As such, let’s make the CRS the same between the two:\n\nhollywood_boundary &lt;- st_transform(hollywood_boundary, crs = st_crs(allobs_sf))\n\nst_crs(hollywood_boundary) == st_crs(allobs_sf)\n\n[1] TRUE\n\n\nLet’s now filter the observations to those that are only within the Hollywood boundary.\n\nneighborhood_obs &lt;- allobs_sf[lengths(st_intersects(allobs_sf, hollywood_boundary)) &gt; 0, ]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\n\nWe can now visualize the observations within a map:\n\nmapview(neighborhood_obs) +\n  mapview(hollywood_boundary)\n\n\nAs you can see, most of the observations take place in the large natural area of Griffith Park in the top right of the neighborhood. Observations being found more in one location compared to another is a frequently seen form of bias.",
    "crumbs": [
      "Normalizing iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/normalizing-inat.html#calculate-species-diversity",
    "href": "lessons/normalizing-inat.html#calculate-species-diversity",
    "title": "Normalizing iNaturalist data",
    "section": "Calculate species diversity",
    "text": "Calculate species diversity\nWe now need to determine how we calculate species diversity. There are multiple ways to do this, but because of the bias in community science data, we need to be careful on how to best do so. We want to maximize the likelihood that a species, if it is present in your neighborhood, is observed. To do this, we can do what is referred to as “thinning” the data, which is where we cap the maximum number of observations of a species. Instead of keeping every single observation, we can instead look for if a species has been observed at least once over an entire year. If it is observed at least once, we can count the species as present. Using this presence data, we can calculate species richness, which is the total number of unique species that are found within an area. Calculating species richness is a way to account for bias in community science observations through thinning the data.\nAdditionally, because the number of observations changes over time, we need to account for this variation. One way to do this is to take a subset or a smaller portion of the observations for each year, so that each year has the same number of observations when calculating species richness. \nFirst, we need to create a column in our dataset that says the year using mutate() and year().\n\nneighborhood_obs &lt;- neighborhood_obs %&gt;%\n  mutate(year = year(observed_on))\n\nNext, we need to determine the year that has the lowest number of observations. We can do this by calculating the number of observations for each year.\n\ntable(neighborhood_obs$year)\n\n\n2016 2017 2018 2019 2020 2021 2022 2023 2024 \n 401  238  838 1065  388  501  652  547  386 \n\n\nLet’s now calculate the minimum of these observations.\n\nlowest_year &lt;- min(table(neighborhood_obs$year))\n\nlowest_year\n\n[1] 238\n\n\nThen when calculating species richness for each year, we can use a random subset in order to account for this bias, making it so we have lowest_year number of observations for each year.\nWe use group_by() to group the observations by year, and slice_sample() to randomly pick lowest_year number of observations per year. It’s also crucial that we set replace to FALSE. This ensures that we don’t duplicate observations.\n\nrandom_obs_per_year &lt;- neighborhood_obs %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(year) %&gt;%\n  slice_sample(n = lowest_year, replace=FALSE) %&gt;%\n  select(year, scientific_name)\n\nhead(random_obs_per_year)\n\n# A tibble: 6 × 2\n# Groups:   year [1]\n   year scientific_name        \n  &lt;dbl&gt; &lt;chr&gt;                  \n1  2016 Cotula australis       \n2  2016 Encelia californica    \n3  2016 Cornu aspersum         \n4  2016 Brickellia californica \n5  2016 Adenostoma fasciculatum\n6  2016 Ricinus communis       \n\n\nWe can use table to confirm we get lowest_year number of observations per year.\n\ntable(random_obs_per_year$year)\n\n\n2016 2017 2018 2019 2020 2021 2022 2023 2024 \n 238  238  238  238  238  238  238  238  238 \n\n\nNow that we have our subsets, we need to thin the data so that each species only has one observation maximum per year. We can do this with the distinct() function.\n\nunique_species_per_year &lt;- distinct(random_obs_per_year) \n\nWe use count() to count the number of species per year.\n\nrichness_dataframe &lt;- unique_species_per_year %&gt;%\n  count(year, name='richness')\n\nrichness_dataframe\n\n# A tibble: 9 × 2\n# Groups:   year [9]\n   year richness\n  &lt;dbl&gt;    &lt;int&gt;\n1  2016      133\n2  2017      127\n3  2018      126\n4  2019      124\n5  2020      120\n6  2021      118\n7  2022      143\n8  2023      133\n9  2024      118\n\n\nNext, we can create a chart and visualize the results. Here, we use commands for how the plot looks similar to other plots we’ve created previously.\n\nggplot(data = richness_dataframe, mapping = aes(x=year, y=richness)) +\n  geom_line() +\n  geom_point() +\n  theme_bw() +\n  theme(axis.title = element_text(size =14),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank()) +\n  labs(title = \"Species Richness Over Time in Hollywood\",\n       x = \"Year\",\n       y = \"Species Richness\")\n\n\n\n\n\n\n\n\nAs you can see for this neighborhood, species richness has varied over time. Most of this variation is likely explained by needing more observations to better ensure that if a species is present, it can be detected. This can be done through expanding the data used to all iNaturalist observations beyond the City Nature Challenge and to continue participating in community science efforts. Additionally, there are many other indicators of ecosystem health. For example, an increase in species richness may be due to the introduction of new invasive species. Random chance when we created the subsets could also potentially skew our results, so species richness can also be measured in other, more complex ways. In order to get a better overall picture, other metrics can be explored as well. It’s also generally a good idea to look over a longer time period in order to detect trends in urban ecology, although we kept it to 9 years for this exercise. Additionally, the code can be further streamlined with the use of other coding skills, like loops. We encourage you to continue to practice and learn more about urban ecology and coding to answer some of these questions!",
    "crumbs": [
      "Normalizing iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/normalizing-inat.html#exercise-1",
    "href": "lessons/normalizing-inat.html#exercise-1",
    "title": "Normalizing iNaturalist data",
    "section": "Exercise 1",
    "text": "Exercise 1\nUtilize the above code to visualize how species richness changes over time in an area of your choosing. Choose the area and follow the steps above to normalize the data and create your own line plot showing species richness over time.",
    "crumbs": [
      "Normalizing iNaturalist data"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "After iNaturalist - Learn How To Explore City Nature Challenge Data through R Coding",
    "section": "",
    "text": "Put your nature eyes on in a whole new way in this introductory workshop to R coding! Learn how to explore nature in L.A. using biodiversity data collected during nine years of the City Nature Challenge. No previous coding experience necessary!\nProgram content will consist of a virtual information session, two in-person workshops, and two optional virtual office hours. The first in-person workshop will include a high-level overview of R and how to run sample scripts. There will be a three-week break between sessions for you to practice swapping out variables and develop a short presentation.\nSchedule\n\nJan. 16, 2025, 6–7 pm: VIRTUAL Information Session (recording will be available)\nFeb. 1, 2025, 9 am–3:30 pm: IN-PERSON Session with 30-minute Lunch Break at the Natural History Museum of Los Angeles County\nTHREE-WEEK BREAK to Practice R and Develop a Short Presentation of Your Script\nFeb. 8, 2025, 10–11 am: VIRTUAL Office Hour and Q&A (Optional)\nFeb. 15, 2025, 10–11 am: VIRTUAL Office Hour and Q&A (Optional)\nFeb. 22, 2025, 9 am–12 pm:  IN-PERSON Session and Participant Presentations  at the Natural History Museum of Los Angeles County\n\nThese lesson are based on several Carpentries R lessons: Data Analysis and Visualization in R for Ecologists, Geospatial, and Social Science.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "After iNaturalist - Learn How To Explore City Nature Challenge Data through R Coding",
    "section": "",
    "text": "Lesson for Natural History Museum of Los Angeles County, After iNaturalist workshop.\nPut your nature eyes on in a whole new way in this introductory workshop to R coding! Learn how to explore nature in L.A. using biodiversity data collected during nine years of the City Nature Challenge.\nOnline lesson, lesson repo\n\n\nThese lesson are based on several Carpentries R lessons: Data Analysis and Visualization in R for Ecologists, Geospatial, and Social Science.\nThe lessons are built using Quarto."
  },
  {
    "objectID": "readme.html#details",
    "href": "readme.html#details",
    "title": "After iNaturalist - Learn How To Explore City Nature Challenge Data through R Coding",
    "section": "",
    "text": "These lesson are based on several Carpentries R lessons: Data Analysis and Visualization in R for Ecologists, Geospatial, and Social Science.\nThe lessons are built using Quarto."
  },
  {
    "objectID": "lessons/understanding-data.html",
    "href": "lessons/understanding-data.html",
    "title": "Understanding data",
    "section": "",
    "text": "How does R store and represent data?\n\n\n\n\n\nUnderstand data types and missing values\nLearn about data structures vectors and data.frame\nWe started the previous lessons with read_csv(). To better understand the data returned by read_csv(), we will learn how R represents and stores data.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(here) # file paths\nlibrary(tibble) # tibbles are updated version of dataframes\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\nLet’s look at the data information returned by glimpse().\nglimpse(inat_data)\n\nRows: 191,638\nColumns: 37\n$ id                         &lt;dbl&gt; 2931940, 2934641, 2934961, 2934980, 2934994…\n$ observed_on                &lt;date&gt; 2016-04-14, 2016-04-14, 2016-04-14, 2016-0…\n$ time_observed_at           &lt;chr&gt; \"2016-04-14 19:25:00 UTC\", \"2016-04-14 19:0…\n$ user_id                    &lt;dbl&gt; 151043, 10814, 80445, 80445, 80445, 121033,…\n$ user_login                 &lt;chr&gt; \"msmorales\", \"smartrf\", \"cdegroof\", \"cdegro…\n$ user_name                  &lt;chr&gt; \"Michael Morales\", \"Richard Smart (he, him)…\n$ created_at                 &lt;chr&gt; \"2016-04-14 07:28:36 UTC\", \"2016-04-14 19:0…\n$ updated_at                 &lt;chr&gt; \"2021-12-26 06:58:04 UTC\", \"2018-05-28 02:0…\n$ quality_grade              &lt;chr&gt; \"research\", \"needs_id\", \"research\", \"resear…\n$ license                    &lt;chr&gt; \"CC-BY\", \"CC-BY-NC\", NA, NA, NA, \"CC-BY-NC\"…\n$ url                        &lt;chr&gt; \"http://www.inaturalist.org/observations/29…\n$ image_url                  &lt;chr&gt; \"https://inaturalist-open-data.s3.amazonaws…\n$ sound_url                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ tag_list                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ description                &lt;chr&gt; \"Spotted on a the wall of a planter, while …\n$ captive_cultivated         &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ latitude                   &lt;dbl&gt; 34.05829, 34.01742, 34.13020, 34.13143, 34.…\n$ longitude                  &lt;dbl&gt; -117.8219, -118.2892, -118.8226, -118.8215,…\n$ positional_accuracy        &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ public_positional_accuracy &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ geoprivacy                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ taxon_geoprivacy           &lt;chr&gt; NA, NA, NA, \"open\", \"open\", NA, \"open\", NA,…\n$ coordinates_obscured       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ scientific_name            &lt;chr&gt; \"Cornu aspersum\", \"Oestroidea\", \"Arphia ram…\n$ common_name                &lt;chr&gt; \"Garden Snail\", \"Bot Flies, Blow Flies, and…\n$ iconic_taxon_name          &lt;chr&gt; \"Mollusca\", \"Insecta\", \"Insecta\", \"Reptilia…\n$ taxon_id                   &lt;dbl&gt; 480298, 356157, 54247, 36100, 36204, 69731,…\n$ taxon_kingdom_name         &lt;chr&gt; \"Animalia\", \"Animalia\", \"Animalia\", \"Animal…\n$ taxon_phylum_name          &lt;chr&gt; \"Mollusca\", \"Arthropoda\", \"Arthropoda\", \"Ch…\n$ taxon_class_name           &lt;chr&gt; \"Gastropoda\", \"Insecta\", \"Insecta\", \"Reptil…\n$ taxon_order_name           &lt;chr&gt; \"Stylommatophora\", \"Diptera\", \"Orthoptera\",…\n$ taxon_family_name          &lt;chr&gt; \"Helicidae\", NA, \"Acrididae\", \"Phrynosomati…\n$ taxon_genus_name           &lt;chr&gt; \"Cornu\", NA, \"Arphia\", \"Uta\", \"Sceloporus\",…\n$ taxon_species_name         &lt;chr&gt; \"Cornu aspersum\", NA, \"Arphia ramona\", \"Uta…\n$ taxon_subspecies_name      &lt;chr&gt; NA, NA, NA, \"Uta stansburiana elegans\", NA,…\n$ threatened                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ establishment_means        &lt;chr&gt; \"introduced\", NA, \"native\", \"native\", \"nati…",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#questions",
    "href": "lessons/understanding-data.html#questions",
    "title": "Understanding data",
    "section": "",
    "text": "How does R store and represent data?",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#objectives",
    "href": "lessons/understanding-data.html#objectives",
    "title": "Understanding data",
    "section": "",
    "text": "Understand data types and missing values\nLearn about data structures vectors and data.frame",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#data-types",
    "href": "lessons/understanding-data.html#data-types",
    "title": "Understanding data",
    "section": "Data Types",
    "text": "Data Types\nglimpse() shows &lt;dbl&gt; &lt;date&gt; &lt;chr&gt; &lt;lgl&gt;. Those are data types.\nIn computer programming, data type is a way to group data values. Every value has a data type. An analogy is human languages have numbers and words. A value’s data type will determine what the programming language can do with the value. For instance, in R we can add numbers but we can’t add words.\nAdding numbers if fine.\n\n1 + 2\n\n[1] 3\n\n\nAdding words causes an error.\n\n\"cat\" + \"dogs\"\n\nThere are 4 main types in R: numeric, integer, logical, and character.\n\nnumeric are numbers that contain a decimal (e.g. 1.2, 10.5). By default, R also treats whole numbers as decimals (e.g. 1, 10).\ninteger are whole numbers that do not have a decimal point. (e.g. 1L, 10L). In R, the L suffix forces the number to be an integer, since by default R uses decimal numbers.\nlogical have values of TRUE or FALSE.\ncharacter are strings of characters (e.g. “abc”, ‘dog’). Characters are mainly letters and punctuation. Numbers combined with letters are treated as characters such as ‘1apple’. Strings must be surrounded by quotes, either single quotes or double quotes.",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#data-structures",
    "href": "lessons/understanding-data.html#data-structures",
    "title": "Understanding data",
    "section": "Data Structures",
    "text": "Data Structures\nA data structure is a way to organize and store a collection of values.\n\nVectors\nA vector is data structure in R that has series of values. All the value in the vector must be the same data type.\nTo create a vector we use the c() combine function, and pass in the values as arguments.\nWe can use class() function to find the type or class of any object.\nnumeric vector\n\nnumbers &lt;- c(1, 2, 5)\nnumbers\n\n[1] 1 2 5\n\nclass(numbers)\n\n[1] \"numeric\"\n\n\ncharacter vector\n\ncharacters &lt;- c(\"apple\", 'pear', \"grape\")\ncharacters\n\n[1] \"apple\" \"pear\"  \"grape\"\n\nclass(characters)\n\n[1] \"character\"\n\n\nlogical vector\n\nlogicals &lt;- c(TRUE, FALSE, TRUE)\nlogicals\n\n[1]  TRUE FALSE  TRUE\n\nclass(logicals)\n\n[1] \"logical\"\n\n\nIf you try to put values of different data types into a vector, all the values are converted to the same data type. In the following example, everything is converted to character type.\n\nmixed &lt;- c(1, \"apple\", TRUE)\nmixed\n\n[1] \"1\"     \"apple\" \"TRUE\" \n\nclass(mixed)\n\n[1] \"character\"\n\n\n\n\ndata.frame\ndata.frame is a data structure from R that is used to represent tabular data with rows and columns. Each column in a data.frame is a vector. Because each column is a vector, all the values in a column must be of the same data type.\nWe can create a data.frame using the previous vectors using data.frame(). For each column, we give the column a name and a vector.\n\ndf &lt;- data.frame(Numbers = numbers, Characters = characters)\ndf\n\n  Numbers Characters\n1       1      apple\n2       2       pear\n3       5      grape\n\n\nWhen we call class() on a data.frame, it returns “data.frame”\n\nclass(df)\n\n[1] \"data.frame\"\n\n\nTibble is an updated version of data.frame from the tibble package.\nWe can create a tibble using the previous vectors using tibble().\n\ntb &lt;- tibble(Numbers = numbers, Characters = characters)\ntb\n\n# A tibble: 3 × 2\n  Numbers Characters\n    &lt;dbl&gt; &lt;chr&gt;     \n1       1 apple     \n2       2 pear      \n3       5 grape     \n\n\nWhen we call class() on a tibble, it returns “tbl_df” (tibble data.frame), “tbl” (tibble), and “data.frame”.\n\nclass(tb)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nreadr returns results as special type of tibble. When we call class() with inat_data, it returns “spec_tbl_df” (specification tibble data.frame), “tbl_df”, “tbl”, and “data.frame”.\n\nclass(inat_data)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\nWhen readr loads a CSV, it tries to figure the data type for each column. For inat_data, id is numeric, captive_cultivated is logical, user_login is character. Multiple columns have NA such as license and sound_url.\nreadr has a special data type date that is used to represent dates. Column observed_on is date. Other columns are such as time_observed_at are treated as character because those strings have extra information that readr does not recognize as a date.",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/understanding-data.html#missing-data",
    "href": "lessons/understanding-data.html#missing-data",
    "title": "Understanding data",
    "section": "Missing data",
    "text": "Missing data\nIn tabular data, there are times when a record does not have a value for a particular field. In spreadsheet programs, when there is no value, cells are left blank. R represents missing values as NA, without quotes. NA stands for not applicable.\nNA is allowed in vectors of any data type.\n\nnumbers &lt;- c(1, 2, NA)\nnumbers\n\n[1]  1  2 NA\n\nclass(numbers)\n\n[1] \"numeric\"\n\n\nWhen you pass number vectors with NA to a math function like min() , the function returns NA. min() returns the smallest number in a vector.\n\nmin(numbers)\n\n[1] NA\n\n\nMany math functions have an argument na.rm to remove NA values for its calculations.\n\nmin(numbers,  na.rm = TRUE)\n\n[1] 1",
    "crumbs": [
      "Understanding data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html",
    "href": "lessons/working-with-data.html",
    "title": "Working with data",
    "section": "",
    "text": "How do you work with iNaturalist CSV data in R?\n\n\n\n\n\nImport CSV data into R.\nSelect rows and columns of data.frames.\nUse pipes to link steps together into pipelines.\nCreate new data.frame columns using existing columns.\nExport data to a CSV file.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#questions",
    "href": "lessons/working-with-data.html#questions",
    "title": "Working with data",
    "section": "",
    "text": "How do you work with iNaturalist CSV data in R?",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#objectives",
    "href": "lessons/working-with-data.html#objectives",
    "title": "Working with data",
    "section": "",
    "text": "Import CSV data into R.\nSelect rows and columns of data.frames.\nUse pipes to link steps together into pipelines.\nCreate new data.frame columns using existing columns.\nExport data to a CSV file.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exploring-inaturalist-data",
    "href": "lessons/working-with-data.html#exploring-inaturalist-data",
    "title": "Working with data",
    "section": "Exploring iNaturalist data",
    "text": "Exploring iNaturalist data\nA CSV of iNaturalist observations for City Nature Challenge Los Angeles from 2015 to 2024 is located at “data/cleaned/cnc-los-angeles-observations.csv”. We are going to read that CSV using R.\n\nFunctions\nFunctions are predefined bits of code that do a specific task. Arguments are values that we pass into a function. Function usually takes one or more arguments as input, does something to the values, and produces the ouput.\n\n\nR packages\nR itself has many built-in functions, but we can access many more by installing and loading other packages of functions and data into R. We will use several R packages for the workshop.\nTo install these packages, use install.packages() function from R. We pass in the package names as arguments. The name of the packages must be in quotes.\ninstall.packages(\"readr\")\nR will connect to the internet and download packages from servers that have R packages. R will then install the packages on your computer. The console window will show you the progress of the installation process.\nTo save time, we have already installed all the packages we need for the workshop.\nIn order to use a package, use library() function from R to load the package. We pass in the name of the package as an argument. Do not use quotes around the package name when using library().\nlibrary(readr)\n\n\nReading a CSV file\nIn order to analyze the iNaturalist csv, we need to load readr, lubridate, dplyr, and here packages.\nGenerally it is a good idea to list all the libraries that you will use in the script at the beginning of the script. You want to install a package to your computer once, and then load it with library() in each script where you need to use it.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths\nlibrary(stringr) # work with string\n\n\n\n\n\n\n\nFile paths\n\n\n\nWhen we reference other files from an R script, we need to give R precise instructions on where those files are. We do that using something called a file path.\nThere are two kinds of paths: absolute and relative. Absolute paths are specific to a particular computer, whereas relative paths are relative to a certain folder. Because we are using RStudio “project” feature, all of our paths is relative to the project folder. For instance an absolute path is “/Users/username/Documents/CNC-coding-workshop/data/cleaned/cnc-los-angeles-observations.csv”, and relative path is “data/cleaned/cnc-los-angeles-observations.csv”.\nhere is an R package that makes it easier to handle file paths.\n\n\nWe call read_csv() function from readr, and pass in a relative path to a CSV file in order to load the CSV.\nread_csv() will read the file and return the content of the file as data.frame. data.frame is how R handles data with rows and columns. In order for us access the content later on, we will assign the content to an object called inat_data.\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nWe can use the glimpse() function from dplyr get a summary about the contents of inat_data. It shows the number of rows and columns. For each column, it shows the name, data type (dbl, chr, lgl, date), and the first few values.\n\nglimpse(inat_data)\n\nRows: 191,638\nColumns: 37\n$ id                         &lt;dbl&gt; 2931940, 2934641, 2934961, 2934980, 2934994…\n$ observed_on                &lt;date&gt; 2016-04-14, 2016-04-14, 2016-04-14, 2016-0…\n$ time_observed_at           &lt;chr&gt; \"2016-04-14 19:25:00 UTC\", \"2016-04-14 19:0…\n$ user_id                    &lt;dbl&gt; 151043, 10814, 80445, 80445, 80445, 121033,…\n$ user_login                 &lt;chr&gt; \"msmorales\", \"smartrf\", \"cdegroof\", \"cdegro…\n$ user_name                  &lt;chr&gt; \"Michael Morales\", \"Richard Smart (he, him)…\n$ created_at                 &lt;chr&gt; \"2016-04-14 07:28:36 UTC\", \"2016-04-14 19:0…\n$ updated_at                 &lt;chr&gt; \"2021-12-26 06:58:04 UTC\", \"2018-05-28 02:0…\n$ quality_grade              &lt;chr&gt; \"research\", \"needs_id\", \"research\", \"resear…\n$ license                    &lt;chr&gt; \"CC-BY\", \"CC-BY-NC\", NA, NA, NA, \"CC-BY-NC\"…\n$ url                        &lt;chr&gt; \"http://www.inaturalist.org/observations/29…\n$ image_url                  &lt;chr&gt; \"https://inaturalist-open-data.s3.amazonaws…\n$ sound_url                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ tag_list                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ description                &lt;chr&gt; \"Spotted on a the wall of a planter, while …\n$ captive_cultivated         &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ latitude                   &lt;dbl&gt; 34.05829, 34.01742, 34.13020, 34.13143, 34.…\n$ longitude                  &lt;dbl&gt; -117.8219, -118.2892, -118.8226, -118.8215,…\n$ positional_accuracy        &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ public_positional_accuracy &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ geoprivacy                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ taxon_geoprivacy           &lt;chr&gt; NA, NA, NA, \"open\", \"open\", NA, \"open\", NA,…\n$ coordinates_obscured       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ scientific_name            &lt;chr&gt; \"Cornu aspersum\", \"Oestroidea\", \"Arphia ram…\n$ common_name                &lt;chr&gt; \"Garden Snail\", \"Bot Flies, Blow Flies, and…\n$ iconic_taxon_name          &lt;chr&gt; \"Mollusca\", \"Insecta\", \"Insecta\", \"Reptilia…\n$ taxon_id                   &lt;dbl&gt; 480298, 356157, 54247, 36100, 36204, 69731,…\n$ taxon_kingdom_name         &lt;chr&gt; \"Animalia\", \"Animalia\", \"Animalia\", \"Animal…\n$ taxon_phylum_name          &lt;chr&gt; \"Mollusca\", \"Arthropoda\", \"Arthropoda\", \"Ch…\n$ taxon_class_name           &lt;chr&gt; \"Gastropoda\", \"Insecta\", \"Insecta\", \"Reptil…\n$ taxon_order_name           &lt;chr&gt; \"Stylommatophora\", \"Diptera\", \"Orthoptera\",…\n$ taxon_family_name          &lt;chr&gt; \"Helicidae\", NA, \"Acrididae\", \"Phrynosomati…\n$ taxon_genus_name           &lt;chr&gt; \"Cornu\", NA, \"Arphia\", \"Uta\", \"Sceloporus\",…\n$ taxon_species_name         &lt;chr&gt; \"Cornu aspersum\", NA, \"Arphia ramona\", \"Uta…\n$ taxon_subspecies_name      &lt;chr&gt; NA, NA, NA, \"Uta stansburiana elegans\", NA,…\n$ threatened                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ establishment_means        &lt;chr&gt; \"introduced\", NA, \"native\", \"native\", \"nati…\n\n\nWe can view the first six rows with the head() function, and the last six rows with the tail() function:\n\nhead(inat_data)\n\n# A tibble: 6 × 37\n       id observed_on time_observed_at   user_id user_login user_name created_at\n    &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n1 2931940 2016-04-14  2016-04-14 19:25:…  151043 msmorales  Michael … 2016-04-1…\n2 2934641 2016-04-14  2016-04-14 19:02:…   10814 smartrf    Richard … 2016-04-1…\n3 2934961 2016-04-14  2016-04-14 19:15:…   80445 cdegroof   Chris De… 2016-04-1…\n4 2934980 2016-04-14  2016-04-14 19:18:…   80445 cdegroof   Chris De… 2016-04-1…\n5 2934994 2016-04-14  2016-04-14 19:19:…   80445 cdegroof   Chris De… 2016-04-1…\n6 2935037 2016-04-14  2016-04-14 19:36:…  121033 ttempel    &lt;NA&gt;      2016-04-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\n\ntail(inat_data)\n\n# A tibble: 6 × 37\n         id observed_on time_observed_at user_id user_login user_name created_at\n      &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n1 254128969 2024-04-28  2024-04-28 17:1… 2834615 thannavic… Thanna V… 2024-12-0…\n2 255041807 2024-04-26  2024-04-26 23:3… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n3 255041881 2024-04-26  2024-04-26 22:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n4 255041985 2024-04-26  2024-04-26 22:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n5 255042063 2024-04-26  2024-04-26 20:4… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n6 255042124 2024-04-26  2024-04-26 19:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\nYou can use View() function from R to open an interactive viewer, which behaves like a simplified version of a spreadsheet program. If you hover over the tab for the interactive View(), you can click the “x” that appears, which will close the tab.\n\nView(inat_data)\n\nYou can use names() from R to see the fields in the data frame.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\nWe can use dim() dimension function from R to get the dimension of a data frame. It returns the number of rows and number of columns.\n\ndim(inat_data)\n\n[1] 191638     37\n\n\ninat_data has over 193K rows and 37 columns.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#more-about-functions",
    "href": "lessons/working-with-data.html#more-about-functions",
    "title": "Working with data",
    "section": "More about functions",
    "text": "More about functions\nTo learn more about a function, you can type a ? in front of the name of the function, which will bring up the official documentation for that function:\n\n?head\n\nFunction documentation is written by the authors of the functions, so they can vary pretty widely in their style and readability. The first section, Description, gives you a concise description of what the function does, but it may not always be enough. The Arguments section defines all the arguments for the function and is usually worth reading thoroughly. Finally, the Examples section at the end will often have some helpful examples that you can run to get a sense of what the function is doing.\nThe help Arguments section for head() shows four arguments. The first argument x is required, the rest are optional. For example, the n argument in head() specifies the number of rows to print. It defaults to 6, but we can override that by specifying a different number:\n\nhead(x = inat_data, n = 10)\n\n# A tibble: 10 × 37\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2931940 2016-04-14  2016-04-14 19:25…  151043 msmorales  Michael … 2016-04-1…\n 2 2934641 2016-04-14  2016-04-14 19:02…   10814 smartrf    Richard … 2016-04-1…\n 3 2934961 2016-04-14  2016-04-14 19:15…   80445 cdegroof   Chris De… 2016-04-1…\n 4 2934980 2016-04-14  2016-04-14 19:18…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 6 2935037 2016-04-14  2016-04-14 19:36…  121033 ttempel    &lt;NA&gt;      2016-04-1…\n 7 2935117 2016-04-15  &lt;NA&gt;                76855 bradrumble &lt;NA&gt;      2016-04-1…\n 8 2935139 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 9 2935176 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n10 2935181 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\nIf we order the argument the same order they are listed in help Arguments section, we don’t have to name them:\n\nhead(inat_data, 10)\n\n# A tibble: 10 × 37\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2931940 2016-04-14  2016-04-14 19:25…  151043 msmorales  Michael … 2016-04-1…\n 2 2934641 2016-04-14  2016-04-14 19:02…   10814 smartrf    Richard … 2016-04-1…\n 3 2934961 2016-04-14  2016-04-14 19:15…   80445 cdegroof   Chris De… 2016-04-1…\n 4 2934980 2016-04-14  2016-04-14 19:18…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 6 2935037 2016-04-14  2016-04-14 19:36…  121033 ttempel    &lt;NA&gt;      2016-04-1…\n 7 2935117 2016-04-15  &lt;NA&gt;                76855 bradrumble &lt;NA&gt;      2016-04-1…\n 8 2935139 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 9 2935176 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n10 2935181 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\nAdditionally, if we name them, we can put them in any order we want:\n\nhead(n = 10, x = inat_data)\n\n# A tibble: 10 × 37\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2931940 2016-04-14  2016-04-14 19:25…  151043 msmorales  Michael … 2016-04-1…\n 2 2934641 2016-04-14  2016-04-14 19:02…   10814 smartrf    Richard … 2016-04-1…\n 3 2934961 2016-04-14  2016-04-14 19:15…   80445 cdegroof   Chris De… 2016-04-1…\n 4 2934980 2016-04-14  2016-04-14 19:18…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 6 2935037 2016-04-14  2016-04-14 19:36…  121033 ttempel    &lt;NA&gt;      2016-04-1…\n 7 2935117 2016-04-15  &lt;NA&gt;                76855 bradrumble &lt;NA&gt;      2016-04-1…\n 8 2935139 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 9 2935176 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n10 2935181 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#manipulating-data",
    "href": "lessons/working-with-data.html#manipulating-data",
    "title": "Working with data",
    "section": "Manipulating data",
    "text": "Manipulating data\nOne of the most important skills for working with data in R is the ability to manipulate, modify, and reshape data. The dplyr package provide a series of powerful functions for many common data manipulation tasks.\n\nselect()\nThe select() function is used to select certain columns of a data frame. The first argument is the data frame, and the rest of the arguments are unquoted names of the columns you want.\nOur inat_data data frame has 37 columns. We want four columns: user_login, common_name, scientific_name, observed_on.\n\nselect(inat_data, user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 191,638 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 smartrf       Bot Flies, Blow Flies, and Allies   Oestroidea      2016-04-14 \n 3 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 4 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 5 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 ttempel       &lt;NA&gt;                                Coelocnemis     2016-04-14 \n 7 bradrumble    House Sparrow                       Passer domesti… 2016-04-15 \n 8 deedeeflower5 Amur Carp                           Cyprinus rubro… 2016-04-14 \n 9 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n10 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n# ℹ 191,628 more rows\n\n\nselect() creates a new data frame with 193K rows, and 4 columns.\n\n\nfilter()\nThe filter() function is used to select rows that match certain criteria. The first argument is the name of the data frame, and the second argument is the selection criteria.\n\nselect observations by common_name\nLet’s find all the observations for ‘Western Fence Lizard’, the most popular species in CNC Los Angeles. We want all the rows where common_name is equal to ‘Western Fence Lizard’. Use == to test for equality.\n\nfilter(inat_data, common_name == 'Western Fence Lizard')\n\n# A tibble: 3,339 × 37\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 2 2935263 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 3 2935420 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 4 2935748 2016-04-14  2016-04-14 21:01…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2935965 2016-04-14  2016-04-14 19:44…  171443 lchroman   &lt;NA&gt;      2016-04-1…\n 6 2938607 2016-04-14  2016-04-14 23:33…  146517 maiz       &lt;NA&gt;      2016-04-1…\n 7 2940103 2016-04-15  2016-04-15 16:31…   80984 kimssight  Kim Moore 2016-04-1…\n 8 2940838 2016-04-15  2016-04-15 17:11…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n 9 2940848 2016-04-15  2016-04-15 17:17…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n10 2940855 2016-04-15  2016-04-15 17:42…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n# ℹ 3,329 more rows\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nfilter() creates a new data frame with 3,339 rows, and 37 columns.\nKeep in mind that species can have zero to multiple common names. If you use want to search by common name, you need to use the exact common name that iNaturalist uses.\n\n\nselect observations by scientific_name\nLet’s find all the observations for ‘Sceloporus occidentalis’, the Latin scientific name for ‘Western Fence Lizard’.\n\nfilter(inat_data, scientific_name == 'Sceloporus occidentalis')\n\n# A tibble: 3,339 × 37\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 2 2935263 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 3 2935420 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 4 2935748 2016-04-14  2016-04-14 21:01…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2935965 2016-04-14  2016-04-14 19:44…  171443 lchroman   &lt;NA&gt;      2016-04-1…\n 6 2938607 2016-04-14  2016-04-14 23:33…  146517 maiz       &lt;NA&gt;      2016-04-1…\n 7 2940103 2016-04-15  2016-04-15 16:31…   80984 kimssight  Kim Moore 2016-04-1…\n 8 2940838 2016-04-15  2016-04-15 17:11…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n 9 2940848 2016-04-15  2016-04-15 17:17…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n10 2940855 2016-04-15  2016-04-15 17:42…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n# ℹ 3,329 more rows\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nWe get 3,339 rows, and 37 columns, the same as common_name == 'Western Fence Lizard'.\n\n\ncommon names vs scientific name\nGenerally speaking, it is more precise to search for scientific name rather than common name. A species has one scientific name, but zero or more common names.\nLet’s look for ‘oaks’ observations. The scientific name for ‘oaks’ genus is ‘Quercus’.\nWe will assign the filter() results to objects using &lt;- assignment arrow. By assigning the filter() results to an object, the results are saved in memory, and we can refer to the results.\n\noaks &lt;- filter(inat_data, common_name == 'oaks')\n\n\nquercus &lt;- filter(inat_data, scientific_name == 'Quercus')\n\nBoth ‘oaks’ and ‘quercus’ are shown in the Environment panel. We get 218 observations for ‘oaks’, but 246 observations for ‘Quercus’.\n\nIf you click on on ‘quercus’ in the Environment panel, that will open a spreadsheet-like viewer.\nAs you can see, there are multiple common names for ‘Quercus’.\n\nWe will cover how to search for species more in the “Higher taxa” lesson.\n\n\n\nThe pipe: %&gt;%\nWhat happens if we want to select columns and filter rows?\nWe use the pipe operator %&gt;% to call multiple functions.\n\n\n\n\n\n\nTip\n\n\n\nYou can insert %&gt;% by using the keyboard shortcut Shift+Cmd+M (Mac) or Shift+Ctrl+M (Windows).\n\n\n\nselect observations by user_login\niNaturalist has two fields for the user name: user_login and user_name. iNaturalist displays the user_login for each observation, and displays user_name on the user’s profile page.\nLet’s get all observations for iNaturalist user ‘natureinla’, and we only want columns user_login, common_name, scientific_name, observed_on. Since we need both filter() and select(), we use pipe operator %&gt;%.\nPipe operator take the thing on the left hand side and insert it as the first argument of the function on the right hand side.\n\ninat_data %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 2,956 × 4\n   user_login common_name            scientific_name               observed_on\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;                         &lt;date&gt;     \n 1 natureinla Red-eared Slider       Trachemys scripta elegans     2016-04-14 \n 2 natureinla Monarch                Danaus plexippus              2016-04-14 \n 3 natureinla San Diego Gopher Snake Pituophis catenifer annectens 2016-04-14 \n 4 natureinla California Towhee      Melozone crissalis            2016-04-14 \n 5 natureinla Cooper's Hawk          Astur cooperii                2016-04-14 \n 6 natureinla Monarch                Danaus plexippus              2016-04-14 \n 7 natureinla tropical milkweed      Asclepias curassavica         2016-04-14 \n 8 natureinla Allen's Hummingbird    Selasphorus sasin             2016-04-14 \n 9 natureinla Northern Mockingbird   Mimus polyglottos             2016-04-15 \n10 natureinla House Sparrow          Passer domesticus             2016-04-15 \n# ℹ 2,946 more rows\n\n\nIt can be helpful to think of %&gt;% as meaning “and then”. inat_data is sent to filter() function. filter() selects rows with ‘natureinla’. And then the output from filter() is sent into the select() function. select() selects 4 columns.\n\n\nselect observations by coordinates_obscured\nSometimes the coordinates for iNaturalist observations are obscured. For instance, when the observation involves an endangered species, iNaturalist will automatically obscure the coordinates in order to protect the species. Sometimes people choose to obscure their location when they are making observations so that other people will not know their exact location. iNaturalist has information about obscured coordinates.\nTo access one column in a data frame, use dataframe$column_name.\n\ninat_data$coordinates_obscured\n\nWhen we pass in a data frame column to table() function from R, it will return the unique values in a column, and the number of rows that contain each value.\nUse table() to get a count of how many observations have obscured locations by passing in the data frame column.\n\ntable(inat_data$coordinates_obscured)\n\n\n FALSE   TRUE \n176942  14696 \n\n\n176K row are false (coordinates are normal), 14K rows are true (coordinates are obscured).\nIf the exact location of the observation will affect your analysis, then you want unobscured coordinates. Let’s get the observations where the coordinates are not obscured.\n\ninat_data %&gt;%\n  filter(coordinates_obscured == FALSE) %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 176,942 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 smartrf       Bot Flies, Blow Flies, and Allies   Oestroidea      2016-04-14 \n 3 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 4 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 5 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 ttempel       &lt;NA&gt;                                Coelocnemis     2016-04-14 \n 7 bradrumble    House Sparrow                       Passer domesti… 2016-04-15 \n 8 deedeeflower5 Amur Carp                           Cyprinus rubro… 2016-04-14 \n 9 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n10 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n# ℹ 176,932 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen using both filter() and select(), it is a good idea to use filter() before select(). The following code will cause an error “object ‘coordinates_obscured’ not found”.\n\ninat_data %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)  %&gt;% \n  filter(coordinates_obscured == FALSE)\n\nselect() creates a data frame with four fields. When we try to filter() using coordinates_obscured, we get an error because the 4-field data frame we pass to filter() does not have the field coordinates_obscured.\n\n\n\n\nselect observations by quality_grade\niNaturalist gives a quality grade to each observation. The observations are labeled as ‘needs_id’, ‘research’, or ‘casual’. iNaturalist FAQ about quality grade.\nTo see all the unique values for a column, use unique() function from R and pass in the data frame column.\n\nunique(inat_data$quality_grade)\n\n[1] \"research\" \"needs_id\" \"casual\"  \n\n\nWhen researchers use iNaturalist data, they normally use research grade observations. Let’s get the observations that are research grade.\n\ninat_data %&gt;%\n  filter(quality_grade == 'research')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 107,491 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 3 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 4 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 5 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n 6 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n 7 lchroman      Cactus Wren                         Campylorhynchu… 2016-04-14 \n 8 deedeeflower5 Desert Cottontail                   Sylvilagus aud… 2016-04-14 \n 9 deedeeflower5 Western Fence Lizard                Sceloporus occ… 2016-04-14 \n10 deedeeflower5 Eastern Fox Squirrel                Sciurus niger   2016-04-14 \n# ℹ 107,481 more rows",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#errors-in-code",
    "href": "lessons/working-with-data.html#errors-in-code",
    "title": "Working with data",
    "section": "Errors in code",
    "text": "Errors in code\nWe are writing instructions for the computer. If there is a typo, misspelling, wrong function arguments, etc, the code will not work and we will see errors. R will display the errors in red. You need to fix the errors in order for the code to work. Here are some example errors.\ntypo: we used %&gt;, when it should be %&gt;%\n\ninat_data %&gt;\n  select(user_login, observed_on, common_name)\n\nMisspelled user_logi\n\ninat_data %&gt;%\n  select(user_logi, observed_on, common_name)\n\ntypo: we use =, when it should be ==\n\ninat_data %&gt;%\n  filter(user_login = 'natureinla')\n\ntypo: extra )\n\ninat_data %&gt;%\n  select(user_login, observed_on, common_name))",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-1",
    "href": "lessons/working-with-data.html#exercise-1",
    "title": "Working with data",
    "section": "Exercise 1",
    "text": "Exercise 1\nGet all your City Nature Challenge observations.\n\nUse read_csv() to load the CNC CSV. Assign the results to my_inat_data object.\nUse filter() to select observations with your iNaturalist username. If you don’t have any CNC observations, use ‘quantron’ the most prolific community scientist for CNC Los Angeles.\nUse select() to select 4 columns. One of the columns should be common_name\nassign the results of filter() and select() to my_obs object\nclick on my_obs in the Environment tab to see the results\n\n\n\nmy_inat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nRows: 191638 Columns: 37\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): time_observed_at, user_login, user_name, created_at, updated_at, ...\ndbl   (7): id, user_id, latitude, longitude, positional_accuracy, public_pos...\nlgl   (3): captive_cultivated, coordinates_obscured, threatened\ndate  (1): observed_on\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmy_obs &lt;- my_inat_data %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#logical-operators",
    "href": "lessons/working-with-data.html#logical-operators",
    "title": "Working with data",
    "section": "Logical operators",
    "text": "Logical operators\nIn previous examples we used one criteria in filter() to select some rows. Often times we want to use multiple criteria to select some rows. Logical operators allow you to do multiple comparisons at once.\n\nand operator: &\nIf there are multiple criteria, and we want to get rows that match all of the criteria, we use and operator & in between the criteria.\ncondtion_1 & condition_2\n\nselect observations by common_name and quality_grade\nLet’s get all ‘Western Fence Lizard’ observations that are research grade. This means we want to get rows where common_name is ‘Western Fence Lizard’ and quality_grade is ‘research’.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(common_name == 'Western Fence Lizard' & \n           quality_grade == 'research')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on, quality_grade)\n\n\nView(my_data)\n\nWe can check the results to make sure we wrote we got the data we want. We can use unique() to check the column values.\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\n\nunique(my_data$quality_grade)\n\n[1] \"research\"\n\n\n\n\nselect observations by coordinates_obscured and positional_accuracy\nPreviously we looked at coordinates_obscured. In addition to coordinates being intentionally obscured, another thing that can affect the coordinates for an observation is the accuracy of the coordinates. The accuracy of GPS on smart phones depends on the hardware, software, physical environment, etc. The positional_accuracy from iNaturalist measures the coordinates error in meters. For example if an observation has a positional accuracy of 65 meters, this means the measured coordinates is within 65 meters from the actual coordinates.\nWhen given a column in a dataframe, summary() displays statistics about the values. Let’s use summary() to look at the positional accuracy of observations where the coordinates are not obscured.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(coordinates_obscured == FALSE)  \n\n \nsummary(my_data$positional_accuracy)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's \n       0        5       12     2070       65 13227987    36601 \n\n\nMin. means the minimal value is 0.\n1st Qu. means 25% of the values are less than 5, and 75% are greater than 5.\nMedian means 50% of the values are less than 12, 50% are greater than 12.\nMean is the sum of the values divided by number of items.\n3rd Qu. means 75% of the values are less than 65, and 25% are greater than 65.\nMax. means the maximum value is 13,227,987.\nNA’s means there are 36,601 rows without positional_accuracy.\nEven though we selected unobscured locations, 25% of the observations are 65 or more meters away the actual location due to the accuracy of GPS device.\nIf location accuracy is important to your analysis, you can select a small number for position accuracy. Let’s get observations with unobscured locations that have position accuracy less than 5 meters.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(coordinates_obscured == FALSE & \n           positional_accuracy &lt;= 5) %&gt;%\n  select(user_login, common_name, scientific_name, positional_accuracy, coordinates_obscured)\n\ndim(my_data)\n\n[1] 41417     5\n\n\nWe have 41K observations with position accuracy less than 5 meters.\n\nunique(my_data$coordinates_obscured)\n\n[1] FALSE\n\n\n\nunique(my_data$positional_accuracy)\n\n[1] 4 5 3 2 1 0\n\n\n\n\n\nor operator: |\nIf there are multiple criteria, and we want to get rows that match one or more of the criteria, we use or operator | or in between the criteria.\ncondition_1 | condition_2\n\nselect observations by multiple common_name\nLet’s get observations where common_name is ‘Western Fence Lizard’ or ‘Western Honey Bee’.\n\nmy_data &lt;- inat_data %&gt;%\n  filter(common_name == 'Western Honey Bee' | \n        common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, observed_on, common_name)\n\ndim(my_data)\n\n[1] 5399    3\n\n\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\" \"Western Honey Bee\"   \n\n\n\n\n\n& (and) versus | (or)\n& (and) return rows where all conditions are true. This code looks for observations where user_login is ‘natureinla’ and common_name is ‘Western Fence Lizard’.\n\nand_data &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla' & \n           common_name == 'Western Fence Lizard')\n\ndim(and_data)\n\n[1] 79 37\n\n\n\nunique(and_data$user_login)\n\n[1] \"natureinla\"\n\n\n\nunique(and_data$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\nWe get 79 rows with 1 user_login and 1 common_name\n| (or) returns rows where any conditions are true. This code looks for observations where user_login is ‘natureinla’ plus observations where common_name is ‘Western Fence Lizard’\n\nor_data &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla' | \n           common_name == 'Western Fence Lizard')\n\ndim(or_data)\n\n[1] 6216   37\n\n\n\nunique(or_data$user_login) %&gt;% length\n\n[1] 1052\n\n\n\nunique(or_data$common_name) %&gt;% length\n\n[1] 1031\n\n\nWe get 6,216 rows with 1052 user_login and 1031 common_name\n& vs | will return different results. Check the results of your code to make sure your results matches what you intended.\n\n\n%in% c()\nAnother way to get rows that match one or more of the criteria is with the in operator %in%.\n\n\n\n\n\n\nNote\n\n\n\nA vector is way R stores multiple values. c() combine function from R creates a vector with the passed in values.\n\nc(1, 2, 5)\n\n[1] 1 2 5\n\n\n%in% operator from R returns true if an item matches values in a given vector.\n\n1 %in% c(1, 2, 5)\n\n[1] TRUE\n\n3 %in% c(1, 2, 5)\n\n[1] FALSE\n\n\n\n\n\nselect observations by multiple license\niNaturalist observations, photos, and sounds are covered by licenses. The default license is CC BY-NC (Creative Commons: Attribution-NonCommercial) so other people can use the content if they give attribution to you and use it for non-commercial purposes. More info about iNaturalist licenses and various Creative Commons licenses.\niNaturalist exports observations with No Copyright (CC0), Attribution (CC BY), and Attribution-NonCommercial (CC BY-NC) license to Global Biodiversity Information Facility (GBIF), an international organization that provides access to biodiversity information. Many researchers who use iNaturalist data get their data from GBIF. This means if iNaturalist observers want their data to be used by scientists, they need to use one of those three licenses.\nWe can use table() to see the license types and count.\n\ntable(inat_data$license)\n\n\n      CC-BY    CC-BY-NC CC-BY-NC-ND CC-BY-NC-SA    CC-BY-ND    CC-BY-SA \n       5384      129677        1199        2934          35          79 \n        CC0 \n       4934 \n\n\nLet’s get observations with CC0, CC-BY, or CC-BY-NC license. filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC')) will return rows where the license field is in the vector (‘CC0’, ‘CC-BY’, ‘CC-BY-NC’)\n\nmy_data &lt;- inat_data %&gt;%\n  filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC')) %&gt;%\n  select(user_login, observed_on, common_name, license)\n\ndim(my_data)\n\n[1] 139995      4\n\n\n\nunique(my_data$license)\n\n[1] \"CC-BY\"    \"CC-BY-NC\" \"CC0\"",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-2",
    "href": "lessons/working-with-data.html#exercise-2",
    "title": "Working with data",
    "section": "Exercise 2",
    "text": "Exercise 2\nGet all your observations that are research grade\n\nuse my_inat_data from Exercise 1 to access CNC observations\nUse & with filter() since we want to pick observations by both username and quality grade. Use ‘quantron’ as the user if you don’t have CNC observations.\nUse select() to pick 4 columns\n\n\n\nmy_inat_data %&gt;%\n  filter(user_login == 'natureinla' & \n           quality_grade == 'research') %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)\n\n# A tibble: 1,556 × 4\n   user_login observed_on common_name            scientific_name              \n   &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;                  &lt;chr&gt;                        \n 1 natureinla 2016-04-14  Red-eared Slider       Trachemys scripta elegans    \n 2 natureinla 2016-04-14  Monarch                Danaus plexippus             \n 3 natureinla 2016-04-14  San Diego Gopher Snake Pituophis catenifer annectens\n 4 natureinla 2016-04-14  California Towhee      Melozone crissalis           \n 5 natureinla 2016-04-14  Cooper's Hawk          Astur cooperii               \n 6 natureinla 2016-04-14  Monarch                Danaus plexippus             \n 7 natureinla 2016-04-14  Allen's Hummingbird    Selasphorus sasin            \n 8 natureinla 2016-04-15  Northern Mockingbird   Mimus polyglottos            \n 9 natureinla 2016-04-15  House Sparrow          Passer domesticus            \n10 natureinla 2016-04-15  Indian Peafowl         Pavo cristatus               \n# ℹ 1,546 more rows",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#find-items-with-wildcard-or-partial-search",
    "href": "lessons/working-with-data.html#find-items-with-wildcard-or-partial-search",
    "title": "Working with data",
    "section": "Find items with wildcard or partial search",
    "text": "Find items with wildcard or partial search\nPreviously we used common_name == 'Western Fence Lizard' which did an exact match for 'Western Fence Lizard'. But a lot of the times we want to search for a phrase, not an exact match.\nLet’s find all species common names that have the word ‘lizard’.\nunique(inat_data$common_name) will return all common names. Use length() to get the number of items.\n\ncommon_names &lt;- unique(inat_data$common_name) \n\nlength(common_names)\n\n[1] 7260\n\n\nWe have over 7000 common names.\nstr_subset() from stringr package will find all items that match a given pattern. The first argument is the items we are searching through. The second argument pattern is the pattern we are looking for.\nHere we are searching through common names for any names that contain ‘lizard’.\n\nstr_subset(common_names, pattern = 'lizard')\n\ncharacter(0)\n\n\nWhen we use pattern = 'lizard', we get zero results. The reason is that str_subset() is case sensitive. It is looking for lowercase ‘lizard’.\nTo have a case insensitive match, we need to pass in (?i) at the beginning of the pattern. This will look find matches for ‘lizard’ no matter the case.\n\nstr_subset(common_names, pattern = '(?i)lizard')\n\n [1] \"Western Side-blotched Lizard\"   \"Western Fence Lizard\"          \n [3] \"Southern Alligator Lizard\"      \"Great Basin Fence Lizard\"      \n [5] \"Common Side-blotched Lizard\"    \"Island Night Lizard\"           \n [7] \"San Diego Alligator Lizard\"     \"Sceloporine Lizards\"           \n [9] \"Lizards\"                        \"Blainville's Horned Lizard\"    \n[11] \"Southern Sagebrush Lizard\"      \"Snakes and Lizards\"            \n[13] \"Wall Lizards\"                   \"Yellow-backed Spiny Lizard\"    \n[15] \"Ocellated Lizard\"               \"Spiny Lizards\"                 \n[17] \"San Diegan Legless Lizard\"      \"Desert Night Lizard\"           \n[19] \"Zebra-tailed Lizard\"            \"Northern Legless Lizard\"       \n[21] \"Southern Italian Wall Lizard\"   \"Phrynosomatid Lizards\"         \n[23] \"San Clemente Night Lizard\"      \"Texas Alligator Lizard\"        \n[25] \"Long-nosed Leopard Lizard\"      \"Italian Wall Lizard\"           \n[27] \"North American Legless Lizards\" \"Desert Collared Lizard\"        \n[29] \"Ornate Tree Lizard\"            \n\n\nAll the results have ‘Lizard’, which explains why pattern = 'lizard' did not work.\nLet’s look for all common names with the word ‘ants’.\n\nstr_subset(common_names, pattern = '(?i)ants')\n\n [1] \"plants\"                                 \n [2] \"century plants\"                         \n [3] \"Typical American Harvester Ants\"        \n [4] \"Ants, Bees, Wasps, and Sawflies\"        \n [5] \"currants and gooseberries\"              \n [6] \"flowering plants\"                       \n [7] \"Ants\"                                   \n [8] \"vascular plants\"                        \n [9] \"pincushion plants\"                      \n[10] \"Stone plants\"                           \n[11] \"bird-of-paradise plants\"                \n[12] \"Ants, Bees, and Stinging Wasps\"         \n[13] \"Pyramid Ants\"                           \n[14] \"Wood, Mound, and Field Ants\"            \n[15] \"Myrmicine Ants\"                         \n[16] \"Odorous Ants\"                           \n[17] \"Cormorants and Shags\"                   \n[18] \"Carpenter Ants\"                         \n[19] \"Narrow-waisted Wasps, Ants, and Bees\"   \n[20] \"Molesta-group Thief Ants\"               \n[21] \"Acorn Ants and Allies\"                  \n[22] \"gumplants\"                              \n[23] \"Big-headed Ants\"                        \n[24] \"dewplants\"                              \n[25] \"Leptomyrmecin Ants\"                     \n[26] \"Solenopsis Fire Ants and Thief Ants\"    \n[27] \"Lasiin Ants\"                            \n[28] \"fallax-group Big-headed Ants\"           \n[29] \"Acrobat Ants\"                           \n[30] \"cast-iron plants\"                       \n[31] \"Cigar Plants and Allies\"                \n[32] \"Formicine Ants\"                         \n[33] \"Citronella Ants, Fuzzy Ants, and Allies\"\n[34] \"ice plants\"                             \n[35] \"Furrowed Ants\"                          \n[36] \"Ruminants\"                              \n[37] \"fusca-group Field Ants and Allies\"      \n[38] \"Velvety Tree Ants\"                      \n[39] \"Airplants\"                              \n[40] \"Sneaking Ants\"                          \n[41] \"radiator plants\"                        \n[42] \"Camponotin Ants\"                        \n[43] \"American Cormorants\"                    \n[44] \"Californicus-group Harvester Ants\"      \n[45] \"Pheasants, Grouse, and Allies\"          \n[46] \"threadplants\"                           \n[47] \"Spider Wasps, Velvet Ants, and Allies\"  \n[48] \"North American pitcher plants\"          \n[49] \"Pavement Ants\"                          \n[50] \"Pincushion plants\"                      \n\n\nThe results return names with the word ‘plants’ because it ‘ants’ is part of ‘plants’. If we want to only find matches for the word ‘ants’ , we need to use \\\\b\n\\\\b before and after “ants” will look for the word “ants”.\n\nstr_subset(common_names, pattern = \"(?i)\\\\bants\\\\b\")\n\n [1] \"Typical American Harvester Ants\"        \n [2] \"Ants, Bees, Wasps, and Sawflies\"        \n [3] \"Ants\"                                   \n [4] \"Ants, Bees, and Stinging Wasps\"         \n [5] \"Pyramid Ants\"                           \n [6] \"Wood, Mound, and Field Ants\"            \n [7] \"Myrmicine Ants\"                         \n [8] \"Odorous Ants\"                           \n [9] \"Carpenter Ants\"                         \n[10] \"Narrow-waisted Wasps, Ants, and Bees\"   \n[11] \"Molesta-group Thief Ants\"               \n[12] \"Acorn Ants and Allies\"                  \n[13] \"Big-headed Ants\"                        \n[14] \"Leptomyrmecin Ants\"                     \n[15] \"Solenopsis Fire Ants and Thief Ants\"    \n[16] \"Lasiin Ants\"                            \n[17] \"fallax-group Big-headed Ants\"           \n[18] \"Acrobat Ants\"                           \n[19] \"Formicine Ants\"                         \n[20] \"Citronella Ants, Fuzzy Ants, and Allies\"\n[21] \"Furrowed Ants\"                          \n[22] \"fusca-group Field Ants and Allies\"      \n[23] \"Velvety Tree Ants\"                      \n[24] \"Sneaking Ants\"                          \n[25] \"Camponotin Ants\"                        \n[26] \"Californicus-group Harvester Ants\"      \n[27] \"Spider Wasps, Velvet Ants, and Allies\"  \n[28] \"Pavement Ants\"                          \n\n\n\\\\b before ‘ant’ will look for the words that start with ‘ant’ such as ‘ant’, ‘ants’, ‘anthuriums’. We use [0:30] to show the first 30 matches.\n\nstr_subset(common_names, pattern = \"(?i)\\\\bant\")[0:30]\n\n [1] \"Typical American Harvester Ants\"     \n [2] \"Argentine Ant\"                       \n [3] \"Ants, Bees, Wasps, and Sawflies\"     \n [4] \"California Harvester Ant\"            \n [5] \"Ants\"                                \n [6] \"Western Velvety Tree Ant\"            \n [7] \"American Winter Ant\"                 \n [8] \"Anthemid Aphids\"                     \n [9] \"Francoeur's Field Ant\"               \n[10] \"Ant-mimic Sac Spiders\"               \n[11] \"Ergatogyne Trailing Ant\"             \n[12] \"Southern Fire Ant\"                   \n[13] \"Pacific Velvet Ant\"                  \n[14] \"Ants, Bees, and Stinging Wasps\"      \n[15] \"Pyramid Ants\"                        \n[16] \"Red Imported Fire Ant\"               \n[17] \"Wood, Mound, and Field Ants\"         \n[18] \"Apache Twig Ant\"                     \n[19] \"Andre's Harvester Ant\"               \n[20] \"Myrmicine Ants\"                      \n[21] \"Odorous Ants\"                        \n[22] \"Odorous House Ant\"                   \n[23] \"Antlions and Owlflies\"               \n[24] \"Bicolored Pyramid Ant\"               \n[25] \"Antlions, Lacewings, and Allies\"     \n[26] \"Dark Rover Ant\"                      \n[27] \"Anteater Scarabs\"                    \n[28] \"Carpenter Ants\"                      \n[29] \"Black Harvester Ant\"                 \n[30] \"Narrow-waisted Wasps, Ants, and Bees\"\n\n\n\\\\b after ‘ant’ will look for the words that end with ‘ant’ such as ‘ant’, ‘plant’, ‘giant’.\n\nstr_subset(common_names, pattern = \"(?i)ant\\\\b\")[0:30]\n\n [1] \"Double-crested Cormorant\"    \"Argentine Ant\"              \n [3] \"giant reed\"                  \"Giant Canyon Woodlouse\"     \n [5] \"California Harvester Ant\"    \"fragrant pitcher sage\"      \n [7] \"Elegant Clarkia\"             \"golden currant\"             \n [9] \"Four-lined Plant Bug\"        \"Fiddleneck Plant Bug\"       \n[11] \"Western Giant Swallowtail\"   \"Spider plant\"               \n[13] \"jade plant\"                  \"distant phacelia\"           \n[15] \"Crystalline ice plant\"       \"Brandt's Cormorant\"         \n[17] \"Giant Kelp\"                  \"American century plant\"     \n[19] \"pink trailing iceplant\"      \"Slender Iceplant\"           \n[21] \"giant chain fern\"            \"Giant Water Bugs\"           \n[23] \"Western Velvety Tree Ant\"    \"Island Tarplant\"            \n[25] \"American Winter Ant\"         \"California beeplant\"        \n[27] \"Plant-parasitic Hemipterans\" \"giant woollystar\"           \n[29] \"fragrant sumac\"              \"Snowplant\"                  \n\n\nNow that we have a list of ant names, we can use %in% to look for multiple ant species.\n\nants &lt;- c(\n\"Acorn Ants and Allies\",\n\"Acrobat Ants\",\n\"Argentine Ant\",\n\"Big-headed Ants\",\n\"Californicus-group Harvester Ants\",\n\"Camponotin Ants\",\n\"Carpenter Ants\",\n\"Citronella Ants, Fuzzy Ants, and Allies\",\n\"fallax-group Big-headed Ants\",\n\"Formicine Ants\",\n\"Furrowed Ants\",\n\"Lasiin Ants\",\n\"Leptomyrmecin Ants\",\n\"Molesta-group Thief Ants\",\n\"Myrmicine Ants\",\n\"Pavement Ants\",\n\"Pyramid Ants\",\n\"Sneaking Ants\",\n\"Sneaking Ants\",\n\"Solenopsis Fire Ants and Thief Ants\",\n\"Velvety Tree Ants\",\n\"Velvety Tree Ants\"\n)\n\nants_obs &lt;- inat_data %&gt;%\n  filter(common_name %in% ants) %&gt;%\n  select(user_login, observed_on, common_name)\n\ndim(ants_obs)\n\n[1] 446   3",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#more-complex-queries",
    "href": "lessons/working-with-data.html#more-complex-queries",
    "title": "Working with data",
    "section": "More complex queries",
    "text": "More complex queries\nSometimes we want to use both & | to select the rows. You can use multiple filter() statements. Multiple filter() is the equivalent of &.\n\nselect observations by multiple user_login and common_name\nLet’s get observations where user is ‘cdegroof’ or ‘deedeeflower5’, and species is ‘Western Fence Lizard’.\n\ncomplex_query &lt;- inat_data %&gt;%\n  filter(user_login == 'cdegroof' | \n           user_login == 'deedeeflower5') %&gt;%\n  filter(common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\ndim(complex_query)\n\n[1] 33  4\n\n\n\nunique(complex_query$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\n\nunique(complex_query$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis query using just | & with one filter() does not give us what we want.\n\nalt_1 &lt;- inat_data %&gt;%\n  filter(user_login == 'cdegroof' | \n           user_login == 'deedeeflower5' & \n           common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\ndim(alt_1)\n\n[1] 374   4\n\n\n\nunique(alt_1$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"\n\n\n\nunique(alt_1$common_name) %&gt;% length\n\n[1] 137\n\n\nWe get 2 users but 137 common names.\nIn most programming languages and is evaluated before or. Our query asked for all observations by ‘deedeeflower5’ for ‘Western Fence Lizard’, and all observations by ‘cdegroof’.\nThis query using | & () does give us what we want. We used parenthesis around the two user_login.\n\nalt_2 &lt;- inat_data %&gt;%\n  filter((user_login == 'cdegroof' | user_login == 'deedeeflower5') &\n           common_name == 'Western Fence Lizard')  %&gt;%\n  select(user_login, common_name, scientific_name, observed_on)\n\ndim(alt_2)\n\n[1] 33  4\n\n\n\nunique(alt_2$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"\n\n\n\nunique(alt_2$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\nWe get 2 users and 1 common name.",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-3",
    "href": "lessons/working-with-data.html#exercise-3",
    "title": "Working with data",
    "section": "Exercise 3",
    "text": "Exercise 3\nGet all your observations for two species\n\nUse my_inat_data to access CNC observations\nUse unique(my_obs$common_names) from Exercise 1 to find two species name.\nUse filter(), | to pick two species\nUse filter() to pick your username. Use ‘quantron’ as the user if you don’t have CNC observations.\nUse select() to pick four columns.\n\n\n\nunique(my_obs$common_name)[0:10]\n\n [1] \"Red-eared Slider\"       \"Monarch\"                \"San Diego Gopher Snake\"\n [4] \"California Towhee\"      \"Cooper's Hawk\"          \"tropical milkweed\"     \n [7] \"Allen's Hummingbird\"    \"Northern Mockingbird\"   \"House Sparrow\"         \n[10] \"Indian Peafowl\"        \n\n\n\nmy_inat_data %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  filter(common_name == 'Red-eared Slider' | common_name=='Monarch') %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)\n\n# A tibble: 44 × 4\n   user_login observed_on common_name      scientific_name          \n   &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;            &lt;chr&gt;                    \n 1 natureinla 2016-04-14  Red-eared Slider Trachemys scripta elegans\n 2 natureinla 2016-04-14  Monarch          Danaus plexippus         \n 3 natureinla 2016-04-14  Monarch          Danaus plexippus         \n 4 natureinla 2016-04-14  Monarch          Danaus plexippus         \n 5 natureinla 2016-04-14  Red-eared Slider Trachemys scripta elegans\n 6 natureinla 2016-04-16  Monarch          Danaus plexippus         \n 7 natureinla 2016-04-15  Monarch          Danaus plexippus         \n 8 natureinla 2016-04-17  Monarch          Danaus plexippus         \n 9 natureinla 2016-04-15  Monarch          Danaus plexippus         \n10 natureinla 2016-04-15  Monarch          Danaus plexippus         \n# ℹ 34 more rows",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#add-new-columns-with-mutate",
    "href": "lessons/working-with-data.html#add-new-columns-with-mutate",
    "title": "Working with data",
    "section": "Add new columns with mutate()",
    "text": "Add new columns with mutate()\nAnother common task is creating a new column based on values in existing columns. For example, we could add a new column for year.\n\n\n\n\n\n\nTip\n\n\n\nVector is a list of items. We can access specific values in a vector by using vector_name[number]. To access a range of values use vector_name[start_number:end_number]\n\nletters &lt;- c('a','b','c', 'd')\n\nget first item\n\nletters[1]\n\n[1] \"a\"\n\n\nget second and third item\n\nletters[2:3]\n\n[1] \"b\" \"c\"\n\n\n\n\nLet’s get observed_on for rows 10317 to 10320. The reason we picked these rows is because the year changes from 2016 to 2017.\n\ninat_data$observed_on[10317:10320]\n\n[1] \"2016-04-18\" \"2016-04-16\" \"2017-04-14\" \"2017-04-15\"\n\n\nLet’s get use year() to get the year from observed_on for rows 10317 to 10320\n\nyear(inat_data$observed_on)[10317:10320]\n\n[1] 2016 2016 2017 2017\n\n\nWe can use mutate() from dplyr and year() from lubridate to add a year column. For mutate(), we pass in the name of the new column, and the value of the column.\n\ntemp &lt;- inat_data %&gt;%\n  mutate(year = year(observed_on))\n\nWe can also use table() to see the number of observations per year.\n\ntable(temp$year)\n\n\n 2016  2017  2018  2019  2020  2021  2022  2023  2024 \n10392 17495 19164 34057 19524 22549 19597 26602 22258 \n\n\nUse class() to check the data type.\n\nclass(temp$year)\n\n[1] \"numeric\"\n\n\n\nselect observations by year\nLet’s get all observations for 2020. Use mutate() and year() to add year column. Then use filter() to select rows where year is 2020.\n\ntemp &lt;- inat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  filter(year == 2020)\n\n\nunique(temp$year)\n\n[1] 2020\n\n\nSince year column contains numbers, we can do greater than or less than comparison.\nLet’s get observations between 2018 and 2020, (e.g. 2018 2019 2020).\n\ntemp &lt;- inat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  filter(year &gt;= 2018 & year &lt;= 2020)\n\n\nunique(temp$year)\n\n[1] 2018 2019 2020",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-4",
    "href": "lessons/working-with-data.html#exercise-4",
    "title": "Working with data",
    "section": "Exercise 4",
    "text": "Exercise 4\nGet all of your observations from 2024.\n\nUse my_inat_data to access CNC observations\nUse mutate() and year() to add year column\nUse filter() to pick observations with your username and year is 2024. Use ‘quantron’ as the user if you don’t have CNC observations.\nUse select() to pick 4 columns\n\n\n\nmy_inat_data %&gt;%\n   mutate(year = year(observed_on)) %&gt;%\n  filter(user_login == 'natureinla' & year == 2024) %&gt;%\n  select(user_login, observed_on, common_name, scientific_name)\n\n# A tibble: 1 × 4\n  user_login observed_on common_name                scientific_name             \n  &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;                      &lt;chr&gt;                       \n1 natureinla 2024-04-29  San Diego Alligator Lizard Elgaria multicarinata webbii",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#count-the-number-of-rows-with-count",
    "href": "lessons/working-with-data.html#count-the-number-of-rows-with-count",
    "title": "Working with data",
    "section": "Count the number of rows with count()",
    "text": "Count the number of rows with count()\nWe can use count() from dplyr to count the number of values for one or more columns. We pass in the column names as arguments to count()\n\nget observations per year\nLet’s try counting of all observations by year. Use mutate() to add a year column. Use count() to count the number of observations for each year. By default, count will add a new column called n.\n\ninat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  count(year)\n\n# A tibble: 9 × 2\n   year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\nWe can specify the name of the count column by passing in name argument to count().\n\ninat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='obs_count')\n\n# A tibble: 9 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016     10392\n2  2017     17495\n3  2018     19164\n4  2019     34057\n5  2020     19524\n6  2021     22549\n7  2022     19597\n8  2023     26602\n9  2024     22258\n\n\n\n\nget top ten most observed species\nLet’s count the number of observations for each species. We will pass in both ‘common_name’ and ‘scientific_name’ to count() because some species don’t have a common_name.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count')\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name                             scientific_name        obs_count\n   &lt;chr&gt;                                   &lt;chr&gt;                      &lt;int&gt;\n 1 Abalone                                 Haliotis                       7\n 2 Abbott's bushmallow                     Malacothamnus abbottii         1\n 3 Abelias                                 Abelia                         1\n 4 Abert's Thread-waisted Wasp             Ammophila aberti               3\n 5 Abyssinian banana                       Ensete ventricosum             1\n 6 Acacia Psyllid                          Acizzia uncatoides             2\n 7 Acacias, Mimosas, mesquites, and allies Mimosoideae                   10\n 8 Acalyptrate Flies                       Acalyptratae                  66\n 9 Acanthus                                Acanthus                      23\n10 Achilid Planthoppers                    Achilidae                      1\n# ℹ 9,855 more rows\n\n\nIt’s often useful to take a look at the results in some order, like the lowest count to highest. We can use the arrange() function from dplyr for that. We pass in the columns we want to order by to arrange(). By default, arrange() will return values from lowest to highest.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count')   %&gt;%\n  arrange(obs_count)\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name                     scientific_name         obs_count\n   &lt;chr&gt;                           &lt;chr&gt;                       &lt;int&gt;\n 1 Abbott's bushmallow             Malacothamnus abbottii          1\n 2 Abelias                         Abelia                          1\n 3 Abyssinian banana               Ensete ventricosum              1\n 4 Achilid Planthoppers            Achilidae                       1\n 5 Acorn Moth                      Blastobasis glandulella         1\n 6 Acotylean Flatworms             Acotylea                        1\n 7 Active Free-living Bristleworms Errantia                        1\n 8 Afghan Tortoise                 Testudo horsfieldii             1\n 9 African Clawed Frog             Xenopus laevis                  1\n10 African Milk Weed               Euphorbia trigona               1\n# ℹ 9,855 more rows\n\n\nIf we want to reverse the order, we can wrap the column names in desc() from dplyr. This will return values from highest to lowest.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count))\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929\n# ℹ 9,855 more rows\n\n\nuse slice() from dplyr to return only certain number of records. slice(start:end) will return rows from the starting number to the ending number.\nLet’s get the top ten species with the most observations.\n\ncounts &lt;- inat_data %&gt;%\n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count))  %&gt;%\n  slice(1:10)\n\ncounts\n\n# A tibble: 10 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929\n\n\n\n\nCount higher taxa\nLet’s count the observations by kingdom.\n\ncounts &lt;- inat_data %&gt;%\n  count(taxon_kingdom_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count)) \n\ncounts\n\n# A tibble: 8 × 2\n  taxon_kingdom_name obs_count\n  &lt;chr&gt;                  &lt;int&gt;\n1 Plantae                98242\n2 Animalia               90127\n3 Fungi                   2149\n4 Chromista                743\n5 Protozoa                 187\n6 &lt;NA&gt;                     174\n7 Bacteria                  11\n8 Viruses                    5\n\n\nLet’s count observations for phylums in the Animal kingdom. Use filter() to select ‘Animalia’ kingdom. Then count the taxon_phylum_name.\n\ncounts &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia') %&gt;%\n  count(taxon_phylum_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count)) \n\ncounts\n\n# A tibble: 17 × 2\n   taxon_phylum_name obs_count\n   &lt;chr&gt;                 &lt;int&gt;\n 1 Arthropoda            42739\n 2 Chordata              40073\n 3 Mollusca               5735\n 4 Cnidaria                600\n 5 Echinodermata           327\n 6 Annelida                300\n 7 &lt;NA&gt;                    114\n 8 Platyhelminthes          93\n 9 Bryozoa                  44\n10 Rotifera                 40\n11 Porifera                 37\n12 Nematoda                  9\n13 Nematomorpha              8\n14 Ctenophora                3\n15 Phoronida                 3\n16 Nemertea                  1\n17 Tardigrada                1",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-5",
    "href": "lessons/working-with-data.html#exercise-5",
    "title": "Working with data",
    "section": "Exercise 5",
    "text": "Exercise 5\nGet the number of observation you made per year\n\nUse my_inat_data to access CNC observations\nUse mutate() and year() to add year column\nUse count() to count the number of observations per year\nUse filter() to select observations with your username. Use ‘quantron’ as the user if you don’t have CNC observations.\n\n\n\nmy_inat_data %&gt;%\n  mutate(year = year(observed_on)) %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  count(year, name='obs_count')\n\n# A tibble: 8 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016       930\n2  2017      1055\n3  2018       599\n4  2019       350\n5  2020        10\n6  2021         2\n7  2023         9\n8  2024         1",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#save-data",
    "href": "lessons/working-with-data.html#save-data",
    "title": "Working with data",
    "section": "Save data",
    "text": "Save data\nIf you want to save your results, you can save the data frames as CSVs.\nFor instance, a user might only want to their observations that are research grade and unobscured location.\nFirst, assign the data frame to an object.\n\nmy_obs &lt;- inat_data %&gt;%\n  filter(user_login == 'natureinla' & \n           quality_grade == 'research' & \n           coordinates_obscured == FALSE) \n\nmy_obs\n\n# A tibble: 1,296 × 37\n        id observed_on time_observed_at user_id user_login user_name  created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n 1 2935688 2016-04-14  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 2 2935724 2016-04-14  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 3 2935782 2016-04-14  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 4 2954406 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 5 2954533 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 6 2954609 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 7 2954698 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 8 2954805 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n 9 2966003 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n10 2966084 2016-04-16  &lt;NA&gt;               21786 natureinla NHMLA Com… 2016-04-1…\n# ℹ 1,286 more rows\n# ℹ 30 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nThen use write_csv() from dplyr to create a CSV.\n\nThe first argument is the data frame to save.\nThe second argument is the relative path of where to save the file.\nTo keep our files organized, we can save the csv in data/cleaned or results.\nYou should give the file a sensible name to help you remember what is in the file. Some people add the date to the file name to keep track of the various versions.\nBy default NA values will be saved as ‘NA’ string. na='' will save NA values as empty strings.\n\n\nwrite_csv(my_obs, here('data/cleaned/my_observations.csv'), na='')",
    "crumbs": [
      "Working with data"
    ]
  },
  {
    "objectID": "lessons/higher-taxa.html",
    "href": "lessons/higher-taxa.html",
    "title": "Higher taxa",
    "section": "",
    "text": "How do we search for observations for groups of related species?\n\n\n\n\n\nLearn how search for higher taxa.\nLoad packages.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths\nSo far we looked at species. Instead of looking at specific species, we can also look for a group of related species.\nGet iNaturalist data.\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\nLet’s look for observations for all oak trees. We can use filter where the common_name is ‘oaks’.\noaks_obs &lt;- inat_data %&gt;%\n  filter(common_name == 'oaks') \n\ndim(oaks_obs)\n\n[1] 218  37\nWe have 218 observations. However, when we used the iNaturalist site to look for ‘oaks’ for ‘Los Angeles City Nature Challenge Cumulative Observations 2016-2024’, we get 1369 observations. What’s causing the difference?\nWhen you search for ‘oaks’ on iNaturalist, click the ‘About’ link, and it will bring you to the taxa page for ‘oaks’.\n‘Oaks’ is the common name for genus Quercus. When you search iNaturalist observations for ‘oaks’, iNaturalist returns observations that belong to the genus Quercus, which includes species such as ‘Live Coast Oak’ and ‘Valley Oak’.\nOur query only looks for observation where common_name is ‘oaks’. This means we aren’t including oak species. To match the iNaturalist search results, we need to look for all observations where the genus equals Quercus including oak species.\nWe can use names() to get all the taxon name fields. There are several taxon__xxx__name fields.\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"\nThe ‘Taxonomy’ tab on iNaturalist taxa pages show the taxonomic hierarchy with all the taxon ranks.\nWe can create a filter command to represent the taxonomic hierarchy.\noaks_obs_fixed &lt;- inat_data %&gt;%\n  filter(\n    taxon_kingdom_name == 'Plantae' &\n    taxon_phylum_name == 'Tracheophyta' &\n    taxon_class_name == 'Magnoliopsida' &\n    taxon_order_name == 'Fagales' &\n    taxon_family_name == 'Fagaceae' &\n    taxon_genus_name == 'Quercus'\n  )\n\ndim(oaks_obs_fixed)\n\n[1] 1367   37\nThe reason why iNaturalist has 1369 observations but we have 1367 is because iNaturalist has two ‘Quercus’ observations which don’t have latitude and longitude data. Our cleaned iNaturalist data excludes observations without latitude and longitude.\nLet’s see the unique common names.\nunique(oaks_obs_fixed$common_name)\n\n [1] \"coast live oak\"                  \"Engelmann oak\"                  \n [3] \"cork oak\"                        \"California scrub oak\"           \n [5] \"oaks\"                            \"canyon live oak\"                \n [7] \"island oak\"                      \"interior live oak\"              \n [9] \"valley oak\"                      \"Holm oak\"                       \n[11] \"white oaks\"                      \"northern red oak\"               \n[13] \"island scrub oak\"                \"high-latitude oaks\"             \n[15] \"southern live oak\"               \"Tucker's Oak\"                   \n[17] \"California black oak\"            \"MacDonald Oak\"                  \n[19] \"blue oak\"                        NA                               \n[21] \"leather oak\"                     \"Southern live oaks\"             \n[23] \"North America intermediate oaks\" \"ring-cupped oak\"                \n[25] \"red oaks\"                        \"San Gabriel oak\"                \n[27] \"California Live Oak\"             \"Ewan's Oak\"                     \n[29] \"Interior live oak\"               \"Nuttall's scrub oak\"\nWe get a combination of oaks species and oaks genus.\nThe reason why I listed the hierarchy instead of just filtering by taxon_genus_name == 'Quercus' is because of limitations of my taxonomy knowledge and the limitations of the information provided by the CSV. Some Latin words are used multiple times to represent different taxa. For instance Eisenia is a genus for a type of worm and a genus for a type kelp. A filter command for taxon_genus_name == 'Eisenia' would return observations for two very different organisms.\nEisenia_obs &lt;- inat_data %&gt;%\n  filter(taxon_genus_name == 'Eisenia') %&gt;%\n  select(common_name, taxon_kingdom_name)\n\nEisenia_obs\n\n# A tibble: 7 × 2\n  common_name       taxon_kingdom_name\n  &lt;chr&gt;             &lt;chr&gt;             \n1 Redworm           Animalia          \n2 Southern sea palm Chromista         \n3 Redworm           Animalia          \n4 Redworm           Animalia          \n5 Redworm           Animalia          \n6 Southern sea palm Chromista         \n7 Southern sea palm Chromista\nI don’t have enough expertise to know if a taxa name is unique, so to play it safe, I list the entire taxonomy hierarchy. Someone with more expertise might know there is only one Quercus in Plantae so they search for Plantae kingdom and genus Quercus.\nPlantae_Quercus_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Plantae' &\n           taxon_genus_name == 'Quercus') %&gt;%\n  select(common_name, taxon_kingdom_name)\n\ndim(Plantae_Quercus_obs)\n\n[1] 1367    2\nAnother example, let’s search for ‘trees’. When we search iNaturalist for ‘trees’, the first result is Phylum Tracheophyta. Let’s look at our data using taxon_phylum_name and ‘Tracheophyta’\ntrees_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Plantae' &\n           taxon_phylum_name == 'Tracheophyta')\n\ndim(trees_obs)\n\n[1] 95372    37\nThere are 95372 Tracheophyta observations.\nunique(trees_obs$common_name)[0:30]\n\n [1] \"tree houseleeks\"         \"London Plane\"           \n [3] \"Christmas-cheer\"         \"Creeping Woodsorrel\"    \n [5] \"century plants\"          \"Fortnight Lilies\"       \n [7] \"Climbing fig\"            \"Fan Palms\"              \n [9] \"Common Cotula\"           \"Cedars\"                 \n[11] \"scarlet pimpernel\"       \"Rancher's fiddleneck\"   \n[13] \"Showy Penstemon\"         \"redbuds\"                \n[15] \"flax-lilies\"             \"Wand Mullein\"           \n[17] \"California Centaury\"     \"crimson clover\"         \n[19] \"tropical milkweed\"       \"giant reed\"             \n[21] \"castor bean\"             \"Chilicothe\"             \n[23] \"roses\"                   \"Small-flowered Catchfly\"\n[25] \"goldentop grass\"         \"Smooth Cat's Ear\"       \n[27] \"purple nightshade\"       \"Bladder-senna\"          \n[29] \"Pacific pea\"             \"California cudweed\"\nWe are getting plants such as lilies, penstemon, and milkweed which aren’t trees. Why is that?\nIf we look up ‘Tracheophyta’ in Wikipedia:\nIf we look up ‘tree’ in Wikipedia:\nIn other words, there is no one word we can use to find all trees. The fact that iNaturalist shows Tracheophyta as the first search result for ‘trees’ is a little quirk with the iNaturalist search algorithm. To find all trees, we would need to get a list of trees names, and create a filter command with all the tree names.\nA quick internet search came up with LA County recommended trees and Wikipedia list of trees and shrubs. You can use lists like these as the basis of creating a list of trees. Your search might look something like this.\nSearch by species.\nlaco_species &lt;- c('Acacia aneura', 'Acacia stenophylla', 'Afrocarpus falcatus', \"Agonis flexuosa\", 'Angophora costata', \"Arbutus 'marina'\", 'Arbutus unedo'  )\n\nlaco_species_obs &lt;- inat_data %&gt;%\n  filter(taxon_species_name %in% laco_species & \n           taxon_kingdom_name == 'Plantae') %&gt;%\n  select(user_login, common_name, scientific_name, taxon_species_name)\nSearch by genera.\nlaco_genera &lt;- c('Acacia',  'Afrocarpus', \"Agonis\", 'Angophora', \"Arbutus\" )\n\nlaco_genera_obs &lt;- inat_data %&gt;%\n  filter(taxon_genus_name %in% laco_genera & \n           taxon_kingdom_name == 'Plantae') %&gt;%\n  select(user_login, common_name, scientific_name, taxon_genus_name)\nWhen searching for species, it’s generally better to search by scientific names rather than common names. A species should only have one scientific name. A species can have zero to many common names in many languages, and different sources can use different common names. For example iNaturalist uses strawberry tree and LA County tree list uses strawberry madrone for Arbutus unedo. The downside of searching by scientific names is trying to spell and say all these Latin words.\nWhen looking for a group of related organisms using higher taxonomy, it might take some additional research, and trial and error to get the results you want.",
    "crumbs": [
      "Higher taxa"
    ]
  },
  {
    "objectID": "lessons/higher-taxa.html#questions",
    "href": "lessons/higher-taxa.html#questions",
    "title": "Higher taxa",
    "section": "",
    "text": "How do we search for observations for groups of related species?",
    "crumbs": [
      "Higher taxa"
    ]
  },
  {
    "objectID": "lessons/higher-taxa.html#objectives",
    "href": "lessons/higher-taxa.html#objectives",
    "title": "Higher taxa",
    "section": "",
    "text": "Learn how search for higher taxa.",
    "crumbs": [
      "Higher taxa"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html",
    "href": "lessons/creating-maps.html",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?\n\n\n\n\n\nLearn how to plot iNaturalist observations on a map.\nLearn how to create static maps with ggplot2.\nLearn how to create interactive maps with mapview.",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#questions",
    "href": "lessons/creating-maps.html#questions",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#objectives",
    "href": "lessons/creating-maps.html#objectives",
    "title": "Creating maps",
    "section": "",
    "text": "Learn how to plot iNaturalist observations on a map.\nLearn how to create static maps with ggplot2.\nLearn how to create interactive maps with mapview.",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#mapping-inaturalist-data",
    "href": "lessons/creating-maps.html#mapping-inaturalist-data",
    "title": "Creating maps",
    "section": "Mapping iNaturalist data",
    "text": "Mapping iNaturalist data\niNaturalist data includes latitude and longitude information, which means we can put the observations on a map.\nMain steps:\n\nLoad iNaturalist data\nAdd geometry column to iNaturalist data\nUse filter(), select(), mutate(), and count() to get the rows and columns we want\nCreate map\n\nLoading R packages.\nsource(here('scripts/data_utils.R')) loads a script file with custom functions created for this workshop.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\nlibrary(here) # file paths\n\nsource(here('scripts/data_utils.R'))\n\nThere is a bug with sf https://github.com/r-spatial/sf/issues/1762. This bit of code is fix for the bug.\n\nsf_use_s2(FALSE)\n\nSpherical geometry (s2) switched off\n\n\nFirst, we need to read data from the CNC iNaturalist observation file.\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nWe can use names() to see all the column names. “latitude” and “longitude” are the column names we need.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\nsf package handles geospatial data. sf uses a special type of data frame called sf object (special features) to store geospatial data.\nst_as_sf() function from sf package will convert a tibble or data.frame into sf object. It uses the longitude and latitude values to add a geometry column. sf will use the geometry column for geospatial data processing.\n\nWe pass in longitude and latitude columns as a vector to coords argument. We must wrap longitude and latitude in quotes.\ncrs argument sets the coordinate reference system (CRS). 4326 is the code for the EPSG:4326, a commonly used CRS.\n\n\ninat_base_sf &lt;- inat_data %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nWe can use names() to show the column names. longitude and latitude columns were removed, and a geometry column was added.\n\nnames(inat_base_sf)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"positional_accuracy\"        \"public_positional_accuracy\"\n[19] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[21] \"coordinates_obscured\"       \"scientific_name\"           \n[23] \"common_name\"                \"iconic_taxon_name\"         \n[25] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[27] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[29] \"taxon_order_name\"           \"taxon_family_name\"         \n[31] \"taxon_genus_name\"           \"taxon_species_name\"        \n[33] \"taxon_subspecies_name\"      \"threatened\"                \n[35] \"establishment_means\"        \"geometry\"                  \n\n\nIf we look at the class for inat_base_sf, it shows sf object.\n\nclass(inat_base_sf)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nst_crs() from sf returns the coordinate reference system CRS for a sf object.\n\nst_crs(inat_base_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe use select() to pick which columns we want for the map.\n\n inat_sf &lt;- inat_base_sf %&gt;% \n  select(user_login, common_name, scientific_name, observed_on,  url, quality_grade) \n\nUse dim() to show the number of rows and columns. There are over 191K rows.\n\ndim(inat_sf)\n\n[1] 191638      7\n\n\nLet’s get the observations for ‘Quercus agrifolia’ aka Coast Live Oak.\n\ninat_oak_sf &lt;- inat_sf %&gt;% \n  filter(scientific_name == 'Quercus agrifolia')\n\nUse dim() to get number of observations. There is 711 rows.\n\ndim(inat_oak_sf)\n\n[1] 711   7",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#static-map",
    "href": "lessons/creating-maps.html#static-map",
    "title": "Creating maps",
    "section": "static map",
    "text": "static map\nggplot2 is a package that allows you to create data visualizations from tabular data. ggplot2 is most commonly used to create charts, but it can also be used to create maps.\nLet’s create a map for Coast Live Oak observations.\nCall ggplot() to start a map. Then we use + to add a new layer to the map. ggplot2 has various geom_ functions to display data. geom_sf() uses the information in the geometry column to plot each row. We pass the iNaturalist data to geom_sf() using the data argument.\n\nggplot() +\n  geom_sf(data = inat_oak_sf)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#interactive-map",
    "href": "lessons/creating-maps.html#interactive-map",
    "title": "Creating maps",
    "section": "interactive map",
    "text": "interactive map\nWe can use mapview package to create interactive maps where you can zoom in and out.\nLet’s create interactive map for ‘Coast Live Oak’.\n\nmapview(inat_oak_sf)\n\n\nYou can zoom in and out. When you click on layer button on the left, you can change base map and turn on/off layers. When you click on a map marker, all the fields that were passed into select() will be displayed in a popup. Clicking on the layer names in the lower right will zoom the map to show all objects in the layer.",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-1",
    "href": "lessons/creating-maps.html#exercise-1",
    "title": "Creating maps",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a map for one species.\n\nuse read_csv() to read iNaturalist file. Assign the results to my_inat_data object.\nuse st_as_sf() to add geometry column.\nuse select() to pick four columns.\nuse filter() to select observations for one species.\nAssign the results of filter() and select() to my_inat_sf\ncreate either a static or interactive map.\n\n\n\nmy_inat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nmy_inat_sf &lt;- my_inat_data %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)  %&gt;% \n  select(common_name, scientific_name, user_login, observed_on) %&gt;%\n  filter(common_name == 'House Finch')\n\nmapview(my_inat_sf)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#using-other-geospatial-files",
    "href": "lessons/creating-maps.html#using-other-geospatial-files",
    "title": "Creating maps",
    "section": "Using other geospatial files",
    "text": "Using other geospatial files\nLet’s add the boundaries for LA County to the map.\nThere are various places where you can download geospatial files for free. We downloaded the LA County boundaries from LA City Geohub. Geohub offers files in various formats including CSV, Shapefile, GeoJSON, and KML.\nread_sf() function from sf package can read files and databases in various formats. We will use read_sf() to read the LA County boundary Shapefile.\n\nla_county_sf &lt;- read_sf(here('data/raw/LA_County_Boundary/LA_County_Boundary.shp'))\n\nWe can use class() to examine the data returned by read_sf().\n\nclass(la_county_sf)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nWe have ‘data.frame’ and ‘tbl’ like with read_csv(). We also have an additional sf object. Because sf object is based on data frames, we can use the same types of commands on sf objects that we use for tibbles and data frames.\nWe can use glimpse() to examine the LA County boundary file.\n\nglimpse(la_county_sf)\n\nRows: 1\nColumns: 6\n$ OBJECTID   &lt;int&gt; 974\n$ TYPE       &lt;chr&gt; \"land\"\n$ NAME       &lt;chr&gt; \"Los Angeles County\"\n$ ShapeSTAre &lt;dbl&gt; 113863152934\n$ ShapeSTLen &lt;dbl&gt; 2918802\n$ geometry   &lt;MULTIPOLYGON [US_survey_foot]&gt; MULTIPOLYGON (((6430642 138...\n\n\nsf objects contain a column called geometry that has geospatial information.\nWe can use ggplot() + geom_sf() to plot LA county.\n\nggplot() +\n  geom_sf(data = la_county_sf)\n\n\n\n\n\n\n\n\nWhen working with multiple geospatial files, it’s important that all the data uses the same coordinate reference system (CRS). Let’s use st_crs() to check if the CRS for the iNaturalist data and the LA County boundary are the same. Use to check == if two things are equal.\n\nst_crs(la_county_sf) == st_crs(inat_oak_sf)\n\n[1] FALSE\n\n\nSince the CRS are different, we need to use st_transform() to change the CRS of the LA County boundary. First argument is the data frame. crs is the new CRS value. We taking la_county_sf and changing the CRS to equal the CRS from inat_oak_sf\n\nla_county_sf &lt;- st_transform(la_county_sf,  crs = st_crs(inat_oak_sf))\n\nst_crs(la_county_sf) == st_crs(inat_oak_sf)\n\n[1] TRUE\n\n\n\nStatic maps\nNow that LA county boundary and iNaturalist observations have the same CRS, let’s create a static map with LA County and oak observations. Create a new layer for each data set using two geom_sf() and +.\n\nggplot() +\n  geom_sf(data = la_county_sf)  +\n  geom_sf(data = inat_oak_sf) \n\n\n\n\n\n\n\n\nWhen ggplot2 draws the iNaturalist observations, it draws a round circle. When it draws the LA County boundary, it draws a polygon (closed shape with many sides). The data in the geometry column determines how ggplot2 draws things.\nLet’s examine the geometry column for the first row in la_county_sf and inat_oak_sf\n\nla_county_sf$geometry[1]\n\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.9447 ymin: 32.79959 xmax: -117.6464 ymax: 34.8233\nGeodetic CRS:  WGS 84\n\n\nMULTIPOLYGON (((-118.4262 32.79991, -118.4261 3...\n\n\n\ninat_oak_sf$geometry[1]\n\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -118.0178 ymin: 34.21069 xmax: -118.0178 ymax: 34.21069\nGeodetic CRS:  WGS 84\n\n\nPOINT (-118.0178 34.21069)\n\n\nThe Geometry type for the LA County boundary is a MULTIPOLYGON, and for iNaturalist is a POINT.\nFor points, use the color argument to set the color. For polygons, use color to set the border color and fill to set the fill color.\n\nggplot() +\n  geom_sf(data = la_county_sf, color=\"black\", fill='beige')  +\n  geom_sf(data = inat_oak_sf, color='green')  \n\n\n\n\n\n\n\n\nWe can also use alpha() to set the opacity. We pass in the color and opaacity level to alpha(). 0 is transparent, 1 is solid.\n\nggplot() +\n  geom_sf(data = la_county_sf, color=\"black\", fill=alpha('beige', .5))  +\n  geom_sf(data = inat_oak_sf, color=alpha('green', .3))  \n\n\n\n\n\n\n\n\nInstead of using one color for all the observations, we can also set the color to represent values in a particular column. aes() is short for aesthetic mappings, and it specifies which columns in the data are used for features of the plot. The format is aes(plot_feature=column_name). We pass aes() to the geom_sf() mapping argument.\nLet’s use quality_grade to set the color of the map markers.\n\nggplot() +\n  geom_sf(data = la_county_sf, color=\"black\", fill='beige')  +\n  geom_sf(data = inat_oak_sf, mapping=aes(color=quality_grade))  \n\n\n\n\n\n\n\n\nggplot2 will assign a different color to each value, and add a legend.\nWe can set the map title using labs(title='', subtitle=''). We can set the legend title using labs(color=''). We can add theme_void() to get rid of the grey background and axis labels.\n\nggplot() +\n  geom_sf(data = la_county_sf, color=\"black\", fill='beige')  +\n  geom_sf(data = inat_oak_sf, mapping=aes(color=quality_grade)) +\n  labs(title = 'CNC observations for Live Coast Oaks in LA County',\n       subtitle='2016-2024',\n       color='Quality Grade') +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\nInteractive maps\nLet’s create an interactive map with LA County and oak observations. Create a new layer for each data set using +.\n\nmapview(la_county_sf) +\n  mapview(inat_oak_sf) \n\n\nmapview will add a legend for each layer. We can hide the legend with legend=FALSE.\n\nmapview(la_county_sf, legend=FALSE) +\n  mapview(inat_oak_sf, legend=FALSE) \n\n\nWhen you hover over an item on the map, a small popup will be shown. When you click on an item, a popup with the fields from the select() will be shown.\nWe can turn off the small hover popup with label=FALSE, and turn off the click large popup with popup=FALSE\n\nmapview(la_county_sf, legend=FALSE, popup=FALSE, label=FALSE) +\n  mapview(inat_oak_sf, legend=FALSE) \n\nUse color to set the border color, and col.regions to set the color of the fill.\n\nmapview(la_county_sf, \n        legend=FALSE, popup=FALSE, label=FALSE,\n        color='black', col.regions='beige') +\n  mapview(inat_oak_sf, \n          legend=FALSE,\n          color='black', col.regions='green') \n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, mapview will draw purple layers and use CartoDB Positron base map.\nIf we use custom colors, mapview will pick a base map based on the custom colors. If we want mapview to always use CartoDB Positron base map, we need to turn off color shuffle.\nmapviewOptions(basemaps.color.shuffle = FALSE)\n\n\n\nmapviewOptions(basemaps.color.shuffle = FALSE)\n\nUse alpha.region to set alpha. 1 is ipaque, 0 is transparent.\n\nmapview(la_county_sf, legend=FALSE,\n        popup=FALSE, label=FALSE,\n        color='black', col.regions='beige',\n         alpha.region=1) +\n  mapview(inat_oak_sf, legend=FALSE,\n          color='black', col.regions='green',\n          alpha.region=1) \n\n\nWe can also set the color of the observation to represent values in a particular column using zcol=&lt;column_name&gt;.\nLet’s use quality_grade to set the color of the map markers.\n\nmapview(la_county_sf, legend=FALSE,\n        popup=FALSE, label=FALSE,\n        color='black', col.regions='beige') +\n  mapview(inat_oak_sf, zcol='quality_grade')\n\n\nWe can set the legend title using layer.name. mapview does not have the ability to add a title.\n\nmapview(la_county_sf, legend=FALSE,\n        popup=FALSE, label=FALSE,\n        color='black', col.regions='beige') +\n  mapview(inat_oak_sf, zcol='quality_grade',\n          layer.name='Quality Grade')",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-2",
    "href": "lessons/creating-maps.html#exercise-2",
    "title": "Creating maps",
    "section": "Exercise 2",
    "text": "Exercise 2\nCreate a map for one species with LA County boundary.\n\nuse iNaturalist observations my_inat_sf from Exercise 1\nuse read_sf() to read LA County boundary\ncheck if iNaturalist and LA County boundary use the same CRS\ncreate either a static or interactive map.\n\n\n\nmy_la_county_sf &lt;- read_sf(here('data/raw/LA_County_Boundary/LA_County_Boundary.shp'))\n\nst_crs(my_la_county_sf) == st_crs(my_inat_sf)\n\nmy_la_county_sf &lt;- st_transform(my_la_county_sf,  crs = st_crs(my_inat_sf))\n\nst_crs(my_la_county_sf) == st_crs(my_inat_sf)\n\nmapview(my_la_county_sf) + \n  mapview(my_inat_sf)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#observations-in-a-specific-region",
    "href": "lessons/creating-maps.html#observations-in-a-specific-region",
    "title": "Creating maps",
    "section": "Observations in a specific region",
    "text": "Observations in a specific region\nSometimes we want to look at data within a specific region. Let’s look for all iNaturalist observations made in Exposition Park.\nSometimes we won’t be able to find a pre-existing file that has boundaries for an area that we want to analyze. In these cases, we need to create our own boundaries. I used this Draw map boundaries webpage to draw and download the boundaries of Exposition Park. The file is in GeoJSON format.\nLet’s use read_sf() to read a GeoJSON file.\n\nexpo_park_boundary &lt;- read_sf(here('data/raw/boundaries_expo_park_area.geojson'))  \n\nWe can use glimpse() to examine the file.\n\nglimpse(expo_park_boundary)\n\nRows: 1\nColumns: 3\n$ id       &lt;chr&gt; \"f08494fe-c69f-418b-ae94-ca7e34727134\"\n$ mode     &lt;chr&gt; \"polygon\"\n$ geometry &lt;POLYGON [°]&gt; POLYGON ((-118.2915 34.0180...\n\n\nThe GeoJSON file has a geometry column.\nLet’s use st_crs() to check if the CRS for the iNaturalist data and Expo Park are the same.\n\nst_crs(expo_park_boundary) == st_crs(inat_sf)\n\n[1] TRUE\n\n\nLet’s create static and interactive maps of Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park_boundary) \n\n\n\n\n\n\n\n\n\nmapview(expo_park_boundary) \n\n\nThe following code will get the observations that are inside Exposition Park. We will save the observations to inat_expo.\n\ninat_expo &lt;- inat_sf[lengths(st_intersects(inat_sf, expo_park_boundary)) &gt; 0, ]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\ndim(inat_expo)\n\n[1] 2964    7\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor those who want to understand that chunk of code, here’s a explanation.\nst_intersects() from sf tells the number of items in the first spatial object that touches, crosses, or is within in a second spatial object. If there are no items, it returns empty.\nThe following code returns the number of items in each row of inat_sf that intersects expo_park_boundary. Since each row only contains one location, we will either get 1 or empty.\n\nst_intersects(inat_sf, expo_park_boundary)\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\n\nSparse geometry binary predicate list of length 191638, where the\npredicate was `intersects'\nfirst 10 elements:\n 1: (empty)\n 2: 1\n 3: (empty)\n 4: (empty)\n 5: (empty)\n 6: (empty)\n 7: (empty)\n 8: (empty)\n 9: (empty)\n 10: (empty)\n\n\nInstead of 1 or empty, want a vector with TRUE or FALSE values, also known as logical vector. If a row has 1 item inside expo_park_boundary, return TRUE. Otherwise return FALSE. We use lengths(st_intersects(inat_sf, expo_park_boundary)) &gt; 0 to check if a row has items within Exposition Park.\nuse [1:50] to get the first 50 rows\n\n(lengths(st_intersects(inat_sf, expo_park_boundary)) &gt; 0)[1:50]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\n\n [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE\n\n\nWe can use a logical vectors to filter rows in data frame by using dataframe[logical_vector, ]. If the logical vector is TRUE, return the row. Otherwise ignore the row.\nThis code selects all rows in inat_sf where there is one or more items in the row intersects expo_park_boundary\n\ninat_expo_2 &lt;- inat_sf[lengths(st_intersects(inat_sf, expo_park_boundary)) &gt; 0, ]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\n\n\n\nLet’s create map of all observations in Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park_boundary)  +\n  geom_sf(data = inat_expo) \n\n\n\n\n\n\n\n\n\nmapview(expo_park_boundary) +\n  mapview(inat_expo) \n\n\nNow that we have the observations, we can examine the data using methods we learned in the previous lesson.\nLet’s get the top ten species for Exposition Park. We need to use st_drop_geometry() to remove the geometry() column since we are no longer putting the observations on a map.\n\ninat_expo %&gt;%\n  st_drop_geometry() %&gt;%\n  count(common_name, scientific_name) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice(1:10)\n\n# A tibble: 10 × 3\n   common_name           scientific_name           n\n   &lt;chr&gt;                 &lt;chr&gt;                 &lt;int&gt;\n 1 Western Honey Bee     Apis mellifera          146\n 2 Eastern Fox Squirrel  Sciurus niger           103\n 3 House Sparrow         Passer domesticus        73\n 4 Common Pill Woodlouse Armadillidium vulgare    55\n 5 Monarch               Danaus plexippus         54\n 6 Asian Lady Beetle     Harmonia axyridis        44\n 7 Oblique Streaktail    Allograpta obliqua       43\n 8 House Finch           Haemorhous mexicanus     35\n 9 Spiders               Araneae                  34\n10 Spotless Lady Beetle  Cycloneda sanguinea      34",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-3",
    "href": "lessons/creating-maps.html#exercise-3",
    "title": "Creating maps",
    "section": "Exercise 3",
    "text": "Exercise 3\nCreate a map for all observations that are inside of a specific area\n\nuse my_inat_data from exercise 1 to access iNaturalist data\nuse st_as_sf() to add geometry column to iNaturalist data.\nuse select() to select 4 columns for iNaturalist data.\nuse Draw map boundaries to draw and download an area that you are interested in.\nSave the file to the data/raw directory.\nuse read_sf() to read your boundary data.\ncheck if iNaturalist observations and your boundary use the same CRS\nget observations inside a boundary\ncreate static or interactive map\n\n\n\nmy_all_inat_sf &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv')) %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326) %&gt;%\n  select(common_name, scientific_name, user_login, observed_on)\n\n\nmy_boundary_sf &lt;- read_sf(here('data/raw/boundaries_usc.geojson'))\n\nst_crs(my_inat_sf) == st_crs(my_boundary_sf)\n\nmy_inat_area_sf &lt;- my_all_inat_sf[st_intersects(my_all_inat_sf, my_boundary_sf) %&gt;% lengths &gt; 0, ]\n\nmapview(my_boundary_sf) + \n  mapview(my_inat_area_sf)",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#observations-near-a-specific-region",
    "href": "lessons/creating-maps.html#observations-near-a-specific-region",
    "title": "Creating maps",
    "section": "Observations near a specific region",
    "text": "Observations near a specific region\nIn geospatial analysis, buffer refers to the area within a certain distance of a specified feature. In the example below, the blue line is the specified feature, and the pinkish area is the buffer.\n\n\n\nBplewe, CC BY-SA 4.0 &lt;https://creativecommons.org/licenses/by-sa/4.0&gt;, via Wikimedia Commons\n\n\nLet’s find observations within 1/2 mile of the Los Angeles River. In other words, we want to create a 1/2 mile buffer around the LA River, and find the iNaturalist observations inside the buffer.\nLoad the LA River boundary.\n\nla_river &lt;- read_sf(here('data/cleaned/los_angeles_river.geojson'))\n\nCheck CRS for LA River and iNaturalist are the same.\n\nst_crs(la_river) == st_crs(inat_sf)\n\n[1] FALSE\n\n\nChange LA River CRS.\n\nla_river &lt;- st_transform(la_river, crs = st_crs(inat_sf))\n\nst_crs(la_river) == st_crs(inat_sf)\n\n[1] TRUE\n\n\nst_buffer() function from sf computes a buffer around a feature. The first argument is a sf object. The second argument dist is the distance around the given object. The units for dist depend on the CRS.\nSome CRS use angle degrees for the units. EPSG:4326 is an example. Some CRS use meters for the units. EPSG:5070 is an example.\nThe LA River uses EPSG:4326. We need to change the CRS to EPSG:5070, add a buffer of 805 meters (1/2 mile), and then covert the buffer back to EPSG:4326\nchange CRS to 5070\n\nriver_5070 &lt;- st_transform(la_river, crs=5070)\n\ncreate 805 meter (1/2 mile) buffer\n\nbuffer_river_5070 &lt;- st_buffer(river_5070, 805)\n\nchange CRS to 4326\n\nbuffer_river &lt;- st_transform(buffer_river_5070, crs=st_crs(inat_sf))\n\nAdd river and buffer to a map.\n\nmapview(buffer_river) +\n  mapview(la_river)\n\n\nGet iNaturalist observations inside the buffer. We included taxon_kingdom_name in select()\n\ninat_data_2 &lt;- inat_base_sf %&gt;% \n  select(user_login, common_name, scientific_name, taxon_kingdom_name)\n  \ninat_river &lt;- inat_data_2[lengths(st_intersects(inat_data_2, buffer_river)) &gt; 0, ]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\n\nWe can add the LA river, buffer, and iNaturalist observations to the map.\n\nmapview(buffer_river, legend=FALSE, \n        popup=FALSE, label=FALSE) +\n  mapview(la_river, legend = FALSE) + \n  mapview(inat_river, zcol='taxon_kingdom_name')\n\n\nNow that we have the observations, we can examine the data using methods we learned in the previous lesson.\nLet’s get the top ten species for the LA River. We need to use st_drop_geometry() to remove the geometry() column since we are no longer putting the observations on a map.\n\ninat_river %&gt;%\n  st_drop_geometry() %&gt;%\n  count(common_name, scientific_name) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice(1:10)\n\n# A tibble: 10 × 3\n   common_name          scientific_name             n\n   &lt;chr&gt;                &lt;chr&gt;                   &lt;int&gt;\n 1 Western Fence Lizard Sceloporus occidentalis   397\n 2 Mourning Dove        Zenaida macroura          225\n 3 Mallard              Anas platyrhynchos        224\n 4 Western Honey Bee    Apis mellifera            194\n 5 Eastern Fox Squirrel Sciurus niger             171\n 6 Canada Goose         Branta canadensis         152\n 7 House Finch          Haemorhous mexicanus      146\n 8 Lesser Goldfinch     Spinus psaltria           117\n 9 Red-winged Blackbird Agelaius phoeniceus       111\n10 California Towhee    Melozone crissalis        110",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#faceting",
    "href": "lessons/creating-maps.html#faceting",
    "title": "Creating maps",
    "section": "Faceting",
    "text": "Faceting\nOne of the most powerful features of ggplot is the ability to quickly split a plot into multiple smaller plots based on one or more columns in the data frame, which is called faceting. Use the facet_wrap() function to generate a series of smaller plots, and pass in the selected column using vars(&lt;column&gt;).\nLet’s create separate maps for each kingdom along the LA River. We pass taxon_kingdom_name to facet_wrap(vars()) to create facets based on the kingdom.\n\nggplot() +\n  geom_sf(data = inat_river ) +                                 \n  facet_wrap(vars(taxon_kingdom_name))",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#compare-observations-by-regions",
    "href": "lessons/creating-maps.html#compare-observations-by-regions",
    "title": "Creating maps",
    "section": "Compare observations by regions",
    "text": "Compare observations by regions\nSometimes we want to compare data in different areas. For instance, let’s compare the number of iNaturalist observations in LA County neighborhoods.\nLos Angeles Times Data Desk developed a map that broke down L.A. County in 272 neighborhoods. https://maps.latimes.com/about/index.html We’ll use the L.A. Times neighborhood boundaries for our map.\n\nla_neighborhoods_sf &lt;- read_sf(here('data/raw/la_times_la_county_neighborhoods.json'))\n\nglimpse(la_neighborhoods_sf)\n\nRows: 272\nColumns: 3\n$ name     &lt;chr&gt; \"Acton\", \"Adams-Normandie\", \"Agoura Hills\", \"Agua Dulce\", \"Al…\n$ slug     &lt;chr&gt; \"acton\", \"adams-normandie\", \"agoura-hills\", \"agua-dulce\", \"al…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-118.2026 3..., MULTIPOLYGON (((…\n\n\nCreate a map using geom_sf()\n\nggplot(la_neighborhoods_sf) +\n  geom_sf()\n\n\n\n\n\n\n\n\nUse select() to pick the name and geometry columns.\n\nla_neighborhoods_sf &lt;- la_neighborhoods_sf %&gt;%\n  select(name, geometry)\n\nhead(la_neighborhoods_sf)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.8004 ymin: 33.8773 xmax: -118.0797 ymax: 34.5583\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 2\n  name                                                                  geometry\n  &lt;chr&gt;                                                       &lt;MULTIPOLYGON [°]&gt;\n1 Acton           (((-118.2026 34.53899, -118.1982 34.53885, -118.1939 34.5387,…\n2 Adams-Normandie (((-118.309 34.03741, -118.3057 34.03731, -118.3015 34.03731,…\n3 Agoura Hills    (((-118.7619 34.1682, -118.7619 34.1682, -118.7618 34.1682, -…\n4 Agua Dulce      (((-118.2547 34.5583, -118.2549 34.55373, -118.2549 34.55347,…\n5 Alhambra        (((-118.1217 34.10504, -118.1217 34.10498, -118.1215 34.10506…\n6 Alondra Park    (((-118.3265 33.89757, -118.3265 33.89705, -118.3265 33.89668…\n\n\nCheck if the neighborhood maps have the same CRS as the iNaturalist data.\n\nst_crs(la_neighborhoods_sf) == st_crs(inat_sf)\n\n[1] TRUE\n\n\nI created a custom function add_inat_count_to_boundary_sf() that takes a dataframe with iNaturalist observations and an sf object that have multiple regions, and returns a sf object with a column observations_count that has the number of iNaturalist observations per region. The first argument is the iNaturalist data frame, the second argument is the sf object with the regions, the third argument is column in the sf object that has unique values.\n\ncount_sf &lt;- add_inat_count_to_boundary_sf(inat_sf, la_neighborhoods_sf, 'name')\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\nglimpse(count_sf)\n\nRows: 272\nColumns: 3\n$ name               &lt;chr&gt; \"Acton\", \"Adams-Normandie\", \"Agoura Hills\", \"Agua D…\n$ geometry           &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-118.2026 3..., MULTIP…\n$ observations_count &lt;int&gt; 331, 132, 814, 994, 786, 266, 3413, 6075, 2631, 34,…\n\n\n\nhead(count_sf)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.8004 ymin: 33.8773 xmax: -118.0797 ymax: 34.5583\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 3\n  name                                               geometry observations_count\n  &lt;chr&gt;                                    &lt;MULTIPOLYGON [°]&gt;              &lt;int&gt;\n1 Acton           (((-118.2026 34.53899, -118.1982 34.53885,…                331\n2 Adams-Normandie (((-118.309 34.03741, -118.3057 34.03731, …                132\n3 Agoura Hills    (((-118.7619 34.1682, -118.7619 34.1682, -…                814\n4 Agua Dulce      (((-118.2547 34.5583, -118.2549 34.55373, …                994\n5 Alhambra        (((-118.1217 34.10504, -118.1217 34.10498,…                786\n6 Alondra Park    (((-118.3265 33.89757, -118.3265 33.89705,…                266\n\n\ncount_sf has three columns: name of the neighborhood, geometry, and observations_count. We can now create maps showing the number of observations per neighborhood.\nChoropleth maps use colors to show how data changes from place to place.\nWe can create static choropleth map by by using aes(fill=observations_count) to color each neighborhood using the value in observations_count.\n\nggplot() +\n  geom_sf(data = count_sf, mapping =aes(fill = observations_count))\n\n\n\n\n\n\n\n\nWe can create interactive choropleth map by by using zcol='observations_count' to color each neighborhood using the value in observations_count.\n\nmapview(count_sf,  \n        zcol = 'observations_count')",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exporting-maps",
    "href": "lessons/creating-maps.html#exporting-maps",
    "title": "Creating maps",
    "section": "Exporting maps",
    "text": "Exporting maps\nWe can export the maps created with ggplot and mapview as image files.\n\nstatic maps\nAssign the map created by ggplot to an object. Then run `ggsave() to save our map. The first argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\n# create map\nmy_map &lt;- ggplot() +\n  geom_sf(data = expo_park_boundary)  +\n  geom_sf(data = inat_expo) \n\n# save map\nggsave(filename = here('results/expo_park_observations.jpg'), plot = my_map,  height = 6, width = 8)\n\n\n\ninteractive map\nAssign the map created by mapview to an object. Then run mapshot2() to save our map. The first argument is map you want to to save. The second argument file is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, or png.\n\n# create map\nmy_map_2 &lt;- mapview(expo_park_boundary) + \n  mapview(inat_expo)\n\n# save map\nmapshot2(my_map_2, file = here('results/expo_park_observations_2.jpg'))\n\nYou can also save the map as an interactive HTML & JS webpage. The second argument url is the path to the file we want to save. Save the file as html.\n\n# save map\nmapshot2(my_map_2, url = here('results/expo_park_observations_2.html'))",
    "crumbs": [
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html",
    "href": "lessons/intro-science-coding.html",
    "title": "Science and Coding concepts",
    "section": "",
    "text": "Urban ecology is the study of how living organisms interact with each other and with the natural and built environment in urban areas, as well as where and how organisms are distributed in urban areas.\n\n\n\nWikipedia description of taxonomy\n\nIn biology, taxonomy (from Ancient Greek τάξις (taxis) ‘arrangement’ and -νομία (-nomia) ‘method’) is the scientific study of naming, defining (circumscribing) and classifying groups of biological organisms based on shared characteristics. Organisms are grouped into taxa (singular: taxon) and these groups are given a taxonomic rank; groups of a given rank can be aggregated to form a more inclusive group of higher rank, thus creating a taxonomic hierarchy. The principal ranks in modern use are domain, kingdom, phylum (division is sometimes used in botany in place of phylum), class, order, family, genus, and species.\n\nThe current system of taxonomy uses Latin names for the scientific name. Each scientific name can have multiple common names in multiple languages.\nHere’s iNaturalist taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.\nRank: Latin scientific name (English common name)\n\nKingdom: Animalia (Animals)\nPhylum: Chordata (Chordates)\nClass: Reptilia (Reptiles)\nOrder: Squamata (Snakes and Lizards)\nFamily: Phrynosomatidae (Phrynosomatid Lizards)\nGenus: Sceloporus (Spiny Lizards)\nSpecies: Sceloporus occidentalis (Western Fence Lizard)\n\nIn theory, every iNaturalist observation represents a species. In practice, an iNaturalist observation will be assigned to a particular taxa name and taxon rank based on the quality of the recorded data, the expertise of the observer, the suggestion algorithms of iNaturalist, and the expertise of people who help identify observations.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#biology-concepts",
    "href": "lessons/intro-science-coding.html#biology-concepts",
    "title": "Science and Coding concepts",
    "section": "",
    "text": "Urban ecology is the study of how living organisms interact with each other and with the natural and built environment in urban areas, as well as where and how organisms are distributed in urban areas.\n\n\n\nWikipedia description of taxonomy\n\nIn biology, taxonomy (from Ancient Greek τάξις (taxis) ‘arrangement’ and -νομία (-nomia) ‘method’) is the scientific study of naming, defining (circumscribing) and classifying groups of biological organisms based on shared characteristics. Organisms are grouped into taxa (singular: taxon) and these groups are given a taxonomic rank; groups of a given rank can be aggregated to form a more inclusive group of higher rank, thus creating a taxonomic hierarchy. The principal ranks in modern use are domain, kingdom, phylum (division is sometimes used in botany in place of phylum), class, order, family, genus, and species.\n\nThe current system of taxonomy uses Latin names for the scientific name. Each scientific name can have multiple common names in multiple languages.\nHere’s iNaturalist taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.\nRank: Latin scientific name (English common name)\n\nKingdom: Animalia (Animals)\nPhylum: Chordata (Chordates)\nClass: Reptilia (Reptiles)\nOrder: Squamata (Snakes and Lizards)\nFamily: Phrynosomatidae (Phrynosomatid Lizards)\nGenus: Sceloporus (Spiny Lizards)\nSpecies: Sceloporus occidentalis (Western Fence Lizard)\n\nIn theory, every iNaturalist observation represents a species. In practice, an iNaturalist observation will be assigned to a particular taxa name and taxon rank based on the quality of the recorded data, the expertise of the observer, the suggestion algorithms of iNaturalist, and the expertise of people who help identify observations.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#coding-concepts",
    "href": "lessons/intro-science-coding.html#coding-concepts",
    "title": "Science and Coding concepts",
    "section": "Coding Concepts",
    "text": "Coding Concepts\nProgramming is writing instructions for a computer to follow. We write these instructions in the form of code. There are hundreds of programming languages, each with its own vocabulary and syntax.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#geospatial-concepts",
    "href": "lessons/intro-science-coding.html#geospatial-concepts",
    "title": "Science and Coding concepts",
    "section": "Geospatial concepts",
    "text": "Geospatial concepts\nGeospatial data is data that has a particular location. There are different software tools that can be used to display and analyze geospatial data.\n\nCoordinate Reference Systems\nEarth is a 3D sphere. Maps are 2D representation of a 3D sphere. Map projections are ways to flatten a spherical Earth to a flat surface.\nThe image belows shows maps of the United States in different projections. The differences in shape are a direct result of the calculations used to flatten the data onto a 2-dimensional map.\n\n\n\nSource: opennews.org, from: https://media.opennews.org/cache/06/37/0637aa2541b31f526ad44f7cb2db7b6c.jpg\n\n\nIn order for software to correctly display and manipulate geospatial data, the data must include coordinate reference system (CRS) information. The CRS tells the mapping software which map projection to use and where the data is located. To make sure things line up when working with multiple geospatial data sets, it’s important to use the same CRS during data processing and analysis.",
    "crumbs": [
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html",
    "href": "lessons/example-analysis.html",
    "title": "Example analysis",
    "section": "",
    "text": "This lesson shows how to I used some of the code samples in the previous lessons to create an analysis that has maps and charts.\nI want all research grade observations for Great Blue Heron. I want to compare the results in LA County to the results near the LA River.\nFirst step is load the R packages.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths\nlibrary(stringr) # work with string\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\n\nsource(here('scripts/data_utils.R'))\n\n\n\nThere CNC 191K observations for LA County. I need to select the observations that I want.\nFirst I need to import the City Nature Challenge iNaturalist observations.\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nRows: 191638 Columns: 37\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): time_observed_at, user_login, user_name, created_at, updated_at, ...\ndbl   (7): id, user_id, latitude, longitude, positional_accuracy, public_pos...\nlgl   (3): captive_cultivated, coordinates_obscured, threatened\ndate  (1): observed_on\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nI use names() to see the list of column names.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\nI use the filter() to select which observations I want.\nI search iNaturalist for ‘great blue heron’, and go to its taxa page since I want to use the scientific names in my filter() query. The kingom is ‘Animalia’ and the species is ‘Ardea herodias’.\nNow that I have the scientific names, I can write my filter() query. I use dim() to display the number rows and columns.\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias')\n\ndim(heron_obs)\n\n[1] 274  37\n\n\nI also want to see how many observations are research grade. If there are a lot of “casual” or “need_id” observations, then I might also include them in my analysis.\nI use table() to get the number of observations for each quality_grade value.\n\ntable(heron_obs$quality_grade)\n\n\n  casual needs_id research \n       7        1      266 \n\n\nSince there are a lot of ‘research’ grade observations, I’m fine with limiting the observations to ‘research’ grade.\nSince I want to look for observations in a certain area, I want to exclude observations that have obscured location. I use table() to get number of observations that have obscured locations.\n\ntable(heron_obs$coordinates_obscured)\n\n\nFALSE  TRUE \n  273     1 \n\n\nI need to update my query.\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias') %&gt;%\n  filter(quality_grade == 'research') %&gt;%\n  filter(coordinates_obscured == FALSE) \n\n\ndim(heron_obs)\n\n[1] 266  37\n\n\nWe have 266 observations for Great Blue Heron.\nSave the iNaturalist observations as a csv.\n\nwrite_csv(heron_obs, here('results/heron_observations.csv'), na='')\n\n\n\n\nNow that I have the observations I want, I can plot them on a map.\nSince I want to create a map, I need to use st_as_sf() to convert the dataframe into a sf object with a geometry column.\n\nheron_obs_sf &lt;- heron_obs %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nNow I can use mapview() to create an interactive map. Being able to zoom in and out makes it easier to explore the data.\n\nmapview(heron_obs_sf)\n\n\nWhen I click on a blue circle on the map, the pop table shows all 37 columns, which is too much information. I can use select() to limit the number of columns.\n\nheron_obs_sf &lt;- heron_obs_sf %&gt;%\n  select(user_login, observed_on, common_name, taxon_species_name)\n\nNow when I click on each blue circle, the popup shows 5 fields.\n\nmapview(heron_obs_sf)\n\n\n\n\nI want to add the LA River to the map.\n\nla_river &lt;- read_sf(here('data/cleaned/los_angeles_river.geojson'))\n\nThen I use st_crs() to check the if the CRS of the heron observations is the same as the CRS of the LA River.\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\n[1] FALSE\n\n\nSince the CRS are different, I need to change CRS for the water areas using st_transform()\n\nla_river &lt;- st_transform(la_river,  crs = st_crs(heron_obs_sf))\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\n[1] TRUE\n\n\nNow I can add the water areas to the map. I change the color for the iNaturalist observations to make them easier to see.\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river)\n\n\n\n\n\nI want to get observations within 1/2 mile of the LA river. I need to create a buffer 1/2 mile for the LA River.\n\n\nWe used CRS 4326 for the iNaturalist observations. 4326 uses angle degrees to measure distance. I need to change the CRS to a CRS that uses meters. CRS 5070 uses meters.\n\nla_river_5070 &lt;- st_transform(la_river, crs=5070)\n\nThen I use st_buffer() to create a buffer. 1/2 miles is about 805 meters.\n\nbuffer_la_river_5070 &lt;- st_buffer(la_river_5070, 805)\n\nAfter creating the buffer, I need to change the CRS back to 4326.\n\nbuffer_la_river &lt;- st_transform(buffer_la_river_5070, crs=st_crs(heron_obs_sf))\n\nThen I can create a map with the buffers.\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\n\n\n\n\nWe can use lengths(st_intersects()) &gt;0 to get the observations within the LA River buffer.\n\nheron_near_river_sf &lt;- heron_obs_sf[lengths(st_intersects(heron_obs_sf, buffer_la_river)) &gt; 0, ]\n\ndim(heron_near_river_sf)\n\n[1] 76  5\n\n\nI have 76 observations near the LA River.\nThen I can create a map with the buffers.\n\nfinal_map &lt;- mapview(heron_near_river_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\nfinal_map\n\n\n\n\n\nNext I save the iNaturalist observations as a csv.\n\nwrite_csv(heron_near_river_sf, here('results/heron_near_la_river.csv'), na='')\n\nAnd I save the map as an image\n\nmapshot2(final_map, file = here('results/heron_near_la_river.png'))\n\n\n\n\n\nI decided to shift my analysis to all bodies of water in LA County, not just the LA River.\nFirst I need to load the file with the water areas.\n\nwater_areas &lt;- read_sf(here('data/cleaned/la_county_waterareas.geojson'))\n\nThen I use st_crs() to check the if the CRS of the heron observations is the same as the CRS of the water areas.\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\n[1] FALSE\n\n\nSince the CRS are different, I need to change CRS for the water areas using st_transform()\n\nwater_areas &lt;- st_transform(water_areas,  crs = st_crs(heron_obs_sf))\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\n[1] TRUE\n\n\nNow I can add the water areas to the map.\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(water_areas)\n\n\nLooking at the map, I notice that most ‘Great Blue Heron’ observations are near bodies of water. I also notice that some of the smaller bodies of water aren’t included in ‘water_areas’.\n\n\nWe will follow the same steps that we used for the LA River to create buffers for all water area.\n\nwater_areas_5070 &lt;- st_transform(water_areas, crs=5070)\n\nbuffer_water_areas_5070 &lt;- st_buffer(water_areas_5070, 805)\n\nbuffer_water_areas &lt;- st_transform(buffer_water_areas_5070, crs=st_crs(heron_obs_sf))\n\n\n\n\nI want to add a column to heron_obs_sf to know which observations are near a body of water.\nI can use mutate() and lengths(st_intersects()) &gt; 0 to add near_water column to track if the observations is near water.\n\nheron_near_water_sf &lt;- heron_obs_sf %&gt;%\n  mutate(near_water=lengths(st_intersects(heron_obs_sf, buffer_water_areas)) &gt; 0)\n\nSave the observations as a csv\n\nwrite_csv(heron_near_water_sf, here('results/heron_near_la_river.csv'), na='')\n\n\n\n\nI want to create a bar chart that shows the heron observations near water.\n\nggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water))\n\n\n\n\n\n\n\n\nI use labs() to add titles, subtitle, and axis labels. I use theme_bw() and theme() to change overall appearance of the map.\n\nfinal_chart &lt;- ggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water)) +\n  labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       x='Within 1/2 mile of water',\n       y='observations count')  +\n  theme_bw() +\n  theme(title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\nfinal_chart\n\n\n\n\n\n\n\n\nSave the chart\n\nggsave(filename = here('results/heron_observations_near_water_chart.jpg'), \n       plot = final_chart, height = 6, width = 8)\n\n\n\n\nI want to create a map that shows the heron observations and all the bodies of water.\nI load the LA county file.\n\nLA_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\nggplot offers more ways to customize the look of the map than mapview, so I use ggplot to create a map.\n\nggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399')\n\n\n\n\n\n\n\n\nI use labs() to add titles, subtitle, legend title. I use theme_void() and theme() to change overall appearance of the map.\n\nfinal_map &lt;- ggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399') +\n    labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       color='Within 1/2 mile of water') +\n  theme_void() +\n  theme(title = element_text(size = 13))\n\nfinal_map\n\n\n\n\n\n\n\n\nSave the map\n\nggsave(filename = here('results/heron_observations_near_water_map.jpg'), \n       plot = final_map, height = 6, width = 8)\n\n\n\n\n\n\n## =================\n## load_packages\n## =================\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths\nlibrary(stringr) # work with string\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\n\nsource(here('scripts/data_utils.R'))\n\n\n\n\n\n\n## =================\n## Select City Nature Challenge observations\n## =================\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nnames(inat_data)\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias')\n\ndim(heron_obs)\n\ntable(heron_obs$quality_grade)\n\ntable(heron_obs$coordinates_obscured)\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias') %&gt;%\n  filter(quality_grade == 'research') %&gt;%\n  filter(coordinates_obscured == FALSE)\n\ndim(heron_obs)\n\nwrite_csv(heron_obs, here('results/heron_observations.csv'), na='')\n\n## =================\n## Create a map with CNC observations\n## =================\n\nheron_obs_sf &lt;- heron_obs %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nmapview(heron_obs_sf)\n\nheron_obs_sf &lt;- heron_obs_sf %&gt;%\n  select(user_login, observed_on, common_name, taxon_species_name)\n\nmapview(heron_obs_sf)\n\n## =================\n## Add LA River to the map\n## =================\n\nla_river &lt;- read_sf(here('data/cleaned/los_angeles_river.geojson'))\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\nla_river &lt;- st_transform(la_river,  crs = st_crs(heron_obs_sf))\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river)\n\n## =================\n## Observations near LA River\n## =================\n\nla_river_5070 &lt;- st_transform(la_river, crs=5070)\n\nbuffer_la_river_5070 &lt;- st_buffer(la_river_5070, 805)\n\nbuffer_la_river &lt;- st_transform(buffer_la_river_5070, crs=st_crs(heron_obs_sf))\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\nheron_near_river_sf &lt;- heron_obs_sf[lengths(st_intersects(heron_obs_sf, buffer_la_river)) &gt; 0, ]\n\ndim(heron_near_river_sf)\n\nfinal_map &lt;- mapview(heron_near_river_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\nfinal_map\n\nwrite_csv(heron_near_river_sf, here('results/heron_near_la_river.csv'), na='')\n\nmapshot2(final_map, file = here('results/heron_near_la_river.png'))\n\n\n## =================\n## Observations near bodies of water\n## =================\n\nwater_areas &lt;- read_sf(here('data/cleaned/la_county_waterareas.geojson'))\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\nwater_areas &lt;- st_transform(water_areas,  crs = st_crs(heron_obs_sf))\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(water_areas)\n\nwater_areas_5070 &lt;- st_transform(water_areas, crs=5070)\n\nbuffer_water_areas_5070 &lt;- st_buffer(water_areas_5070, 805)\n\nbuffer_water_areas &lt;- st_transform(buffer_water_areas_5070, crs=st_crs(heron_obs_sf))\n\nheron_near_water_sf &lt;- heron_obs_sf %&gt;%\n  mutate(near_water=lengths(st_intersects(heron_obs_sf, buffer_water_areas)) &gt; 0)\n\nwrite_csv(heron_near_water_sf, here('results/heron_near_la_river.csv'), na='')\n\nggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water))\n\nfinal_chart &lt;- ggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water)) +\n  labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       x='Within 1/2 mile of water',\n       y='observations count')  +\n  theme_bw() +\n  theme(title = element_text(size = 14),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\nfinal_chart\n\nggsave(filename = here('results/heron_observations_near_water_chart.jpg'),\n       plot = final_chart, height = 6, width = 8)\n\nLA_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\nggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399')\n\nfinal_map &lt;- ggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399') +\n    labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       color='Within 1/2 mile of water') +\n  theme_void() +\n  theme(title = element_text(size = 13))\n\nfinal_map\n\nggsave(filename = here('results/heron_observations_near_water_map.jpg'),\n       plot = final_map, height = 6, width = 8)",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html#select-city-nature-challenge-observations",
    "href": "lessons/example-analysis.html#select-city-nature-challenge-observations",
    "title": "Example analysis",
    "section": "",
    "text": "There CNC 191K observations for LA County. I need to select the observations that I want.\nFirst I need to import the City Nature Challenge iNaturalist observations.\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nRows: 191638 Columns: 37\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): time_observed_at, user_login, user_name, created_at, updated_at, ...\ndbl   (7): id, user_id, latitude, longitude, positional_accuracy, public_pos...\nlgl   (3): captive_cultivated, coordinates_obscured, threatened\ndate  (1): observed_on\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nI use names() to see the list of column names.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"threatened\"                \n[37] \"establishment_means\"       \n\n\nI use the filter() to select which observations I want.\nI search iNaturalist for ‘great blue heron’, and go to its taxa page since I want to use the scientific names in my filter() query. The kingom is ‘Animalia’ and the species is ‘Ardea herodias’.\nNow that I have the scientific names, I can write my filter() query. I use dim() to display the number rows and columns.\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias')\n\ndim(heron_obs)\n\n[1] 274  37\n\n\nI also want to see how many observations are research grade. If there are a lot of “casual” or “need_id” observations, then I might also include them in my analysis.\nI use table() to get the number of observations for each quality_grade value.\n\ntable(heron_obs$quality_grade)\n\n\n  casual needs_id research \n       7        1      266 \n\n\nSince there are a lot of ‘research’ grade observations, I’m fine with limiting the observations to ‘research’ grade.\nSince I want to look for observations in a certain area, I want to exclude observations that have obscured location. I use table() to get number of observations that have obscured locations.\n\ntable(heron_obs$coordinates_obscured)\n\n\nFALSE  TRUE \n  273     1 \n\n\nI need to update my query.\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias') %&gt;%\n  filter(quality_grade == 'research') %&gt;%\n  filter(coordinates_obscured == FALSE) \n\n\ndim(heron_obs)\n\n[1] 266  37\n\n\nWe have 266 observations for Great Blue Heron.\nSave the iNaturalist observations as a csv.\n\nwrite_csv(heron_obs, here('results/heron_observations.csv'), na='')",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html#create-a-map-with-cnc-observations",
    "href": "lessons/example-analysis.html#create-a-map-with-cnc-observations",
    "title": "Example analysis",
    "section": "",
    "text": "Now that I have the observations I want, I can plot them on a map.\nSince I want to create a map, I need to use st_as_sf() to convert the dataframe into a sf object with a geometry column.\n\nheron_obs_sf &lt;- heron_obs %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nNow I can use mapview() to create an interactive map. Being able to zoom in and out makes it easier to explore the data.\n\nmapview(heron_obs_sf)\n\n\nWhen I click on a blue circle on the map, the pop table shows all 37 columns, which is too much information. I can use select() to limit the number of columns.\n\nheron_obs_sf &lt;- heron_obs_sf %&gt;%\n  select(user_login, observed_on, common_name, taxon_species_name)\n\nNow when I click on each blue circle, the popup shows 5 fields.\n\nmapview(heron_obs_sf)",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html#add-la-river-to-the-map",
    "href": "lessons/example-analysis.html#add-la-river-to-the-map",
    "title": "Example analysis",
    "section": "",
    "text": "I want to add the LA River to the map.\n\nla_river &lt;- read_sf(here('data/cleaned/los_angeles_river.geojson'))\n\nThen I use st_crs() to check the if the CRS of the heron observations is the same as the CRS of the LA River.\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\n[1] FALSE\n\n\nSince the CRS are different, I need to change CRS for the water areas using st_transform()\n\nla_river &lt;- st_transform(la_river,  crs = st_crs(heron_obs_sf))\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\n[1] TRUE\n\n\nNow I can add the water areas to the map. I change the color for the iNaturalist observations to make them easier to see.\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river)",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html#observations-near-la-river",
    "href": "lessons/example-analysis.html#observations-near-la-river",
    "title": "Example analysis",
    "section": "",
    "text": "I want to get observations within 1/2 mile of the LA river. I need to create a buffer 1/2 mile for the LA River.\n\n\nWe used CRS 4326 for the iNaturalist observations. 4326 uses angle degrees to measure distance. I need to change the CRS to a CRS that uses meters. CRS 5070 uses meters.\n\nla_river_5070 &lt;- st_transform(la_river, crs=5070)\n\nThen I use st_buffer() to create a buffer. 1/2 miles is about 805 meters.\n\nbuffer_la_river_5070 &lt;- st_buffer(la_river_5070, 805)\n\nAfter creating the buffer, I need to change the CRS back to 4326.\n\nbuffer_la_river &lt;- st_transform(buffer_la_river_5070, crs=st_crs(heron_obs_sf))\n\nThen I can create a map with the buffers.\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\n\n\n\n\nWe can use lengths(st_intersects()) &gt;0 to get the observations within the LA River buffer.\n\nheron_near_river_sf &lt;- heron_obs_sf[lengths(st_intersects(heron_obs_sf, buffer_la_river)) &gt; 0, ]\n\ndim(heron_near_river_sf)\n\n[1] 76  5\n\n\nI have 76 observations near the LA River.\nThen I can create a map with the buffers.\n\nfinal_map &lt;- mapview(heron_near_river_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\nfinal_map\n\n\n\n\n\nNext I save the iNaturalist observations as a csv.\n\nwrite_csv(heron_near_river_sf, here('results/heron_near_la_river.csv'), na='')\n\nAnd I save the map as an image\n\nmapshot2(final_map, file = here('results/heron_near_la_river.png'))",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html#observations-near-bodies-of-water",
    "href": "lessons/example-analysis.html#observations-near-bodies-of-water",
    "title": "Example analysis",
    "section": "",
    "text": "I decided to shift my analysis to all bodies of water in LA County, not just the LA River.\nFirst I need to load the file with the water areas.\n\nwater_areas &lt;- read_sf(here('data/cleaned/la_county_waterareas.geojson'))\n\nThen I use st_crs() to check the if the CRS of the heron observations is the same as the CRS of the water areas.\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\n[1] FALSE\n\n\nSince the CRS are different, I need to change CRS for the water areas using st_transform()\n\nwater_areas &lt;- st_transform(water_areas,  crs = st_crs(heron_obs_sf))\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\n[1] TRUE\n\n\nNow I can add the water areas to the map.\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(water_areas)\n\n\nLooking at the map, I notice that most ‘Great Blue Heron’ observations are near bodies of water. I also notice that some of the smaller bodies of water aren’t included in ‘water_areas’.\n\n\nWe will follow the same steps that we used for the LA River to create buffers for all water area.\n\nwater_areas_5070 &lt;- st_transform(water_areas, crs=5070)\n\nbuffer_water_areas_5070 &lt;- st_buffer(water_areas_5070, 805)\n\nbuffer_water_areas &lt;- st_transform(buffer_water_areas_5070, crs=st_crs(heron_obs_sf))\n\n\n\n\nI want to add a column to heron_obs_sf to know which observations are near a body of water.\nI can use mutate() and lengths(st_intersects()) &gt; 0 to add near_water column to track if the observations is near water.\n\nheron_near_water_sf &lt;- heron_obs_sf %&gt;%\n  mutate(near_water=lengths(st_intersects(heron_obs_sf, buffer_water_areas)) &gt; 0)\n\nSave the observations as a csv\n\nwrite_csv(heron_near_water_sf, here('results/heron_near_la_river.csv'), na='')\n\n\n\n\nI want to create a bar chart that shows the heron observations near water.\n\nggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water))\n\n\n\n\n\n\n\n\nI use labs() to add titles, subtitle, and axis labels. I use theme_bw() and theme() to change overall appearance of the map.\n\nfinal_chart &lt;- ggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water)) +\n  labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       x='Within 1/2 mile of water',\n       y='observations count')  +\n  theme_bw() +\n  theme(title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\nfinal_chart\n\n\n\n\n\n\n\n\nSave the chart\n\nggsave(filename = here('results/heron_observations_near_water_chart.jpg'), \n       plot = final_chart, height = 6, width = 8)\n\n\n\n\nI want to create a map that shows the heron observations and all the bodies of water.\nI load the LA county file.\n\nLA_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\nggplot offers more ways to customize the look of the map than mapview, so I use ggplot to create a map.\n\nggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399')\n\n\n\n\n\n\n\n\nI use labs() to add titles, subtitle, legend title. I use theme_void() and theme() to change overall appearance of the map.\n\nfinal_map &lt;- ggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399') +\n    labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       color='Within 1/2 mile of water') +\n  theme_void() +\n  theme(title = element_text(size = 13))\n\nfinal_map\n\n\n\n\n\n\n\n\nSave the map\n\nggsave(filename = here('results/heron_observations_near_water_map.jpg'), \n       plot = final_map, height = 6, width = 8)",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/example-analysis.html#complete-script",
    "href": "lessons/example-analysis.html#complete-script",
    "title": "Example analysis",
    "section": "",
    "text": "## =================\n## load_packages\n## =================\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths\nlibrary(stringr) # work with string\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\n\nsource(here('scripts/data_utils.R'))\n\n\n\n\n\n\n## =================\n## Select City Nature Challenge observations\n## =================\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nnames(inat_data)\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias')\n\ndim(heron_obs)\n\ntable(heron_obs$quality_grade)\n\ntable(heron_obs$coordinates_obscured)\n\nheron_obs &lt;- inat_data %&gt;%\n  filter(taxon_kingdom_name == 'Animalia',\n         taxon_species_name == 'Ardea herodias') %&gt;%\n  filter(quality_grade == 'research') %&gt;%\n  filter(coordinates_obscured == FALSE)\n\ndim(heron_obs)\n\nwrite_csv(heron_obs, here('results/heron_observations.csv'), na='')\n\n## =================\n## Create a map with CNC observations\n## =================\n\nheron_obs_sf &lt;- heron_obs %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326)\n\nmapview(heron_obs_sf)\n\nheron_obs_sf &lt;- heron_obs_sf %&gt;%\n  select(user_login, observed_on, common_name, taxon_species_name)\n\nmapview(heron_obs_sf)\n\n## =================\n## Add LA River to the map\n## =================\n\nla_river &lt;- read_sf(here('data/cleaned/los_angeles_river.geojson'))\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\nla_river &lt;- st_transform(la_river,  crs = st_crs(heron_obs_sf))\n\nst_crs(la_river) == st_crs(heron_obs_sf)\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river)\n\n## =================\n## Observations near LA River\n## =================\n\nla_river_5070 &lt;- st_transform(la_river, crs=5070)\n\nbuffer_la_river_5070 &lt;- st_buffer(la_river_5070, 805)\n\nbuffer_la_river &lt;- st_transform(buffer_la_river_5070, crs=st_crs(heron_obs_sf))\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\nheron_near_river_sf &lt;- heron_obs_sf[lengths(st_intersects(heron_obs_sf, buffer_la_river)) &gt; 0, ]\n\ndim(heron_near_river_sf)\n\nfinal_map &lt;- mapview(heron_near_river_sf, col.regions='green') +\n  mapview(la_river) +\n  mapview(buffer_la_river)\n\nfinal_map\n\nwrite_csv(heron_near_river_sf, here('results/heron_near_la_river.csv'), na='')\n\nmapshot2(final_map, file = here('results/heron_near_la_river.png'))\n\n\n## =================\n## Observations near bodies of water\n## =================\n\nwater_areas &lt;- read_sf(here('data/cleaned/la_county_waterareas.geojson'))\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\nwater_areas &lt;- st_transform(water_areas,  crs = st_crs(heron_obs_sf))\n\nst_crs(water_areas) == st_crs(heron_obs_sf)\n\nmapview(heron_obs_sf, col.regions='green') +\n  mapview(water_areas)\n\nwater_areas_5070 &lt;- st_transform(water_areas, crs=5070)\n\nbuffer_water_areas_5070 &lt;- st_buffer(water_areas_5070, 805)\n\nbuffer_water_areas &lt;- st_transform(buffer_water_areas_5070, crs=st_crs(heron_obs_sf))\n\nheron_near_water_sf &lt;- heron_obs_sf %&gt;%\n  mutate(near_water=lengths(st_intersects(heron_obs_sf, buffer_water_areas)) &gt; 0)\n\nwrite_csv(heron_near_water_sf, here('results/heron_near_la_river.csv'), na='')\n\nggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water))\n\nfinal_chart &lt;- ggplot()+\n  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water)) +\n  labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       x='Within 1/2 mile of water',\n       y='observations count')  +\n  theme_bw() +\n  theme(title = element_text(size = 14),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\nfinal_chart\n\nggsave(filename = here('results/heron_observations_near_water_chart.jpg'),\n       plot = final_chart, height = 6, width = 8)\n\nLA_county &lt;- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))\n\nggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399')\n\nfinal_map &lt;- ggplot() +\n  geom_sf(data=LA_county, fill='white') +\n  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +\n  geom_sf(data=water_areas, fill='#007399') +\n    labs(title = 'CNC observations for Great Blue Herons in LA County',\n       subtitle='2016-2024',\n       color='Within 1/2 mile of water') +\n  theme_void() +\n  theme(title = element_text(size = 13))\n\nfinal_map\n\nggsave(filename = here('results/heron_observations_near_water_map.jpg'),\n       plot = final_map, height = 6, width = 8)",
    "crumbs": [
      "Example analysis"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html",
    "href": "lessons/creating-charts.html",
    "title": "Creating charts",
    "section": "",
    "text": "How do we create charts using R?\n\n\n\n\n\nCreate bar and line charts using ggplot2.\nCustomize the appearance of the charts.\nSave charts as image files.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(lubridate) # manipulate dates\nlibrary(here) # file paths",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#questions",
    "href": "lessons/creating-charts.html#questions",
    "title": "Creating charts",
    "section": "",
    "text": "How do we create charts using R?",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#objectives",
    "href": "lessons/creating-charts.html#objectives",
    "title": "Creating charts",
    "section": "",
    "text": "Create bar and line charts using ggplot2.\nCustomize the appearance of the charts.\nSave charts as image files.",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#creating-charts",
    "href": "lessons/creating-charts.html#creating-charts",
    "title": "Creating charts",
    "section": "Creating charts",
    "text": "Creating charts\nggplot2 is a package that allows you to create complex plots from tabular data. In the previous lesson we used it for maps, in this lesson we will use it for charts.\n\n\n\n\n\n\nNote\n\n\n\nSome people involved with visualizing data say charts, graphs, and plots are different things. This workshop will use charts, graphs, and plots interchangeably.\n\n\nMain steps:\n\nLoad iNaturalist data\nUse filter(), select(), mutate(), and count() to get the rows and columns we want\nPass the data to ggplot2(). Set which columns in a data frame will be used for chart elements such as x and y axis\nCreate chart",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#inaturalist-data",
    "href": "lessons/creating-charts.html#inaturalist-data",
    "title": "Creating charts",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nFirst, read data from the iNaturalist observation file.\n\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nLet’s add a year column to iNaturalist data.\n\ninat_year &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#bar-chart",
    "href": "lessons/creating-charts.html#bar-chart",
    "title": "Creating charts",
    "section": "Bar chart",
    "text": "Bar chart\nLet’s create a bar chart that shows the number of observations per year.\nFirst, pass the data frame inat_year to ggplot() function as the first argument.\n\nggplot(data = inat_year)\n\n\n\n\n\n\n\n\nWe need to tell ggplot how to use the data to create a chart. We can specify the mapping of data frame fields to elements in the chart, such as x/y coordinates, size, or shape, by using the aes() function. aes is short for aesthetic mappings.\nFor bar charts, we need to tell what field to use for the x axis. We want to create a plot with year on the x axis so we set the aes() function x argument to year. ggplot will count the number of rows for each year, and use the number of rows for the y axis.\n\nggplot(data = inat_year, mapping = aes(x = year))\n\n\n\n\n\n\n\n\nNext we need to specify how we want the data to be displayed. We do this using geom_ functions, which specify the type of geometry we want, such as points, lines, or bars. We use geom_bar() to create a vertical bar plot.\nWe can add a geom_bar() layer to our plot by using the + sign. We indent onto a new line to make it easier to read, and we have to end the first line with the + sign.\n\nggplot(data = inat_year,  mapping = aes(x = year)) +\n  geom_bar()    \n\n\n\n\n\n\n\n\nIf we want horizontal bar chart, set the aes() function y argument to year.\n\nggplot(data = inat_year, mapping = aes(y = year)) +\n  geom_bar()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#line-chart",
    "href": "lessons/creating-charts.html#line-chart",
    "title": "Creating charts",
    "section": "Line chart",
    "text": "Line chart\nLet’s create a line chart that shows the number of observations per year.\nFor line charts, we need to specify which columns to use for the x and y axis.\nWe need to create a data frame that has a year column, and a column that counts the observations per year. inat_year has a year column. Use count() to add a column that has the count per year.\n\ninat_year_count &lt;- inat_year %&gt;%\n  count(year, name='count')  \n\ninat_year_count\n\n# A tibble: 9 × 2\n   year count\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\nFor aes, use year on the x axis and count on the y axis. Use geom_line() to create a line chart.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y=count)) +\n  geom_line() \n\n\n\n\n\n\n\n\nTo mark each value on the line chart, we can use geom_point() to add points to the chart.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y=count)) +\n  geom_line() +\n  geom_point()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#more-bar-charts",
    "href": "lessons/creating-charts.html#more-bar-charts",
    "title": "Creating charts",
    "section": "More bar charts",
    "text": "More bar charts\nIn the previous example we created a data frame inat_year_count that has observations per year. To create bar chart when the data has values for x axis and y axis, use geom_col()\nWe want year on the x axis, and count on the y axis.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y = count)) +\n  geom_col()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#stacked-bar-charts",
    "href": "lessons/creating-charts.html#stacked-bar-charts",
    "title": "Creating charts",
    "section": "Stacked bar charts",
    "text": "Stacked bar charts\nIn the map lesson we created maps with markers that had different colors based on data in the data frame. We can do something similar with bar charts. We can create stacked bar charts by adding a column from the data frame to aes() function fill argument.\nLet’s create a stacked bar chart using quality_grade.\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar()   \n\n\n\n\n\n\n\n\nThe height of each bar represents the number of observations per year. The height of the 3 rectangles in each bar represents the number of observations that are labeled casual, needs_id, and research.\nggplot2 assigns each quality grade a different color, and creates a legend that tells you which values goes with which color.",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#exercise-1",
    "href": "lessons/creating-charts.html#exercise-1",
    "title": "Creating charts",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a chart with all your observations for each year\n\nUse read_csv() to read iNaturalist file.\nUse mutate() and year() to add year column\nUse filter() to select observations you made. Use ‘quantron’ as the user if you don’t have CNC observations.\nSave the data frame to my_obs_by_year object\nUse ggplot() to set the data and aesthetics.\nChoose which type of chart you want: bar or line.\n\n\n\nmy_inat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\n\nRows: 191638 Columns: 37\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): time_observed_at, user_login, user_name, created_at, updated_at, ...\ndbl   (7): id, user_id, latitude, longitude, positional_accuracy, public_pos...\nlgl   (3): captive_cultivated, coordinates_obscured, threatened\ndate  (1): observed_on\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmy_obs_by_year  &lt;- my_inat_data %&gt;% \n  mutate(year = year(observed_on))  %&gt;% \n  filter(user_login == 'natureinla')\n\n  \nggplot(data = my_obs_by_year, mapping = aes(x = year)) +\n  geom_bar()",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-colors",
    "href": "lessons/creating-charts.html#changing-colors",
    "title": "Creating charts",
    "section": "Changing colors",
    "text": "Changing colors\nUse colors() to get a list of the 657 colors in R.\n\ncolors()\n\n  [1] \"white\"                \"aliceblue\"            \"antiquewhite\"        \n  [4] \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n  [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"         \n [10] \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n [13] \"azure\"                \"azure1\"               \"azure2\"              \n [16] \"azure3\"               \"azure4\"               \"beige\"               \n [19] \"bisque\"               \"bisque1\"              \"bisque2\"             \n [22] \"bisque3\"              \"bisque4\"              \"black\"               \n [25] \"blanchedalmond\"       \"blue\"                 \"blue1\"               \n [28] \"blue2\"                \"blue3\"                \"blue4\"               \n [31] \"blueviolet\"           \"brown\"                \"brown1\"              \n [34] \"brown2\"               \"brown3\"               \"brown4\"              \n [37] \"burlywood\"            \"burlywood1\"           \"burlywood2\"          \n [40] \"burlywood3\"           \"burlywood4\"           \"cadetblue\"           \n [43] \"cadetblue1\"           \"cadetblue2\"           \"cadetblue3\"          \n [46] \"cadetblue4\"           \"chartreuse\"           \"chartreuse1\"         \n [49] \"chartreuse2\"          \"chartreuse3\"          \"chartreuse4\"         \n [52] \"chocolate\"            \"chocolate1\"           \"chocolate2\"          \n [55] \"chocolate3\"           \"chocolate4\"           \"coral\"               \n [58] \"coral1\"               \"coral2\"               \"coral3\"              \n [61] \"coral4\"               \"cornflowerblue\"       \"cornsilk\"            \n [64] \"cornsilk1\"            \"cornsilk2\"            \"cornsilk3\"           \n [67] \"cornsilk4\"            \"cyan\"                 \"cyan1\"               \n [70] \"cyan2\"                \"cyan3\"                \"cyan4\"               \n [73] \"darkblue\"             \"darkcyan\"             \"darkgoldenrod\"       \n [76] \"darkgoldenrod1\"       \"darkgoldenrod2\"       \"darkgoldenrod3\"      \n [79] \"darkgoldenrod4\"       \"darkgray\"             \"darkgreen\"           \n [82] \"darkgrey\"             \"darkkhaki\"            \"darkmagenta\"         \n [85] \"darkolivegreen\"       \"darkolivegreen1\"      \"darkolivegreen2\"     \n [88] \"darkolivegreen3\"      \"darkolivegreen4\"      \"darkorange\"          \n [91] \"darkorange1\"          \"darkorange2\"          \"darkorange3\"         \n [94] \"darkorange4\"          \"darkorchid\"           \"darkorchid1\"         \n [97] \"darkorchid2\"          \"darkorchid3\"          \"darkorchid4\"         \n[100] \"darkred\"              \"darksalmon\"           \"darkseagreen\"        \n[103] \"darkseagreen1\"        \"darkseagreen2\"        \"darkseagreen3\"       \n[106] \"darkseagreen4\"        \"darkslateblue\"        \"darkslategray\"       \n[109] \"darkslategray1\"       \"darkslategray2\"       \"darkslategray3\"      \n[112] \"darkslategray4\"       \"darkslategrey\"        \"darkturquoise\"       \n[115] \"darkviolet\"           \"deeppink\"             \"deeppink1\"           \n[118] \"deeppink2\"            \"deeppink3\"            \"deeppink4\"           \n[121] \"deepskyblue\"          \"deepskyblue1\"         \"deepskyblue2\"        \n[124] \"deepskyblue3\"         \"deepskyblue4\"         \"dimgray\"             \n[127] \"dimgrey\"              \"dodgerblue\"           \"dodgerblue1\"         \n[130] \"dodgerblue2\"          \"dodgerblue3\"          \"dodgerblue4\"         \n[133] \"firebrick\"            \"firebrick1\"           \"firebrick2\"          \n[136] \"firebrick3\"           \"firebrick4\"           \"floralwhite\"         \n[139] \"forestgreen\"          \"gainsboro\"            \"ghostwhite\"          \n[142] \"gold\"                 \"gold1\"                \"gold2\"               \n[145] \"gold3\"                \"gold4\"                \"goldenrod\"           \n[148] \"goldenrod1\"           \"goldenrod2\"           \"goldenrod3\"          \n[151] \"goldenrod4\"           \"gray\"                 \"gray0\"               \n[154] \"gray1\"                \"gray2\"                \"gray3\"               \n[157] \"gray4\"                \"gray5\"                \"gray6\"               \n[160] \"gray7\"                \"gray8\"                \"gray9\"               \n[163] \"gray10\"               \"gray11\"               \"gray12\"              \n[166] \"gray13\"               \"gray14\"               \"gray15\"              \n[169] \"gray16\"               \"gray17\"               \"gray18\"              \n[172] \"gray19\"               \"gray20\"               \"gray21\"              \n[175] \"gray22\"               \"gray23\"               \"gray24\"              \n[178] \"gray25\"               \"gray26\"               \"gray27\"              \n[181] \"gray28\"               \"gray29\"               \"gray30\"              \n[184] \"gray31\"               \"gray32\"               \"gray33\"              \n[187] \"gray34\"               \"gray35\"               \"gray36\"              \n[190] \"gray37\"               \"gray38\"               \"gray39\"              \n[193] \"gray40\"               \"gray41\"               \"gray42\"              \n[196] \"gray43\"               \"gray44\"               \"gray45\"              \n[199] \"gray46\"               \"gray47\"               \"gray48\"              \n[202] \"gray49\"               \"gray50\"               \"gray51\"              \n[205] \"gray52\"               \"gray53\"               \"gray54\"              \n[208] \"gray55\"               \"gray56\"               \"gray57\"              \n[211] \"gray58\"               \"gray59\"               \"gray60\"              \n[214] \"gray61\"               \"gray62\"               \"gray63\"              \n[217] \"gray64\"               \"gray65\"               \"gray66\"              \n[220] \"gray67\"               \"gray68\"               \"gray69\"              \n[223] \"gray70\"               \"gray71\"               \"gray72\"              \n[226] \"gray73\"               \"gray74\"               \"gray75\"              \n[229] \"gray76\"               \"gray77\"               \"gray78\"              \n[232] \"gray79\"               \"gray80\"               \"gray81\"              \n[235] \"gray82\"               \"gray83\"               \"gray84\"              \n[238] \"gray85\"               \"gray86\"               \"gray87\"              \n[241] \"gray88\"               \"gray89\"               \"gray90\"              \n[244] \"gray91\"               \"gray92\"               \"gray93\"              \n[247] \"gray94\"               \"gray95\"               \"gray96\"              \n[250] \"gray97\"               \"gray98\"               \"gray99\"              \n[253] \"gray100\"              \"green\"                \"green1\"              \n[256] \"green2\"               \"green3\"               \"green4\"              \n[259] \"greenyellow\"          \"grey\"                 \"grey0\"               \n[262] \"grey1\"                \"grey2\"                \"grey3\"               \n[265] \"grey4\"                \"grey5\"                \"grey6\"               \n[268] \"grey7\"                \"grey8\"                \"grey9\"               \n[271] \"grey10\"               \"grey11\"               \"grey12\"              \n[274] \"grey13\"               \"grey14\"               \"grey15\"              \n[277] \"grey16\"               \"grey17\"               \"grey18\"              \n[280] \"grey19\"               \"grey20\"               \"grey21\"              \n[283] \"grey22\"               \"grey23\"               \"grey24\"              \n[286] \"grey25\"               \"grey26\"               \"grey27\"              \n[289] \"grey28\"               \"grey29\"               \"grey30\"              \n[292] \"grey31\"               \"grey32\"               \"grey33\"              \n[295] \"grey34\"               \"grey35\"               \"grey36\"              \n[298] \"grey37\"               \"grey38\"               \"grey39\"              \n[301] \"grey40\"               \"grey41\"               \"grey42\"              \n[304] \"grey43\"               \"grey44\"               \"grey45\"              \n[307] \"grey46\"               \"grey47\"               \"grey48\"              \n[310] \"grey49\"               \"grey50\"               \"grey51\"              \n[313] \"grey52\"               \"grey53\"               \"grey54\"              \n[316] \"grey55\"               \"grey56\"               \"grey57\"              \n[319] \"grey58\"               \"grey59\"               \"grey60\"              \n[322] \"grey61\"               \"grey62\"               \"grey63\"              \n[325] \"grey64\"               \"grey65\"               \"grey66\"              \n[328] \"grey67\"               \"grey68\"               \"grey69\"              \n[331] \"grey70\"               \"grey71\"               \"grey72\"              \n[334] \"grey73\"               \"grey74\"               \"grey75\"              \n[337] \"grey76\"               \"grey77\"               \"grey78\"              \n[340] \"grey79\"               \"grey80\"               \"grey81\"              \n[343] \"grey82\"               \"grey83\"               \"grey84\"              \n[346] \"grey85\"               \"grey86\"               \"grey87\"              \n[349] \"grey88\"               \"grey89\"               \"grey90\"              \n[352] \"grey91\"               \"grey92\"               \"grey93\"              \n[355] \"grey94\"               \"grey95\"               \"grey96\"              \n[358] \"grey97\"               \"grey98\"               \"grey99\"              \n[361] \"grey100\"              \"honeydew\"             \"honeydew1\"           \n[364] \"honeydew2\"            \"honeydew3\"            \"honeydew4\"           \n[367] \"hotpink\"              \"hotpink1\"             \"hotpink2\"            \n[370] \"hotpink3\"             \"hotpink4\"             \"indianred\"           \n[373] \"indianred1\"           \"indianred2\"           \"indianred3\"          \n[376] \"indianred4\"           \"ivory\"                \"ivory1\"              \n[379] \"ivory2\"               \"ivory3\"               \"ivory4\"              \n[382] \"khaki\"                \"khaki1\"               \"khaki2\"              \n[385] \"khaki3\"               \"khaki4\"               \"lavender\"            \n[388] \"lavenderblush\"        \"lavenderblush1\"       \"lavenderblush2\"      \n[391] \"lavenderblush3\"       \"lavenderblush4\"       \"lawngreen\"           \n[394] \"lemonchiffon\"         \"lemonchiffon1\"        \"lemonchiffon2\"       \n[397] \"lemonchiffon3\"        \"lemonchiffon4\"        \"lightblue\"           \n[400] \"lightblue1\"           \"lightblue2\"           \"lightblue3\"          \n[403] \"lightblue4\"           \"lightcoral\"           \"lightcyan\"           \n[406] \"lightcyan1\"           \"lightcyan2\"           \"lightcyan3\"          \n[409] \"lightcyan4\"           \"lightgoldenrod\"       \"lightgoldenrod1\"     \n[412] \"lightgoldenrod2\"      \"lightgoldenrod3\"      \"lightgoldenrod4\"     \n[415] \"lightgoldenrodyellow\" \"lightgray\"            \"lightgreen\"          \n[418] \"lightgrey\"            \"lightpink\"            \"lightpink1\"          \n[421] \"lightpink2\"           \"lightpink3\"           \"lightpink4\"          \n[424] \"lightsalmon\"          \"lightsalmon1\"         \"lightsalmon2\"        \n[427] \"lightsalmon3\"         \"lightsalmon4\"         \"lightseagreen\"       \n[430] \"lightskyblue\"         \"lightskyblue1\"        \"lightskyblue2\"       \n[433] \"lightskyblue3\"        \"lightskyblue4\"        \"lightslateblue\"      \n[436] \"lightslategray\"       \"lightslategrey\"       \"lightsteelblue\"      \n[439] \"lightsteelblue1\"      \"lightsteelblue2\"      \"lightsteelblue3\"     \n[442] \"lightsteelblue4\"      \"lightyellow\"          \"lightyellow1\"        \n[445] \"lightyellow2\"         \"lightyellow3\"         \"lightyellow4\"        \n[448] \"limegreen\"            \"linen\"                \"magenta\"             \n[451] \"magenta1\"             \"magenta2\"             \"magenta3\"            \n[454] \"magenta4\"             \"maroon\"               \"maroon1\"             \n[457] \"maroon2\"              \"maroon3\"              \"maroon4\"             \n[460] \"mediumaquamarine\"     \"mediumblue\"           \"mediumorchid\"        \n[463] \"mediumorchid1\"        \"mediumorchid2\"        \"mediumorchid3\"       \n[466] \"mediumorchid4\"        \"mediumpurple\"         \"mediumpurple1\"       \n[469] \"mediumpurple2\"        \"mediumpurple3\"        \"mediumpurple4\"       \n[472] \"mediumseagreen\"       \"mediumslateblue\"      \"mediumspringgreen\"   \n[475] \"mediumturquoise\"      \"mediumvioletred\"      \"midnightblue\"        \n[478] \"mintcream\"            \"mistyrose\"            \"mistyrose1\"          \n[481] \"mistyrose2\"           \"mistyrose3\"           \"mistyrose4\"          \n[484] \"moccasin\"             \"navajowhite\"          \"navajowhite1\"        \n[487] \"navajowhite2\"         \"navajowhite3\"         \"navajowhite4\"        \n[490] \"navy\"                 \"navyblue\"             \"oldlace\"             \n[493] \"olivedrab\"            \"olivedrab1\"           \"olivedrab2\"          \n[496] \"olivedrab3\"           \"olivedrab4\"           \"orange\"              \n[499] \"orange1\"              \"orange2\"              \"orange3\"             \n[502] \"orange4\"              \"orangered\"            \"orangered1\"          \n[505] \"orangered2\"           \"orangered3\"           \"orangered4\"          \n[508] \"orchid\"               \"orchid1\"              \"orchid2\"             \n[511] \"orchid3\"              \"orchid4\"              \"palegoldenrod\"       \n[514] \"palegreen\"            \"palegreen1\"           \"palegreen2\"          \n[517] \"palegreen3\"           \"palegreen4\"           \"paleturquoise\"       \n[520] \"paleturquoise1\"       \"paleturquoise2\"       \"paleturquoise3\"      \n[523] \"paleturquoise4\"       \"palevioletred\"        \"palevioletred1\"      \n[526] \"palevioletred2\"       \"palevioletred3\"       \"palevioletred4\"      \n[529] \"papayawhip\"           \"peachpuff\"            \"peachpuff1\"          \n[532] \"peachpuff2\"           \"peachpuff3\"           \"peachpuff4\"          \n[535] \"peru\"                 \"pink\"                 \"pink1\"               \n[538] \"pink2\"                \"pink3\"                \"pink4\"               \n[541] \"plum\"                 \"plum1\"                \"plum2\"               \n[544] \"plum3\"                \"plum4\"                \"powderblue\"          \n[547] \"purple\"               \"purple1\"              \"purple2\"             \n[550] \"purple3\"              \"purple4\"              \"red\"                 \n[553] \"red1\"                 \"red2\"                 \"red3\"                \n[556] \"red4\"                 \"rosybrown\"            \"rosybrown1\"          \n[559] \"rosybrown2\"           \"rosybrown3\"           \"rosybrown4\"          \n[562] \"royalblue\"            \"royalblue1\"           \"royalblue2\"          \n[565] \"royalblue3\"           \"royalblue4\"           \"saddlebrown\"         \n[568] \"salmon\"               \"salmon1\"              \"salmon2\"             \n[571] \"salmon3\"              \"salmon4\"              \"sandybrown\"          \n[574] \"seagreen\"             \"seagreen1\"            \"seagreen2\"           \n[577] \"seagreen3\"            \"seagreen4\"            \"seashell\"            \n[580] \"seashell1\"            \"seashell2\"            \"seashell3\"           \n[583] \"seashell4\"            \"sienna\"               \"sienna1\"             \n[586] \"sienna2\"              \"sienna3\"              \"sienna4\"             \n[589] \"skyblue\"              \"skyblue1\"             \"skyblue2\"            \n[592] \"skyblue3\"             \"skyblue4\"             \"slateblue\"           \n[595] \"slateblue1\"           \"slateblue2\"           \"slateblue3\"          \n[598] \"slateblue4\"           \"slategray\"            \"slategray1\"          \n[601] \"slategray2\"           \"slategray3\"           \"slategray4\"          \n[604] \"slategrey\"            \"snow\"                 \"snow1\"               \n[607] \"snow2\"                \"snow3\"                \"snow4\"               \n[610] \"springgreen\"          \"springgreen1\"         \"springgreen2\"        \n[613] \"springgreen3\"         \"springgreen4\"         \"steelblue\"           \n[616] \"steelblue1\"           \"steelblue2\"           \"steelblue3\"          \n[619] \"steelblue4\"           \"tan\"                  \"tan1\"                \n[622] \"tan2\"                 \"tan3\"                 \"tan4\"                \n[625] \"thistle\"              \"thistle1\"             \"thistle2\"            \n[628] \"thistle3\"             \"thistle4\"             \"tomato\"              \n[631] \"tomato1\"              \"tomato2\"              \"tomato3\"             \n[634] \"tomato4\"              \"turquoise\"            \"turquoise1\"          \n[637] \"turquoise2\"           \"turquoise3\"           \"turquoise4\"          \n[640] \"violet\"               \"violetred\"            \"violetred1\"          \n[643] \"violetred2\"           \"violetred3\"           \"violetred4\"          \n[646] \"wheat\"                \"wheat1\"               \"wheat2\"              \n[649] \"wheat3\"               \"wheat4\"               \"whitesmoke\"          \n[652] \"yellow\"               \"yellow1\"              \"yellow2\"             \n[655] \"yellow3\"              \"yellow4\"              \"yellowgreen\"         \n\n\nWe can change the color of the bars using fill, color, and the name of the color. fill is the inside of the bar, color is the border of the bar.\n\nggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar(fill='aquamarine', color='black')\n\n\n\n\n\n\n\n\nWe can also use 6 digit hex color. You can use online tools to get hex colors.\n\nggplot(data = inat_year,  mapping = aes(x = year)) +\n  geom_bar(fill='#75cd5e')\n\n\n\n\n\n\n\n\nWe can change the color of the lines and points using color.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y=count)) +\n  geom_line(color='#75cd5e') +\n  geom_point(color='blue')",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#color-scales",
    "href": "lessons/creating-charts.html#color-scales",
    "title": "Creating charts",
    "section": "Color scales",
    "text": "Color scales\nFor the stacked bar chart example, ggplot2 automatically selected the colors for the values.\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar() \n\n\n\n\n\n\n\n\nggplot2 has color scale function that produces a predefined list of colors. The default color scale isn’t always ideal: it isn’t friendly to viewers with colorblindness and it doesn’t translate well to grayscale. However, ggplot2 comes with quite a few other color scales, including the viridis scales, which are designed to be colorblind and grayscale friendly. We can change color scales by adding scale_color_  and scale_fill_ functions to our plots. Since we are dealing with bar charts, we want scale_fill_.\n\n\n\n\n\n\nNote\n\n\n\nIn mathematics and statistics, values can be discrete or continuous. Discrete value have distinct values such as whole numbers (1, 2, 3) or categories (states: California, Oregon). Continuous values represent an infinite number of possible values such as fractions and decimals (1.1, 2-1/2, 2-3/4, 3.9).\n\n\nColor scale functions can be discrete or continuous. Let’s add viridis scale to the previous bar chart. We want to use scale_fill_viridis_d() since year has discrete values.\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar() +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nIf you try to use viridis continuous function, you will get an error: “Discrete values supplied to continuous scale.”\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar() +\n  scale_fill_viridis_c()\n\nscale_fill_brewer() is another color scale.\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar() +\n  scale_fill_brewer()\n\n\n\n\n\n\n\n\nWe can also use a custom set of colors with scale_fill_manual() , and passing in a vector of colors.\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar() +\n  scale_fill_manual(values=c(\"#DADAEB\", \"#9E9AC8\", \"#6A51A3\"))\n\n\n\n\n\n\n\n\nFor more information about color scales, visit Introverse color scales page.",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-axis-breaks",
    "href": "lessons/creating-charts.html#changing-axis-breaks",
    "title": "Creating charts",
    "section": "Changing axis breaks",
    "text": "Changing axis breaks\nggplot2 will automatically break the axis into multiple chunks and add labels for the values. We can use n.breaks argument for scale_x_continuous() and scale_y_continuous() to adjust the number of breaks along the axis. ggplot2 may choose a slightly different number to ensure nice break labels.\nLet’s add more breaks along the year x axis and count y axis.\n\nggplot(data = inat_year,  \n       mapping = aes(x = year)) +\n  geom_bar()  +\n  scale_fill_viridis_d() +\n  scale_x_continuous(n.breaks=8) +\n  scale_y_continuous(n.breaks=7)\n\n\n\n\n\n\n\n\nNow we have labels for every year and every 5000 observations.",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-themes",
    "href": "lessons/creating-charts.html#changing-themes",
    "title": "Creating charts",
    "section": "Changing themes",
    "text": "Changing themes\nLet’s assign a plot to an object so can refer to it later.\n\nmyplot &lt;- ggplot(data = inat_year,  \n                 mapping = aes(x = year)) +\n  geom_bar(fill='#75cd5e') +\n  scale_x_continuous(n.breaks = 8) \n \n\n  myplot\n\n\n\n\n\n\n\n\nggplot has built in themes that affects the overall appearance of a plot. To see a list of available themes in ggplot, visit ggplot2 themes\nLet’s add the black-and-white theme theme_bw() to our plot:\n\nmyplot + \n  theme_bw()\n\n\n\n\n\n\n\n\nTo individually change parts of a plot, we can use the theme() function, which can take many different arguments to change things about the text, grid lines, background color, and more.\nLet’s rotate the x axis labels by 90 degrees so the text is vertical.\n\nmyplot + \n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\n\n\n\n\nLet’s change the size of the text on our axis titles. We can do this by specifying that the axis.title should be an element_text() with size set to 14.\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\nAnother change we might want to make is to remove the vertical grid lines. To do this, we will change the panel.grid.major.x and panel.grid.major.x to an element_blank().\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nBecause there are so many possible arguments to the theme() function, it can sometimes be hard to find the right one. Here are some tips for figuring out how to modify a plot element:\n\ntype out theme(), put your cursor between the parentheses, and hit Tab to bring up a list of arguments\n\nyou can scroll through the arguments, or start typing, which will shorten the list of potential matches\n\nlike many things in the tidyverse, similar argument start with similar names\n\nthere are axis, legend, panel, plot, and strip arguments\n\narguments have hierarchy\n\ntext controls all text in the whole plot\naxis.title controls the text for the axis titles\naxis.title.x controls the text for the x axis title",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-labels",
    "href": "lessons/creating-charts.html#changing-labels",
    "title": "Creating charts",
    "section": "Changing labels",
    "text": "Changing labels\nWe can customize the axis labels and add a chart title using labs(). title is the title of the chart. subtitle is the subtitle. x is the label for the x axis. y is the label for the y axis.\n\nmyplot +\n  labs(title = \"CNC Los Angeles\",\n       subtitle=\"Observations per year\",\n       x = \"Year\",\n       y = \"Observations\")\n\n\n\n\n\n\n\n\nWe can also change the title in the legend using labs()\n\nggplot(data = inat_year, \n       mapping = aes(x = year, fill = quality_grade)) +\n  geom_bar() +\n  labs(fill = \"Quality Grade\")",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#exercise-2-customizing-a-plot",
    "href": "lessons/creating-charts.html#exercise-2-customizing-a-plot",
    "title": "Creating charts",
    "section": "Exercise 2: Customizing a plot",
    "text": "Exercise 2: Customizing a plot\nTake the my_obs_by_year data frame from exercise 1 and create a plot. Customize the appearance or the chart. Here are some ideas.\n\nadd a title\nchoose the one of the built in themes\nchange the axis titles\nchange the colors of the bars or lines\n\n\n\nmy_chart &lt;- ggplot(data = my_obs_by_year, \n                   mapping = aes(x = year)) +\n  geom_bar(fill=\"tan\")\n\nmy_chart +\n  theme_classic() +\n  labs(title = \"CNC Los Angeles\",  x = \"Year\",  y = \"Observations\")",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#faceting",
    "href": "lessons/creating-charts.html#faceting",
    "title": "Creating charts",
    "section": "Faceting",
    "text": "Faceting\nOne of the most powerful features of ggplot is the ability to quickly split a plot into multiple smaller plots based on one or more columns in the data frame, which is called faceting. Use the facet_wrap() function to generate a series of smaller plots, and pass in the selected column using vars(&lt;column&gt;).\nLet’s facet the iNaturalist observations by quality_grade .\n\nggplot(data = inat_year, \n       mapping = aes(x = year)) +\n  geom_bar() +                                                          \n  facet_wrap(vars(quality_grade))\n\n\n\n\n\n\n\n\nWe can also put the charts in a single column using ncol = 1.\n\nggplot(data = inat_year, \n       mapping = aes(x = year)) +\n  geom_bar() +                                                          \n  facet_wrap(vars(quality_grade), ncol = 1)",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#saving-plots",
    "href": "lessons/creating-charts.html#saving-plots",
    "title": "Creating charts",
    "section": "Saving plots",
    "text": "Saving plots\nOnce we are happy with our plot, we can save the plot.\nAssign the plot to an object. Then run ggsave() to save our plot. The first argument we give is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\n# create plot\nfinalplot &lt;- myplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title = element_text(face = \"bold\", size = 20)) +\n  labs(title = \"CNC Los Angeles\",\n       subtitle=\"Observations per year\",\n       x = \"Year\",\n       y = \"Observations\")\n\n# save plot\nggsave(filename = here('results/observations_per_year.jpg'), plot = finalplot, \n       height = 6, width = 8)",
    "crumbs": [
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html",
    "href": "lessons/additional-analysis.html",
    "title": "Additional Analysis",
    "section": "",
    "text": "In this section, we will show a few more examples of maps, charts, and code.\nFor more examples of charts and graphs visit R Graph Gallery.\nsource(here('scripts/data_utils.R')) loads a script file with custom functions created for this workshop.\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle vector geospatial data\nlibrary(mapview) # create interactive maps\nlibrary(basemaps) # add basemap\nlibrary(here) # file paths\n\nsource(here('scripts/data_utils.R'))\nThere is a bug with sf https://github.com/r-spatial/sf/issues/1762. This bit of code is fix for the bug.\nsf_use_s2(FALSE)\n\nSpherical geometry (s2) switched off\nFirst, we need to read data from the CNC iNaturalist observation file.\ninat_data &lt;- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))\nLet’s add a year column to iNaturalist data.\ninat_year &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))\nLet’s add a geometry column\ninat_sf &lt;- inat_data %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326) %&gt;% \n  select(user_login, common_name, scientific_name, observed_on,  url, quality_grade)",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#dodged-bar-charts",
    "href": "lessons/additional-analysis.html#dodged-bar-charts",
    "title": "Additional Analysis",
    "section": "Dodged bar charts",
    "text": "Dodged bar charts\nTo create side-by-side dodged bar charts, use position=position_dodge()\n\nggplot(data = inat_year , \n       mapping = aes(x = year, fill = quality_grade))  +\n  geom_bar(position = position_dodge(preserve = 'single'))",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#multiple-line-charts",
    "href": "lessons/additional-analysis.html#multiple-line-charts",
    "title": "Additional Analysis",
    "section": "Multiple line charts",
    "text": "Multiple line charts\nIf we want a chart with multiple lines, we need to create a data frame with three columns: one column x axis, one column for y axis, and one column for color.\n\nyear_quality_count &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))  %&gt;%\n  count(year, quality_grade,  name='count') \n\nyear_quality_count\n\n# A tibble: 27 × 3\n    year quality_grade count\n   &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1  2016 casual         1819\n 2  2016 needs_id       2605\n 3  2016 research       5968\n 4  2017 casual         3045\n 5  2017 needs_id       4855\n 6  2017 research       9595\n 7  2018 casual         2492\n 8  2018 needs_id       5698\n 9  2018 research      10974\n10  2019 casual         5696\n# ℹ 17 more rows\n\n\n\nggplot(data = year_quality_count, \n       mapping = aes(x = year, y = count, color = quality_grade)) +\n  geom_line()",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#multiple-charts",
    "href": "lessons/additional-analysis.html#multiple-charts",
    "title": "Additional Analysis",
    "section": "Multiple charts",
    "text": "Multiple charts\nEach geom_ adds a layer to the chart. We can have multiple chart layers in one chart by having multiple geom_.\nLet’s create a bar and line chart that uses the same data and mapping.\n\ninat_year_count &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='count')  \n\ninat_year_count\n\n# A tibble: 9 × 2\n   year count\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\n\nggplot(data = inat_year_count,\n       mapping = aes(x = year, y = count)) +\n  geom_col() +\n  geom_line()\n\n\n\n\n\n\n\n\nLet’s create a dodged bar and line chart that uses the different data and different mapping. Instead of putting the information inside ggplot(), we put information in each geom_.\n\nggplot() +\n  geom_bar(data = inat_year , \n       mapping = aes(x = year, fill = quality_grade),\n       position = position_dodge(preserve = 'single')) +\n  geom_line(data = inat_year_count, \n       mapping = aes(x = year, y = count))",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#adding-labels-and-basemaps-to-ggplot-map",
    "href": "lessons/additional-analysis.html#adding-labels-and-basemaps-to-ggplot-map",
    "title": "Additional Analysis",
    "section": "Adding labels and basemaps to ggplot map",
    "text": "Adding labels and basemaps to ggplot map\nLet’s get the observation counts for neighborhoods around Exposition Park\n\nla_neighborhoods_sf &lt;- read_sf(here('data/raw/la_times_la_county_neighborhoods.json'))\n\nGet Exposition Park neighborhood\n\nexpo_park_sf &lt;- la_neighborhoods_sf %&gt;% \n  filter(name=='Exposition Park')\n\nexpo_park_sf\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.3181 ymin: 34.01081 xmax: -118.2797 ymax: 34.02571\nGeodetic CRS:  WGS 84\n# A tibble: 1 × 3\n  name            slug                                                  geometry\n* &lt;chr&gt;           &lt;chr&gt;                                       &lt;MULTIPOLYGON [°]&gt;\n1 Exposition Park exposition-park (((-118.3054 34.02571, -118.3048 34.02561, -1…\n\n\nGet neighborhoods surrounding Exposition Park\n\nexpo_area_sf &lt;- la_neighborhoods_sf[lengths(st_intersects(la_neighborhoods_sf, expo_park_sf)) &gt; 0, ]\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\nexpo_area_sf &lt;-  expo_area_sf %&gt;%\n  select(name)\n\nexpo_area_sf\n\nSimple feature collection with 7 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.3357 ymin: 33.99301 xmax: -118.2505 ymax: 34.03781\nGeodetic CRS:  WGS 84\n# A tibble: 7 × 2\n  name                                                                  geometry\n  &lt;chr&gt;                                                       &lt;MULTIPOLYGON [°]&gt;\n1 Adams-Normandie        (((-118.309 34.03741, -118.3057 34.03731, -118.3015 34…\n2 Exposition Park        (((-118.3054 34.02571, -118.3048 34.02561, -118.3041 3…\n3 Historic South-Central (((-118.2564 34.00481, -118.2564 34.00381, -118.2587 3…\n4 Jefferson Park         (((-118.309 34.03641, -118.3091 34.03491, -118.309 34.…\n5 Leimert Park           (((-118.3181 34.01461, -118.318 34.01091, -118.317 34.…\n6 University Park        (((-118.2828 34.01842, -118.2864 34.01841, -118.2892 3…\n7 Vermont Square         (((-118.2827 34.01111, -118.282 34.01101, -118.2815 34…\n\n\nUse custom function add_inat_count_to_boundary_sf() to count the number of iNaturalist observations per neighborhood.\n\nexpo_area_count_sf &lt;- add_inat_count_to_boundary_sf(inat_sf, expo_area_sf, 'name')\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\nexpo_area_count_sf\n\nSimple feature collection with 7 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.3357 ymin: 33.99301 xmax: -118.2505 ymax: 34.03781\nGeodetic CRS:  WGS 84\n# A tibble: 7 × 3\n  name                                               geometry observations_count\n  &lt;chr&gt;                                    &lt;MULTIPOLYGON [°]&gt;              &lt;int&gt;\n1 Adams-Normandie        (((-118.309 34.03741, -118.3057 34.…                132\n2 Exposition Park        (((-118.3054 34.02571, -118.3048 34…               3160\n3 Historic South-Central (((-118.2564 34.00481, -118.2564 34…                139\n4 Jefferson Park         (((-118.309 34.03641, -118.3091 34.…                382\n5 Leimert Park           (((-118.3181 34.01461, -118.318 34.…                 81\n6 University Park        (((-118.2828 34.01842, -118.2864 34…               1466\n7 Vermont Square         (((-118.2827 34.01111, -118.282 34.…                 95\n\n\nCreate map with labels that show counts per neighborhood.\n\nggplot(expo_area_count_sf, aes(label=paste0(name,': ', observations_count))) +\n  geom_sf() +\n  geom_sf_label(fill = \"white\" )  \n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n\n\n\n\n\n\n\n\n\nWe can use basemaps package to add a basmap to ggplot maps.\nChange crs to 3857 since basemaps package uses 3857.\n\nexpo_area_count_sf &lt;- st_transform(expo_area_count_sf,  crs = st_crs(3857))\n\nCreate map with labels that show counts and basemap. Use basemap_gglayer() and scale_fill_identity() to add a basemap. Use aes(fill=alpha()) to make the fill for each neighborhood tranparent yellow.\n\nggplot(expo_area_count_sf) +\n  basemap_gglayer(expo_area_count_sf) + \n  scale_fill_identity() +\n  geom_sf( mapping=aes(fill=alpha(\"yellow\", .05))) +\n  geom_sf_label( mapping=aes(label = paste0(name, ': ',observations_count)) )  +\n  theme_void()\n\nLoading basemap 'voyager' from map service 'carto'...",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#compare-inaturalist-observations-per-region-to-another-value",
    "href": "lessons/additional-analysis.html#compare-inaturalist-observations-per-region-to-another-value",
    "title": "Additional Analysis",
    "section": "Compare iNaturalist observations per region to another value",
    "text": "Compare iNaturalist observations per region to another value\nWe’ve provided a couple of maps with multiple boundaries that includes data values for each boundary. For instance the LA County Environmental Justice Screening Method has environmental impact scores for various areas in LA County.\nLet’s compare iNaturalist observations with EJSM Cumulative Impact Score for each area.\n\nejsm_sf &lt;- read_sf(here('data/raw/EJSM_Scores-shp/6cbc6914-690f-48ec-a54f-2649a8ddb321202041-1-139ir98.m1ys.shp'))\n\nglimpse(ejsm_sf)\n\nRows: 2,343\nColumns: 10\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ Tract_1    &lt;dbl&gt; 6037920336, 6037920044, 6037573003, 6037571704, 6037570403,…\n$ CIscore    &lt;int&gt; 10, 4, 13, 13, 17, 15, 14, 10, 11, 17, 15, 14, 12, 11, 13, …\n$ HazScore   &lt;int&gt; 3, 1, 5, 3, 5, 3, 4, 1, 3, 5, 4, 4, 4, 4, 5, 3, 2, 4, 5, 3,…\n$ HealthScor &lt;int&gt; 1, 1, 3, 2, 3, 4, 2, 3, 4, 5, 4, 4, 4, 2, 2, 3, 3, 3, 5, 3,…\n$ SVscore    &lt;int&gt; 4, 1, 3, 4, 5, 4, 3, 4, 2, 3, 3, 4, 2, 3, 5, 3, 3, 3, 2, 2,…\n$ CCVscore   &lt;int&gt; 2, 1, 2, 4, 4, 4, 5, 2, 2, 4, 4, 2, 2, 2, 1, 5, 5, 5, 4, 3,…\n$ Shape__Are &lt;dbl&gt; 2438559.8, 1470811.2, 652816.8, 699401.1, 831783.9, 617212.…\n$ Shape__Len &lt;dbl&gt; 8124.373, 5545.298, 3310.744, 4113.477, 3887.000, 3495.394,…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((-13194561 4..., MULTIPOLYGON (…\n\n\nCreate a choropleth map using geom_sf() that shows Cumulative Impact Score.\n\nggplot(ejsm_sf, aes(fill = CIscore)) +\n  geom_sf()\n\n\n\n\n\n\n\n\nCheck if the EJSM has the same CRS as the iNaturalist data.\n\nst_crs(ejsm_sf) == st_crs(inat_sf)\n\n[1] FALSE\n\n\nUpdate CRS\n\nejsm_sf &lt;- st_transform(ejsm_sf,  crs = st_crs(inat_sf))\n\nst_crs(ejsm_sf) == st_crs(inat_sf)\n\n[1] TRUE\n\n\nUse custom function add_inat_count_to_boundary_sf() to count the number of iNaturalist observations per region and add the count to ejsm_sf.\n\nejsm_inat_sf &lt;- add_inat_count_to_boundary_sf(inat_sf, ejsm_sf, 'OBJECTID')\n\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\nalthough coordinates are longitude/latitude, st_intersects assumes that they\nare planar\n\nglimpse(ejsm_inat_sf)\n\nRows: 2,343\nColumns: 11\n$ OBJECTID           &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ Tract_1            &lt;dbl&gt; 6037920336, 6037920044, 6037573003, 6037571704, 603…\n$ CIscore            &lt;int&gt; 10, 4, 13, 13, 17, 15, 14, 10, 11, 17, 15, 14, 12, …\n$ HazScore           &lt;int&gt; 3, 1, 5, 3, 5, 3, 4, 1, 3, 5, 4, 4, 4, 4, 5, 3, 2, …\n$ HealthScor         &lt;int&gt; 1, 1, 3, 2, 3, 4, 2, 3, 4, 5, 4, 4, 4, 2, 2, 3, 3, …\n$ SVscore            &lt;int&gt; 4, 1, 3, 4, 5, 4, 3, 4, 2, 3, 3, 4, 2, 3, 5, 3, 3, …\n$ CCVscore           &lt;int&gt; 2, 1, 2, 4, 4, 4, 5, 2, 2, 4, 4, 2, 2, 2, 1, 5, 5, …\n$ Shape__Are         &lt;dbl&gt; 2438559.8, 1470811.2, 652816.8, 699401.1, 831783.9,…\n$ Shape__Len         &lt;dbl&gt; 8124.373, 5545.298, 3310.744, 4113.477, 3887.000, 3…\n$ geometry           &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-118.5288 3..., MULTIP…\n$ observations_count &lt;int&gt; 11, NA, 4, 5, 3, 4, 4, 1, 11, 2, 5, 4, 16, 13, 21, …\n\n\nAnother way to show iNaturalist counts per region is to draw a symbol in each area, and base the size of the symbol on the iNaturalist counts.\nst_centroid from sf generates a point at the center of each region. Instead of drawing a polygon, we draw a point that represents the center of the polygon\n\ncentroid_sf &lt;- st_centroid(ejsm_inat_sf) %&gt;%\n  select(OBJECTID, observations_count)\n\nWarning: st_centroid assumes attributes are constant over geometries\n\n\nWarning in st_centroid.sfc(st_geometry(x), of_largest_polygon =\nof_largest_polygon): st_centroid does not give correct centroids for\nlongitude/latitude data\n\nglimpse(centroid_sf)\n\nRows: 2,343\nColumns: 3\n$ OBJECTID           &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ observations_count &lt;int&gt; 11, NA, 4, 5, 3, 4, 4, 1, 11, 2, 5, 4, 16, 13, 21, …\n$ geometry           &lt;POINT [°]&gt; POINT (-118.5365 34.38503), POINT (-118.5163 …\n\n\n\nggplot() +\n  geom_sf(data = centroid_sf) \n\n\n\n\n\n\n\n\nWe can create a map that uses color to show CIscore per region, and uses circle size to show number iNaturalist observations per region.\nWe can use aes(size=&lt;column&gt;) to set the size of the circle based on observations_count column.\n\nggplot() +\n  geom_sf(data=ejsm_inat_sf, aes(fill = CIscore)) +\n  geom_sf(data = centroid_sf, aes(size = observations_count)) \n\nWarning: Removed 137 rows containing missing values or values outside the scale range\n(`geom_sf()`).\n\n\n\n\n\n\n\n\n\nWe can use cex to set the size of the circle based on observations_count column.\n\nejsm_inat_basic_sf &lt;- ejsm_inat_sf %&gt;% \n  select(CIscore)\n\nmapview(ejsm_inat_basic_sf,  \n        zcol = 'CIscore') +\n  mapview(centroid_sf, cex=\"observations_count\", \n          zcol=\"observations_count\",legend=FALSE, col.regions='black')",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/additional-analysis.html#download-images",
    "href": "lessons/additional-analysis.html#download-images",
    "title": "Additional Analysis",
    "section": "Download images",
    "text": "Download images\nWe provide a custom function to download images for a data frame of iNaturalist observations.\nJust make sure you follow the license terms for the observations. Here’s a summary of the various Creative Commons licenses.\n\ntable(inat_data$license)\n\n\n      CC-BY    CC-BY-NC CC-BY-NC-ND CC-BY-NC-SA    CC-BY-ND    CC-BY-SA \n       5384      129677        1199        2934          35          79 \n        CC0 \n       4934 \n\n\nThe observations are ordered from oldest date to newest date. Use filter() to select the observation you want. We can use slice to limit the number observation.\nUse slice(start:end) to get observations from start row number to end row number. In this case we are getting the first five Western fence lizard observations with CCO license.\n\nmy_inat2 &lt;- inat_data %&gt;%\n  filter(common_name == 'Western Fence Lizard') %&gt;%\n  filter(license == 'CC0') %&gt;%\n  slice(1:5)\n\ntable(my_inat2$observed_on)\n\n\n2016-04-15 2016-04-17 2016-04-18 2016-04-19 2017-04-17 \n         1          1          1          1          1 \n\n\nIf you want to get a specified number of randomly selected rows, use slice_sample(n = &lt;number&gt;). In this case we are getting five random Western fence lizard observations with CCO license.\n\nmy_inat &lt;- inat_data %&gt;%\n  filter(common_name == 'Western Fence Lizard') %&gt;%\n  filter(license == 'CC0') %&gt;%\n  slice_sample(n=5)\n\ntable(my_inat$observed_on)\n\n\n2016-04-15 2016-04-19 2021-05-03 2023-04-29 2024-04-28 \n         1          1          1          1          1 \n\n\nOnce we have the observations we want, call custom function download_inaturalist_images() to download the images for the observations. The images are saved in the results directory. A new directory will be created for each scientific_name. The image name will contain the scientific name, observation id, username and license.\n\ndownload_inaturalist_images(my_inat)",
    "crumbs": [
      "Additional Analysis"
    ]
  },
  {
    "objectID": "lessons/next-steps.html",
    "href": "lessons/next-steps.html",
    "title": "Next steps",
    "section": "",
    "text": "We have covered various ways to do basic analyze iNaturalist data. Next step is for you to come up with some questions, and analyze the CNC iNaturalist data.",
    "crumbs": [
      "Next steps"
    ]
  },
  {
    "objectID": "lessons/next-steps.html#developing-your-analysis",
    "href": "lessons/next-steps.html#developing-your-analysis",
    "title": "Next steps",
    "section": "Developing your analysis",
    "text": "Developing your analysis\n\nBefore you start writing your own code\n\nCome up with one or more questions that you are interested in. Pick questions that mean something to you. It is your curiosity that will motivate you to learn how to use R to look for answers to your questions.\nLearning a programming language is like learning spoken/written languages - it will take practice to get better. Since this is the first programming experience for many of you, it is perfectly normal to copy others while gradually forming a mental model of what is going on.\nReview the online lessons and use Codespace to run the examples in ‘scripts/lesson-scripts’.\nWe did one exercise in class. Optionally, do the rest of the exercises in the “Working with data”, “Creating maps”, and “Creating charts” sections to get more practice with coding. Click the “Show solution” button on the online lesson to see the solution.\nOnce you formed some questions, figure out how to go from 191K City Nature Challenge observations to the observation you want. I provided a lot of coding examples, but I don’t expect anyone to use all the examples for their analysis. Think of each code example as one building block. It’s up to you to pick the blocks you need to build your analysis.\nIf you want to study one or more species, review the examples that filter by species by common_name and scientific_name. If you want to study a group of species, review the higher taxa examples. If you want to limit the observations to a particular location, review the examples that show filtering observations using geographic boundaries and buffer. If you want to compare observations in different areas, review the examples about counting the number of observations per neighborhood. If you want to study your own observations, review the examples about filtering by iNaturalist user_login. If you want to mimic the data standards used by scientists, review the examples about filter by research grade and licenses. If you want to limit the observations by year, review the examples about filtering by years. If you want to remove some of the biases in community science data, review normalizing iNaturalist data examples. Review the datasets listed on the “Using to other datasets” page to see if any of the datasets are useful for you.\n\n\n\nWriting your own code\nOnce you have a rough idea about what you want to analyze, you can start writing code for your analysis.\n\nRead the “Restart Codespace” section to restart Codespace. Read the “Stop Codespace” section to learn how to stop Codespace at the end of your work session.\nCreate script files to save your work. Remember to end the script files with .R.\nCopy and paste examples provided in the lessons, and adjust them to fit your needs. When you have something that kinda works, save the script file and the results. Save your scripts often since RStudio does not have auto-save functionality. Save the scripts to the scripts folder. Save any CSVs and images you generate to the results folder.\nYou can add comments in your scripts to help remind you of what the code does.\n\n\n# Comments are lines that start with #. Comments are not processed by R. \n# Comments are lines that we add to help explain what is going on.\n\n# read the CNC CSV\n\n# read file that has Expostion park boundaries\n\n# get my research grade observations in Exposition Park.\n\n\nData exploration is an iterative process. Chances are, you won’t get your final results on your first day. Try different way to look at the data. Use filter(), select(), count(), and mutate() to change the data. Then create summary tables, charts, and/or maps to find patterns. Repeat the process. If you had an idea for an analysis, but the idea didn’t reveal any interesting patterns, you can modify your analysis. If you find something interesting, modify your query to focus on that pattern. You can create multiple script files as your analysis evolves.\nAs you get more practice reading, copying, writing, and editing R code, your mental model what the R code is doing will evolve. Some things that didn’t make sense at first, will begin to click.\nAs you are analyzing the data, think about how you want to present your results. Since animals, plants, fungi, etc can’t speak for themselves, we need to use our voice to advocate for them. Your presentation should represent your analysis, your voice, and your interests.\nAttend the office hours or email me if you have questions.",
    "crumbs": [
      "Next steps"
    ]
  }
]