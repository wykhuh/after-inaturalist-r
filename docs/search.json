[
  {
    "objectID": "lessons/working-with-data.html",
    "href": "lessons/working-with-data.html",
    "title": "Working with iNaturalist data",
    "section": "",
    "text": "How do you work with iNaturalist CSV data in R?\n\n\n\n\n\nImport CSV data into R.\nSelect rows and columns of data.frames.\nUse pipes to link steps together into pipelines.\nCreate new data.frame columns using existing columns.\nExport data to a CSV file.",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#questions",
    "href": "lessons/working-with-data.html#questions",
    "title": "Working with iNaturalist data",
    "section": "",
    "text": "How do you work with iNaturalist CSV data in R?",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#objectives",
    "href": "lessons/working-with-data.html#objectives",
    "title": "Working with iNaturalist data",
    "section": "",
    "text": "Import CSV data into R.\nSelect rows and columns of data.frames.\nUse pipes to link steps together into pipelines.\nCreate new data.frame columns using existing columns.\nExport data to a CSV file.",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#importing-inaturalist-data",
    "href": "lessons/working-with-data.html#importing-inaturalist-data",
    "title": "Working with iNaturalist data",
    "section": "Importing iNaturalist data",
    "text": "Importing iNaturalist data\nA CSV of iNaturalist observations for City Nature Challenge Los Angeles from 2015 to 2024 is located at “data/cleaned/cnc-los-angeles-observations.csv”. We are going to read that CSV using R.\n\nReading a file\nIn order to analyze the iNaturalist csv, we need to load readr, lubridate and dplyr packages.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(lubridate) # manipulate dates\n\nWe will use the read_csv() function from readr package to read the iNaturalist CSV. We will pass in a relative path to the CSV file as an argument for read_csv().\nread_csv() will return the content of the file. In order for us access the data later on, we need to assign the content to an object called inat_data. Objects are displayed in the Environment panel. Double click on inat_data in Environment to see all the data.\n\ninat_data &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\n\n\n\n\n\n\nTip\n\n\n\nTyping out paths can be error prone, so we can utilize a keyboard shortcut. Inside the parentheses of read_csv(), type out a pair of quotes and put your cursor between them. Then hit Tab. A small menu showing your folders and files should show up. You can use the ↑ and ↓ keys to move through the options, or start typing to narrow them down. You can hit Enter to select a file or folder, and hit Tab again to continue building the file path. This might take a bit of getting used to, but once you get the hang of it, it will speed up writing file paths and reduce the number of mistakes you make.\n\n\nTo learn more about a function, you can type a ? in front of the name of the function, which will bring up the official documentation for that function:\n\n?read_csv\n\nFunction documentation is written by the authors of the functions, so they can vary pretty widely in their style and readability. The first section, Description, gives you a concise description of what the function does, but it may not always be enough. The Arguments section defines all the arguments for the function and is usually worth reading thoroughly. Finally, the Examples section at the end will often have some helpful examples that you can run to get a sense of what the function is doing.",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#the-data.frame",
    "href": "lessons/working-with-data.html#the-data.frame",
    "title": "Working with iNaturalist data",
    "section": "The data.frame",
    "text": "The data.frame\nread_csv returns a data.frame. A data.frame is the most common way that R represents tabular data (data with rows and columns).\nWe can view the first few rows with the head() function from R, and the last few rows with the tail() function from R:\n\nhead(inat_data)\n\n# A tibble: 6 × 35\n       id observed_on time_observed_at   user_id user_login user_name created_at\n    &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n1 2931940 2016-04-14  2016-04-14 19:25:…  151043 msmorales  Michael … 2016-04-1…\n2 2934641 2016-04-14  2016-04-14 19:02:…   10814 smartrf    Richard … 2016-04-1…\n3 2934961 2016-04-14  2016-04-14 19:15:…   80445 cdegroof   Chris De… 2016-04-1…\n4 2934980 2016-04-14  2016-04-14 19:18:…   80445 cdegroof   Chris De… 2016-04-1…\n5 2934994 2016-04-14  2016-04-14 19:19:…   80445 cdegroof   Chris De… 2016-04-1…\n6 2935037 2016-04-14  2016-04-14 19:36:…  121033 ttempel    &lt;NA&gt;      2016-04-1…\n# ℹ 28 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\n\ntail(inat_data)\n\n# A tibble: 6 × 35\n         id observed_on time_observed_at user_id user_login user_name created_at\n      &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n1 254128969 2024-04-28  2024-04-28 17:1… 2834615 thannavic… Thanna V… 2024-12-0…\n2 255041807 2024-04-26  2024-04-26 23:3… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n3 255041881 2024-04-26  2024-04-26 22:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n4 255041985 2024-04-26  2024-04-26 22:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n5 255042063 2024-04-26  2024-04-26 20:4… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n6 255042124 2024-04-26  2024-04-26 19:1… 5347031 epiphyte78 &lt;NA&gt;      2024-12-1…\n# ℹ 28 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;,\n#   iconic_taxon_name &lt;chr&gt;, taxon_id &lt;dbl&gt;, taxon_kingdom_name &lt;chr&gt;, …\n\n\nUse glimpse() from dplyr to see a information about a data frame. Number of rows and columns. For each column, we see the name, data type (dbl for number, chr for character, lgl for logical (true, false), date for date), and the first few values.\n\nglimpse(inat_data)\n\nRows: 191,638\nColumns: 35\n$ id                         &lt;dbl&gt; 2931940, 2934641, 2934961, 2934980, 2934994…\n$ observed_on                &lt;date&gt; 2016-04-14, 2016-04-14, 2016-04-14, 2016-0…\n$ time_observed_at           &lt;chr&gt; \"2016-04-14 19:25:00 UTC\", \"2016-04-14 19:0…\n$ user_id                    &lt;dbl&gt; 151043, 10814, 80445, 80445, 80445, 121033,…\n$ user_login                 &lt;chr&gt; \"msmorales\", \"smartrf\", \"cdegroof\", \"cdegro…\n$ user_name                  &lt;chr&gt; \"Michael Morales\", \"Richard Smart (he, him)…\n$ created_at                 &lt;chr&gt; \"2016-04-14 07:28:36 UTC\", \"2016-04-14 19:0…\n$ updated_at                 &lt;chr&gt; \"2021-12-26 06:58:04 UTC\", \"2018-05-28 02:0…\n$ quality_grade              &lt;chr&gt; \"research\", \"needs_id\", \"research\", \"resear…\n$ license                    &lt;chr&gt; \"CC-BY\", \"CC-BY-NC\", NA, NA, NA, \"CC-BY-NC\"…\n$ url                        &lt;chr&gt; \"http://www.inaturalist.org/observations/29…\n$ image_url                  &lt;chr&gt; \"https://inaturalist-open-data.s3.amazonaws…\n$ sound_url                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ tag_list                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ description                &lt;chr&gt; \"Spotted on a the wall of a planter, while …\n$ captive_cultivated         &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ latitude                   &lt;dbl&gt; 34.05829, 34.01742, 34.13020, 34.13143, 34.…\n$ longitude                  &lt;dbl&gt; -117.8219, -118.2892, -118.8226, -118.8215,…\n$ positional_accuracy        &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ public_positional_accuracy &lt;dbl&gt; 4, 5, NA, NA, NA, NA, 17, 55, 55, 55, NA, 5…\n$ geoprivacy                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ taxon_geoprivacy           &lt;chr&gt; NA, NA, NA, \"open\", \"open\", NA, \"open\", NA,…\n$ coordinates_obscured       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ scientific_name            &lt;chr&gt; \"Cornu aspersum\", \"Oestroidea\", \"Arphia ram…\n$ common_name                &lt;chr&gt; \"Garden Snail\", \"Bot Flies, Blow Flies, and…\n$ iconic_taxon_name          &lt;chr&gt; \"Mollusca\", \"Insecta\", \"Insecta\", \"Reptilia…\n$ taxon_id                   &lt;dbl&gt; 480298, 356157, 54247, 36100, 36204, 69731,…\n$ taxon_kingdom_name         &lt;chr&gt; \"Animalia\", \"Animalia\", \"Animalia\", \"Animal…\n$ taxon_phylum_name          &lt;chr&gt; \"Mollusca\", \"Arthropoda\", \"Arthropoda\", \"Ch…\n$ taxon_class_name           &lt;chr&gt; \"Gastropoda\", \"Insecta\", \"Insecta\", \"Reptil…\n$ taxon_order_name           &lt;chr&gt; \"Stylommatophora\", \"Diptera\", \"Orthoptera\",…\n$ taxon_family_name          &lt;chr&gt; \"Helicidae\", NA, \"Acrididae\", \"Phrynosomati…\n$ taxon_genus_name           &lt;chr&gt; \"Cornu\", NA, \"Arphia\", \"Uta\", \"Sceloporus\",…\n$ taxon_species_name         &lt;chr&gt; \"Cornu aspersum\", NA, \"Arphia ramona\", \"Uta…\n$ taxon_subspecies_name      &lt;chr&gt; NA, NA, NA, \"Uta stansburiana elegans\", NA,…\n\n\nYou can also use names() from R to see the fields in the data frame.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#manipulating-data",
    "href": "lessons/working-with-data.html#manipulating-data",
    "title": "Working with iNaturalist data",
    "section": "Manipulating data",
    "text": "Manipulating data\nOne of the most important skills for working with data in R is the ability to manipulate, modify, and reshape data. The dplyr package provide a series of powerful functions for many common data manipulation tasks.\n\nselect()\nselect() picks certain columns of a data.frame. To use the select() function, the first argument is the name of the data.frame, and the rest of the arguments are unquoted names of the columns you want.\nWe want four columns: user_login, common_name, scientific_name, observed_on. The columns are arranged in the order we specified inside select().\n\nselect(inat_data, user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 191,638 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 smartrf       Bot Flies, Blow Flies, and Allies   Oestroidea      2016-04-14 \n 3 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 4 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 5 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 ttempel       &lt;NA&gt;                                Coelocnemis     2016-04-14 \n 7 bradrumble    House Sparrow                       Passer domesti… 2016-04-15 \n 8 deedeeflower5 Amur Carp                           Cyprinus rubro… 2016-04-14 \n 9 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n10 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n# ℹ 191,628 more rows\n\n\n\n\nfilter()\nThe filter() function is used to select rows that meet certain criteria. To get all the rows where the value of common_name is equal to ‘Western Fence Lizard’, we would run the following:\n\nfilter(inat_data, common_name == 'Western Fence Lizard')\n\n# A tibble: 3,339 × 35\n        id observed_on time_observed_at  user_id user_login user_name created_at\n     &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 2934994 2016-04-14  2016-04-14 19:19…   80445 cdegroof   Chris De… 2016-04-1…\n 2 2935263 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 3 2935420 2016-04-14  &lt;NA&gt;               216108 deedeeflo… &lt;NA&gt;      2016-04-1…\n 4 2935748 2016-04-14  2016-04-14 21:01…   80445 cdegroof   Chris De… 2016-04-1…\n 5 2935965 2016-04-14  2016-04-14 19:44…  171443 lchroman   &lt;NA&gt;      2016-04-1…\n 6 2938607 2016-04-14  2016-04-14 23:33…  146517 maiz       &lt;NA&gt;      2016-04-1…\n 7 2940103 2016-04-15  2016-04-15 16:31…   80984 kimssight  Kim Moore 2016-04-1…\n 8 2940838 2016-04-15  2016-04-15 17:11…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n 9 2940848 2016-04-15  2016-04-15 17:17…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n10 2940855 2016-04-15  2016-04-15 17:42…  201119 sarahwenn… &lt;NA&gt;      2016-04-1…\n# ℹ 3,329 more rows\n# ℹ 28 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …\n\n\nThere are over 3000 observations for ‘Western Fence Lizard’.\nThe == sign means “is equal to”. Take note, there are two equal signs.\nThere are several other operators we can use: &gt; “greater than”, &gt;= “greater than or equal”, &lt; “less than”, &lt;= “less than or equal”, and != “not equal to”.\n\n\nThe pipe: %&gt;%\nWhat happens if we want to select columns and filter rows?\nWe use the pipe operator (%&gt;%) to call multiple functions.\n\n\n\n\n\n\nTip\n\n\n\nYou can insert %&gt;% by using the keyboard shortcut Shift+Cmd+M (Mac) or Shift+Ctrl+M (Windows).\n\n\nGet user_login, common_name, scientific_name, observed_on for all observations where common_name is ‘Western Fence Lizard’. Use filter to select rows, then use select to select columns.\n\ninat_data %&gt;% \n  filter(common_name == 'Western Fence Lizard') %&gt;% \n  select(user_login, common_name, scientific_name, observed_on) \n\n# A tibble: 3,339 × 4\n   user_login    common_name          scientific_name         observed_on\n   &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;                   &lt;date&gt;     \n 1 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 2 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 3 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 4 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 5 lchroman      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 6 maiz          Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 7 kimssight     Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n 8 sarahwenner   Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n 9 sarahwenner   Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n10 sarahwenner   Western Fence Lizard Sceloporus occidentalis 2016-04-15 \n# ℹ 3,329 more rows\n\n\nPipe operator take the thing on the lefthand side and insert it as the first argument of the function on the righthand side. By putting each of our functions onto a new line, we can build a nice, readable pipeline. inat_data gets piped into a filter() function, and it comes out modified somewhat. The output from filter() then gets sent into the select() function, where it is further modified. It can also be helpful to think of %&gt;% as meaning “and then”.\nIf we want to store this final data frame as an object, we use an assignment arrow &lt;-:\n\nwestern_fence_lizard_obs &lt;- inat_data %&gt;% \n  filter(common_name == 'Western Fence Lizard') %&gt;% \n  select(user_login, common_name, scientific_name, observed_on) \n\nSometimes the coordinates for iNaturalist observations are obscured. For instance, when the observation involves an endangered species, iNaturalist will automatically obscure the coordinates in order to protect the animal, plant, fungi. Sometimes peopleb choose to obscure their location when they are making observations so that other people will not know their exact location.\nTo access one column in a data frame, use dataframe$column_name. To get a count of number of values for one column, use table() function from R and pass in one column.\nLet’s find out how many observations have obscured locations.\n\ntable(inat_data$coordinates_obscured)\n\n\n FALSE   TRUE \n176942  14696 \n\n\n176K coordinates are ok, 14K are obscured\nLet’s get the observations where the coordinates are not obscured.\n\ninat_data %&gt;% \n  filter(coordinates_obscured == FALSE) %&gt;% \n  select(user_login, common_name, scientific_name, observed_on) \n\n# A tibble: 176,942 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 smartrf       Bot Flies, Blow Flies, and Allies   Oestroidea      2016-04-14 \n 3 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 4 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 5 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 6 ttempel       &lt;NA&gt;                                Coelocnemis     2016-04-14 \n 7 bradrumble    House Sparrow                       Passer domesti… 2016-04-15 \n 8 deedeeflower5 Amur Carp                           Cyprinus rubro… 2016-04-14 \n 9 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n10 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n# ℹ 176,932 more rows\n\n\niNaturalist gives a quality grade to each observation. When researchers use iNaturalist data, they normally use research grade observations.\nTo see all the unique values for a column, use unique() function from R and pass in the column name.\n\nunique(inat_data$quality_grade)\n\n[1] \"research\" \"needs_id\" \"casual\"  \n\n\nLet’s get the observations that are research grade.\n\ninat_data %&gt;% \n  filter(quality_grade == 'research')  %&gt;% \n  select(user_login, common_name, scientific_name, observed_on)\n\n# A tibble: 107,491 × 4\n   user_login    common_name                         scientific_name observed_on\n   &lt;chr&gt;         &lt;chr&gt;                               &lt;chr&gt;           &lt;date&gt;     \n 1 msmorales     Garden Snail                        Cornu aspersum  2016-04-14 \n 2 cdegroof      California Orange-winged Grasshopp… Arphia ramona   2016-04-14 \n 3 cdegroof      Western Side-blotched Lizard        Uta stansburia… 2016-04-14 \n 4 cdegroof      Western Fence Lizard                Sceloporus occ… 2016-04-14 \n 5 deedeeflower5 Red-eared Slider                    Trachemys scri… 2016-04-14 \n 6 deedeeflower5 Mallard                             Anas platyrhyn… 2016-04-14 \n 7 lchroman      Cactus Wren                         Campylorhynchu… 2016-04-14 \n 8 deedeeflower5 Desert Cottontail                   Sylvilagus aud… 2016-04-14 \n 9 deedeeflower5 Western Fence Lizard                Sceloporus occ… 2016-04-14 \n10 deedeeflower5 Eastern Fox Squirrel                Sciurus niger   2016-04-14 \n# ℹ 107,481 more rows",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#errors-in-code",
    "href": "lessons/working-with-data.html#errors-in-code",
    "title": "Working with iNaturalist data",
    "section": "Errors in code",
    "text": "Errors in code\nWe are writing instructions for the computer. If there is a typo, mispelling, pass in wrong arguments into functions, etc, the code will not work and we will see errors. R will display the errors in red. You need to fix the errors in order for the code to work.\ntypo: we used %&gt;, when it should be %&gt;%\n\ninat_data %&gt;\n  select(user_login, observed_on, common_name)\n\nMisspelled user_logi\n\ninat_data %&gt;%\n  select(user_logi, observed_on, common_name) \n\ntypo: we use =, when it should be ==\n\ninat_data %&gt;%\n  filter(user_login = 'natureinla')\n\ntypo: extra )\n\ninat_data %&gt;%\n  select(user_login, observed_on, common_name))",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-1",
    "href": "lessons/working-with-data.html#exercise-1",
    "title": "Working with iNaturalist data",
    "section": "Exercise 1",
    "text": "Exercise 1\nGet all your City Nature Challenge observations.\n\nUse select(), filter()\nThe results should have user_login equal to your iNaturalist username\nThe results should have user_login, observed_on, common_name, scientific_name columns\nsave the results to my_obs\nclick on my_obs in the Environment tab to see the results\n\n\n\nmy_obs &lt;- inat_data %&gt;% \n  filter(user_login == 'natureinla') %&gt;% \n  select(user_login, observed_on, common_name, scientific_name)",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#and-operator",
    "href": "lessons/working-with-data.html#and-operator",
    "title": "Working with iNaturalist data",
    "section": "and operator: &",
    "text": "and operator: &\nWhen we want go get rows that match multiple criteria, we can use the and operator &\nLet’s get all observations that are research grade and common_name is ‘Western Fence Lizard’.\n\nmy_data &lt;- inat_data %&gt;% \n  filter( common_name == 'Western Fence Lizard' \n         & quality_grade == 'research')  %&gt;% \n  select(user_login, common_name, scientific_name, observed_on, quality_grade)\n\nWe can check the results to make sure we wrote the query correctly. We can use unique() to check the column values.\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\n\nunique(my_data$quality_grade)\n\n[1] \"research\"\n\n\nLet’s get observations where user_login is ‘natureinla’ and common_name is ‘Western Fence Lizard’.\n\nmy_data &lt;- inat_data %&gt;% \n  filter(user_login == 'natureinla' & common_name == 'Western Fence Lizard') %&gt;% \n  select(user_login, common_name, scientific_name, observed_on) \n\n\nunique(my_data$user_login)\n\n[1] \"natureinla\"\n\n\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\"",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#or-operator",
    "href": "lessons/working-with-data.html#or-operator",
    "title": "Working with iNaturalist data",
    "section": "or operator: |",
    "text": "or operator: |\nWhen we want to get rows that match one or more criteria, we can use the or operator |\nLet’s get observations where common_name is ‘Western Fence Lizard’ or ‘Western Honey Bee’.\n\nmy_data &lt;- inat_data %&gt;% \n  filter(common_name == 'Western Honey Bee' | common_name == 'Western Fence Lizard')  %&gt;% \n  select(user_login, observed_on, common_name)\n\ndim(my_data)\n\n[1] 5399    3\n\n\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\" \"Western Honey Bee\"",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#in-c",
    "href": "lessons/working-with-data.html#in-c",
    "title": "Working with iNaturalist data",
    "section": "%in% c()",
    "text": "%in% c()\nIf you need to examine multiple values for a field, you can use field_name %in% c(value1, value2) instead of | (or).\nc() is a function from R that creates a vector with the passed in agruments. A vector is how R stores a list of items. %in% operator from R checks if a vector is contained in another vector.\nLet’s rewrite the the code for common_name is ‘Western Fence Lizard’ or ‘Western Honey Bee’ using %in% c().\n\nmy_data &lt;- inat_data %&gt;% \n  filter(common_name %in% c('Western Honey Bee', 'Western Fence Lizard'))  %&gt;% \n  select(user_login, observed_on, common_name)\n\ndim(my_data)\n\n[1] 5399    3\n\n\n\nunique(my_data$common_name)\n\n[1] \"Western Fence Lizard\" \"Western Honey Bee\"",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#and-versus-or",
    "href": "lessons/working-with-data.html#and-versus-or",
    "title": "Working with iNaturalist data",
    "section": "& (and) versus | (or)",
    "text": "& (and) versus | (or)\n** & (and)** return rows where all conditions are true. This code looks for observations where user_login is ‘natureinla’ and common_name is ‘Western Fence Lizard’.\n\nand_data &lt;- inat_data %&gt;% \n  filter(user_login == 'natureinla' & common_name == 'Western Fence Lizard')\n\ndim(and_data)\n\n[1] 79 35\n\n\n\nunique(and_data$user_login)\n\n[1] \"natureinla\"\n\n\n\nunique(and_data$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\nWe get 79 rows with 1 user_login and 1 common_name\n| (or) returns rows where any conditions are true. This code looks for observations where user_login is ‘natureinla’ plus observations where common_name is ‘Western Fence Lizard’\n\nor_data &lt;- inat_data %&gt;% \n  filter(user_login == 'natureinla' | common_name == 'Western Fence Lizard') \n\ndim(or_data)\n\n[1] 6216   35\n\n\n\nunique(or_data$user_login) %&gt;% length\n\n[1] 1052\n\n\n\nunique(or_data$common_name) %&gt;% length\n\n[1] 1031\n\n\nWe get 6,216 rows with 1052 user_login and 1031 common_name\nAnd / Or will return different results. In other words, check the results of your code to make sure your results matches what you intended",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#more-complex-queries",
    "href": "lessons/working-with-data.html#more-complex-queries",
    "title": "Working with iNaturalist data",
    "section": "More complex queries",
    "text": "More complex queries\nSometimes we want to use both and or to select the rows. We want observations where user is ‘cdegroof’ or ‘deedeeflower5’, and species is ‘Western Fence Lizard’. You can use multiple filter statememts.\n\ncomplex_query &lt;- inat_data %&gt;% \n  filter(user_login == 'cdegroof' \n         | user_login == 'deedeeflower5') %&gt;%\n  filter(common_name == 'Western Fence Lizard')  %&gt;% \n  select(user_login, common_name, scientific_name, observed_on)\n\ncomplex_query\n\n# A tibble: 33 × 4\n   user_login    common_name          scientific_name         observed_on\n   &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;                   &lt;date&gt;     \n 1 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 2 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 3 deedeeflower5 Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 4 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-14 \n 5 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 6 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 7 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-16 \n 8 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n 9 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n10 cdegroof      Western Fence Lizard Sceloporus occidentalis 2016-04-17 \n# ℹ 23 more rows\n\n\n\nunique(complex_query$common_name)\n\n[1] \"Western Fence Lizard\"\n\n\n\nunique(complex_query$user_login)\n\n[1] \"cdegroof\"      \"deedeeflower5\"",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#higher-taxonomy",
    "href": "lessons/working-with-data.html#higher-taxonomy",
    "title": "Working with iNaturalist data",
    "section": "Higher taxonomy",
    "text": "Higher taxonomy\nInstead of looking at one species, let’s look for observations for all oak trees.\nWe can use filter where the common_name is ‘oaks’.\n\noaks_obs &lt;- inat_data %&gt;% \n  filter(common_name == 'oaks')\n\ndim(oaks_obs)\n\n[1] 218  35\n\n\nWe have 218 observations. However, when we used the iNaturalist site to look for ‘oaks’ for ‘Los Angeles City Nature Challenge Cumulative Observations 2016-2024’, we get 1369 observations. What’s causing the difference?\nWhen you search for ‘oaks’ on iNaturalist, click the ‘About’ link, and it will bring you to the taxa page for ‘oaks’.\n\n\n‘Oaks’ is the common name for genus Quercus. When you search iNaturalist observations for ‘oaks’, iNaturalist returns observations that belong to the genus Quercus such as ‘Live Coast Oak’ and ‘Valley Oak’. Our query common_name == 'oaks' only looked for observations that were labeled ‘oaks’; it ignored observations that were labeled as specific oak species. To match the iNaturalist search results, we need to look for all observations where the genus equals Quercus.\nWe can use names() to get a list of fields.\n\nnames(inat_data)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"     \n\n\nSince we know ‘oaks’ is genus Quercus, we need to use the field taxon_genus_name and ‘Quercus’.\n\noaks_obs_fixed &lt;- inat_data %&gt;% \n  filter(taxon_genus_name == 'Quercus')\n\ndim(oaks_obs_fixed)\n\n[1] 1367   35\n\n\nWe now get 1367 observations.\n\n\n\n\n\n\nNote\n\n\n\nThe reason why iNaturalist has 1369 observations for ‘oaks’ but we have 1367 is because iNaturalist has two ‘oaks’ observations which don’t have latitude and longitude data. Our cleaned iNaturalist data excludes observations without latitude and longitude.\n\n\nLet’s examine the number of observations for each type of oak. We can use count() to get the counts, and View() to see the results.\n\noaks_count &lt;- oaks_obs_fixed %&gt;%\n  count(common_name, scientific_name) %&gt;%\n  arrange(desc(n))\n\n\nView(oaks_count)\n\nWhile most of the observations are species (as evidence by the two part name), there are 218 observations that could only be identified to the genus Quercus.\nAnother example, let’s search for ‘trees’. When we search iNaturalist for ‘trees’, the first result is Phylum Tracheophyta. Let’s look at our data using taxon_phylum_name and ‘Tracheophyta’\n\ntrees_obs &lt;- inat_data %&gt;% \n  filter(taxon_phylum_name == 'Tracheophyta')\n\ndim(trees_obs)\n\n[1] 95372    35\n\n\nThere are 95372 Tracheophyta observations.\nLet’s get a count of observations for Tracheophyta.\n\ntrees_count &lt;- trees_obs %&gt;%\n  count(common_name) %&gt;%\n  arrange(desc(n))\n\n\nView(trees_count)\n\nWe are getting plants such as California poppy, grasses, which aren’t trees. Why is that?\nIf we look up ‘Tracheophyta’ in Wikipedia:\n\nVascular plants, also called tracheophytes or collectively tracheophyta from Ancient Greek τραχεῖα ἀρτηρία (trakheîa artēría) ‘windpipe’ and φυτά (phutá) ‘plants’), are plants that have lignified tissues (the xylem) for conducting water and minerals throughout the plant. They also have a specialized non-lignified tissue (the phloem) to conduct products of photosynthesis. The group includes most land plants (c. 300,000 accepted known species) other than mosses.\n\nIf we look up ‘tree’ in Wikipedia:\n\nTrees are not a monophyletic taxonomic group but consist of a wide variety of plant species that have independently evolved a trunk and branches as a way to tower above other plants to compete for sunlight. The majority of tree species are angiosperms or hardwoods; of the rest, many are gymnosperms or softwoods.\n\n\nAlthough “tree” is a common word, there is no universally recognised precise definition of what a tree is, either botanically or in common language.\n\nIn other words, there is no one word we can use to find all trees. The fact that iNaturalist shows Tracheophyta as the first search result for ‘trees’ is a little quirk with the iNaturalist search algorithm. To find all trees, we would need to pass in a list of species or genera of plants that you would label as trees.\nThe Los Angeles County Community Forest Management Plan has LACO Master Tree List. It is a list of recommended tree species for LA County. Let’s examine all the genera in that list.\n\nlaco_trees &lt;- c('Acacia', 'Afrocarpus','Agonis', 'Angophora', 'Arbutus',\n                'Bauhinia', 'Brachychiton', 'Caesalpinia', 'Callistemon',\n                'Cassia', 'Casuarina','Cedrus', 'Ceiba', 'Celtis', 'Cercidum',\n                'Cercis','Chilopsis', 'Chitalpa', 'Cordia','Corymbia', \n                'Cotinus', 'Dalbergia', 'Ebenopsis', 'Eriobotrya',\n                'Ficus','Fraxinus','Geijera', 'Ginkgo', 'Hakea', 'Handroanthus',\n                'Hesperocyparis', 'Heteromeles', 'Hymenosporum', 'Jacaranda',\n                'Koelreuteria', 'Lagerstroemia', 'Lagunaria', 'Laurus',\n                'Lophostemon', 'Lyonothamnus', 'Melaleuca', 'Metrosideros',\n                'Olea', 'Olneya', 'Parkinsonia', 'Pinus', 'Pistacia', \n                'Platanus', 'Prosopis', 'Prunus', 'Quercus', 'Searsia',\n                'Spathodea', 'Stenocarpus', 'Tipuana', 'Tristaniopsis', \n                'Ulmus', 'Umbellularia', 'Vachellia', 'Zelkova')\n\nlaco_trees_obs &lt;- inat_data %&gt;% \n  filter(taxon_genus_name %in% laco_trees)\n\ndim(laco_trees_obs)\n\n[1] 5743   35\n\n\n5743 observations for LACO tree genera.\nLet’s get a count of observations for LACO tree genera.\n\nlaco_trees_count &lt;- laco_trees_obs %&gt;%\n  count(common_name, scientific_name, taxon_genus_name) %&gt;%\n  arrange(desc(n))\n\n\nView(laco_trees_count)\n\nThe LACO list of trees is not a list of all trees in L.A. county. You might want to add or subtract from the LACO list.\nIn other words, when looking for multiple species, it might take some trial and error to get the results you want.",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-2",
    "href": "lessons/working-with-data.html#exercise-2",
    "title": "Working with iNaturalist data",
    "section": "Exercise 2",
    "text": "Exercise 2\nGet all your CNC observations that are research grade\n\nUse select(), filter(), &\nThe results should have user_login equal to your iNaturalist username\nThe results should have quality_grade equal to research.\nThe results should have user_login, observed_on, common_name, scientific_name columns\nsave the results to my_obs_2 object\n\n\n\nmy_obs_2 &lt;- inat_data %&gt;% \n  filter(user_login == 'natureinla' & quality_grade == 'research') %&gt;% \n  select(user_login, observed_on, common_name, scientific_name)",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-3",
    "href": "lessons/working-with-data.html#exercise-3",
    "title": "Working with iNaturalist data",
    "section": "Exercise 3",
    "text": "Exercise 3\nGet all your observations for two species\n\nUse select(), filter() , |\nuse unique() to see all common names from my_obs\nThe results should have user_login equal to your iNaturalist username\nThe results should have common_name equal to two species\nThe results should have user_login, observed_on, common_name, scientific_name columns\nsave the results to my_obs_3 object\n\n\n\nunique(my_obs$common_name)[0:10]\n\n [1] \"Red-eared Slider\"       \"Monarch\"                \"San Diego Gopher Snake\"\n [4] \"California Towhee\"      \"Cooper's Hawk\"          \"tropical milkweed\"     \n [7] \"Allen's Hummingbird\"    \"Northern Mockingbird\"   \"House Sparrow\"         \n[10] \"Indian Peafowl\"        \n\n\n\nmy_obs_3 &lt;- inat_data %&gt;% \n  filter(user_login == 'natureinla') %&gt;% \n  filter(common_name == 'Red-eared Slider' | common_name=='Monarch') %&gt;% \n  select(user_login, observed_on, common_name, scientific_name)",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#add-new-columns-with-mutate",
    "href": "lessons/working-with-data.html#add-new-columns-with-mutate",
    "title": "Working with iNaturalist data",
    "section": "Add new columns with mutate()",
    "text": "Add new columns with mutate()\nAnother common task is creating a new column based on values in existing columns. For example, we could add a new column for year.\nUse mutate() from dplry to add a column. We pass in the name of the new column, and the value of the column.\nUse year() from lubridate on a date column to get the year.\nLet’s get observed_on for rows 10315 to 10325\n\n(inat_data$observed_on)[10315:10325]\n\n [1] \"2016-04-15\" \"2016-04-15\" \"2016-04-18\" \"2016-04-16\" \"2017-04-14\"\n [6] \"2017-04-15\" \"2017-04-14\" \"2017-04-14\" \"2017-04-14\" \"2017-04-14\"\n[11] \"2017-04-14\"\n\n\nLet’s get use year() to get the year from observed_on for rows 10315 to 10325\n\nyear(inat_data$observed_on)[10315:10325]\n\n [1] 2016 2016 2016 2016 2017 2017 2017 2017 2017 2017 2017\n\n\nThis code will add year column using the year(observed_on)\n\ntemp &lt;- inat_data %&gt;% \n  mutate(year = year(observed_on))\n\nYou can click on temp in Environment tab to see the data frame with year column.\nWe can also use table() to get the number of observations per year.\n\ntable(temp$year)\n\n\n 2016  2017  2018  2019  2020  2021  2022  2023  2024 \n10392 17495 19164 34057 19524 22549 19597 26602 22258 \n\n\nLet’s get all observations for 2020. We use mutate to add year column, and use filter to select rows where year is 2020.\n\ninat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  filter(year == 2020)\n\n# A tibble: 19,524 × 36\n         id observed_on time_observed_at user_id user_login user_name created_at\n      &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     \n 1 43036512 2020-04-24  2020-04-24 07:0…  907908 samatha    &lt;NA&gt;      2020-04-2…\n 2 43036525 2020-04-24  2020-04-24 07:0… 2556338 charlesja… Charles … 2020-04-2…\n 3 43036534 2020-04-24  2020-04-24 07:0…  146517 maiz       &lt;NA&gt;      2020-04-2…\n 4 43036755 2020-04-24  2020-04-24 07:0… 2556338 charlesja… Charles … 2020-04-2…\n 5 43036856 2020-04-24  2020-04-24 07:0… 2556338 charlesja… Charles … 2020-04-2…\n 6 43036989 2020-04-24  2020-04-24 07:0…   74669 amyjaecke… Amy Jaec… 2020-04-2…\n 7 43037041 2020-04-24  2020-04-24 07:0…   74669 amyjaecke… Amy Jaec… 2020-04-2…\n 8 43037308 2020-04-24  2020-04-24 07:1… 2556338 charlesja… Charles … 2020-04-2…\n 9 43037581 2020-04-24  2020-04-24 07:1… 2556338 charlesja… Charles … 2020-04-2…\n10 43037631 2020-04-24  2020-04-24 07:1…  403949 jaeckerb   &lt;NA&gt;      2020-04-2…\n# ℹ 19,514 more rows\n# ℹ 29 more variables: updated_at &lt;chr&gt;, quality_grade &lt;chr&gt;, license &lt;chr&gt;,\n#   url &lt;chr&gt;, image_url &lt;chr&gt;, sound_url &lt;chr&gt;, tag_list &lt;chr&gt;,\n#   description &lt;chr&gt;, captive_cultivated &lt;lgl&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, positional_accuracy &lt;dbl&gt;,\n#   public_positional_accuracy &lt;dbl&gt;, geoprivacy &lt;chr&gt;, taxon_geoprivacy &lt;chr&gt;,\n#   coordinates_obscured &lt;lgl&gt;, scientific_name &lt;chr&gt;, common_name &lt;chr&gt;, …",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-4",
    "href": "lessons/working-with-data.html#exercise-4",
    "title": "Working with iNaturalist data",
    "section": "Exercise 4",
    "text": "Exercise 4\nGet all of your observations from last year.\n\nUse select() and filter()\nUse mutate() and year() to add year column\nThe results should have user_login equal to your iNaturalist username\nThe results should have year equal last year\nThe results should have user_login, observed_on, common-name, scientific_name.\n\n\n\ninat_data %&gt;% \n   mutate(year = year(observed_on)) %&gt;%\n  filter(user_login == 'natureinla' & year == 2024) %&gt;%\n  select(user_login, observed_on, common_name, scientific_name) \n\n# A tibble: 1 × 4\n  user_login observed_on common_name                scientific_name             \n  &lt;chr&gt;      &lt;date&gt;      &lt;chr&gt;                      &lt;chr&gt;                       \n1 natureinla 2024-04-29  San Diego Alligator Lizard Elgaria multicarinata webbii",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#count-the-number-of-rows-with-count",
    "href": "lessons/working-with-data.html#count-the-number-of-rows-with-count",
    "title": "Working with iNaturalist data",
    "section": "Count the number of rows with count()",
    "text": "Count the number of rows with count()\nUse count() from dplyr to count the number of values for one or more columns. We pass in the column names as arguments to count()\nLet’s try counting of all observations by year. Use mutate() to add a year column. Use count() to count the number of observations for each year. By default, count will add a new column caled n.\n\ninat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  count(year) \n\n# A tibble: 9 × 2\n   year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2016 10392\n2  2017 17495\n3  2018 19164\n4  2019 34057\n5  2020 19524\n6  2021 22549\n7  2022 19597\n8  2023 26602\n9  2024 22258\n\n\nWe can specify the name of the count column by passing in name argument to count().\n\ninat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='obs_count')  \n\n# A tibble: 9 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016     10392\n2  2017     17495\n3  2018     19164\n4  2019     34057\n5  2020     19524\n6  2021     22549\n7  2022     19597\n8  2023     26602\n9  2024     22258\n\n\nLet’s count the number of observations for each species. We will pass in both ‘common_name’ and ‘scientific_name’ because some species don’t have a common_name.\n\ncounts &lt;- inat_data %&gt;% \n  count(common_name, scientific_name, name='obs_count')   \n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name                             scientific_name        obs_count\n   &lt;chr&gt;                                   &lt;chr&gt;                      &lt;int&gt;\n 1 Abalone                                 Haliotis                       7\n 2 Abbott's bushmallow                     Malacothamnus abbottii         1\n 3 Abelias                                 Abelia                         1\n 4 Abert's Thread-waisted Wasp             Ammophila aberti               3\n 5 Abyssinian banana                       Ensete ventricosum             1\n 6 Acacia Psyllid                          Acizzia uncatoides             2\n 7 Acacias, Mimosas, mesquites, and allies Mimosoideae                   10\n 8 Acalyptrate Flies                       Acalyptratae                  66\n 9 Acanthus                                Acanthus                      23\n10 Achilid Planthoppers                    Achilidae                      1\n# ℹ 9,855 more rows\n\n\nIt’s often useful to take a look at the results in some order, like the lowest count to highest. We can use the arrange() function from dplyr for that. We pass in the columns we want to order by to arrange(). By default, arrange() will return values from lowest to highest.\n\ncounts &lt;- inat_data %&gt;% \n  count(common_name, scientific_name, name='obs_count')   %&gt;%\n  arrange(obs_count)\n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name                     scientific_name         obs_count\n   &lt;chr&gt;                           &lt;chr&gt;                       &lt;int&gt;\n 1 Abbott's bushmallow             Malacothamnus abbottii          1\n 2 Abelias                         Abelia                          1\n 3 Abyssinian banana               Ensete ventricosum              1\n 4 Achilid Planthoppers            Achilidae                       1\n 5 Acorn Moth                      Blastobasis glandulella         1\n 6 Acotylean Flatworms             Acotylea                        1\n 7 Active Free-living Bristleworms Errantia                        1\n 8 Afghan Tortoise                 Testudo horsfieldii             1\n 9 African Clawed Frog             Xenopus laevis                  1\n10 African Milk Weed               Euphorbia trigona               1\n# ℹ 9,855 more rows\n\n\nIf we want to reverse the order, we can wrap the column names in desc() from dplyr. This will return values from highest to lowest.\n\ncounts &lt;- inat_data %&gt;% \n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count)) \n\ncounts\n\n# A tibble: 9,865 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929\n# ℹ 9,855 more rows\n\n\nuse slice() from dplyr to return only certain number of records. slice(start:end) will return rows from the starting number to the ending number.\nLet’s get the top ten species with the most observations.\n\ncounts &lt;- inat_data %&gt;% \n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count))  %&gt;% \n  slice(1:10)\n\ncounts\n\n# A tibble: 10 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#exercise-5",
    "href": "lessons/working-with-data.html#exercise-5",
    "title": "Working with iNaturalist data",
    "section": "Exercise 5",
    "text": "Exercise 5\nGet the number of observation you made per year\n\nUse mutate() and year() to add year column\nUse count() to count the number of observations\nUse filter() to select your observations\n\n\n\ninat_data %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  filter(user_login == 'natureinla') %&gt;%\n  count(year, name='obs_count')   \n\n# A tibble: 8 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016       930\n2  2017      1055\n3  2018       599\n4  2019       350\n5  2020        10\n6  2021         2\n7  2023         9\n8  2024         1",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/working-with-data.html#save-data",
    "href": "lessons/working-with-data.html#save-data",
    "title": "Working with iNaturalist data",
    "section": "Save data",
    "text": "Save data\nIf you want to save your results, you can save the data frames as CSVs. First, assign the data frame to an object.\n\ntop_ten &lt;- inat_data %&gt;% \n  count(common_name, scientific_name, name='obs_count') %&gt;%\n  arrange(desc(obs_count))  %&gt;% \n  slice(1:10)\n\ntop_ten\n\n# A tibble: 10 × 3\n   common_name            scientific_name          obs_count\n   &lt;chr&gt;                  &lt;chr&gt;                        &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis       3339\n 2 Western Honey Bee      Apis mellifera                2060\n 3 dicots                 Magnoliopsida                 2013\n 4 plants                 Plantae                       1712\n 5 Eastern Fox Squirrel   Sciurus niger                 1475\n 6 House Finch            Haemorhous mexicanus          1263\n 7 Mourning Dove          Zenaida macroura              1205\n 8 flowering plants       Angiospermae                  1161\n 9 California poppy       Eschscholzia californica       934\n10 Convergent Lady Beetle Hippodamia convergens          929\n\n\nThen write_csv() from dplyr to create a CSV. The first argument is the data frame to save. The second argument is the relative path of where to save the file. To keep our files organized, we are saving CSVs to the results folder. You should give the file a sensible name to help you remember what is in the file.\n\nwrite_csv(top_ten, 'results/top_ten_observations.csv')",
    "crumbs": [
      "Home",
      "Working with iNaturalist data"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html",
    "href": "lessons/other_datasets.html",
    "title": "Using to other datasets",
    "section": "",
    "text": "How do we get other datasets?\n\n\n\n\n\nCombine other datasets with iNaturalist data\nLoad packages\nlibrary(dplyr)\nlibrary(mapview)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#questions",
    "href": "lessons/other_datasets.html#questions",
    "title": "Using to other datasets",
    "section": "",
    "text": "How do we get other datasets?",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#objectives",
    "href": "lessons/other_datasets.html#objectives",
    "title": "Using to other datasets",
    "section": "",
    "text": "Combine other datasets with iNaturalist data",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#other-datasets",
    "href": "lessons/other_datasets.html#other-datasets",
    "title": "Using to other datasets",
    "section": "Other datasets",
    "text": "Other datasets\nThere are various geospatial datasets that you can use while analyzing iNaturalist data. Some datasets are free to use, some require crediting the original datasource.\nFor this workshop, I downloaded a few datasets from Los Angeles Geohub https://geohub.lacity.org We are using demographics data gathered by Los Angeles county. A lot of their demographics data comes from the U.S. Census. We are also using parks date from L.A. county and L.A. city.",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#inaturalist-data",
    "href": "lessons/other_datasets.html#inaturalist-data",
    "title": "Using to other datasets",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nLet’s get observations for Coast Live Oak and create a map.\n\ninat &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\nAdd a geometry column using st_as_sf(). Select observations for ‘Quercus agrifolia’ aka Coast Live Oak using filter().\n\noak_obs &lt;- inat %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326, remove=FALSE) %&gt;% \n  filter(scientific_name == 'Quercus agrifolia') \n\nGet the size and CRS of the data frame\n\ndim(oak_obs)\n\n[1] 711  36\n\nst_crs(oak_obs)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nmapview(oak_obs)",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#demographic-data",
    "href": "lessons/other_datasets.html#demographic-data",
    "title": "Using to other datasets",
    "section": "Demographic data",
    "text": "Demographic data\nLet’s compare iNaturalist data with demographics data about the people who in L.A.\nL.A. County completed Comprehensive Countywide Park Needs Assessment in 2016. As part of that study, they looked at demographics data throughout the county. For more information: https://geohub.lacity.org/datasets/lacounty::l-a-county-park-needs-assessment-demographics/about\n\n\n\n\n\n\nNote\n\n\n\nA lot of demographics data from the Park Needs Assessment comes from the U.S. Census. The reason we’re using the parks data instead directly using Census data is because the Census data is more difficult to use. If you want to learn how to use U.S. Census data in R, check out the book [Analyzing US Census Data: Methods, Maps, and Models in R](https://walker-data.com/census-r/index.html)\n\n\nLoad Park Needs Assessment data. Use st_read() to read geojson file. Click la_county_pna in the Enviroment pane to browse the data frame.\n\nla_county_pna &lt;- st_read('data/raw/PNA_Demographics_for_Dashboard_(View_Layer_SDE)_8662424390864523907.geojson')\n\nReading layer `PNA_Demographics_for_Dashboard_(View_Layer_SDE)_8662424390864523907' from data source `/Users/wyk/Development/science/city_nature_challenge/NHMLA_workshop/CNC-coding-workshop_quarto/lessons/data/raw/PNA_Demographics_for_Dashboard_(View_Layer_SDE)_8662424390864523907.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 189 features and 95 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.9447 ymin: 32.7996 xmax: -117.6464 ymax: 34.8233\nGeodetic CRS:  WGS 84\n\n\nLet’s get the size of the dataframe, and compare CRS to the iNaturalist data.\n\ndim(la_county_pna)\n\n[1] 189  96\n\nst_crs(la_county_pna) == st_crs(oak_obs)\n\n[1] TRUE\n\n\nThe last row has data for the entire LA County. Let’s remove that last row.\n\nla_county_pna &lt;- la_county_pna[-c(189), ]\n\ndim(la_county_pna)\n\n[1] 188  96\n\n\nThere are 96 fields in the dataset. Here’s a short description of the fields.\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\nSTUD_AR_ID\nStudy Area ID\n\n\nSTUD_AR_NM\nStudy Area Name\n\n\nSTUD_AR_LBL\nLabel\n\n\nTOOLKIT_ID\nToolkit ID\n\n\nAcres\nPark Acres\n\n\nAC_PER_1K\nAcres/1000\n\n\nRepPrkAc\nAccessible Park Acres\n\n\nNEED_DESCP\nNeed Description\n\n\nPCT_Walk\nWalkable Percentage\n\n\npopulationtotals_totpop_cy\nTotal Population\n\n\nhouseholdtotals_avghhsz_cy\nAverage Household Size\n\n\nhouseholdincome_medhinc_cy\nMedian Household Income\n\n\neducationalattainment_nohs_cy\nPop Age 25+: &lt; 9th Grade\n\n\neducationalattainment_somehs_cy\nPop Age 25+: High School/No Diploma\n\n\neducationalattainment_hsgrad_cy\nPop Age 25+: High School Diploma\n\n\neducationalattainment_ged_cy\nPop Age 25+: GED\n\n\neducationalattainment_smcoll_cy\nPop Age 25+: Some College/No Degree\n\n\neducationalattainment_asscdeg_c\nPop Age 25+: Associate’s Degree\n\n\neducationalattainment_bachdeg_c\nPop Age 25+: Bachelor’s Degree\n\n\neducationalattainment_graddeg_c\nPop Age 25+: Grad/Professional Degree\n\n\neducationalattainment_educbasec\nEducational Attainment Base\n\n\nsports_mp33003a_b_i\nParticipated in baseball in last 12 months: Index\n\n\nsports_mp33004a_b_i\nParticipated in basketball in last 12 months: Index\n\n\nsports_mp33005a_b_i\nParticipated in bicycling (mountain) in last 12 mo: Index\n\n\nsports_mp33012a_b_i\nParticipated in football in last 12 months: Index\n\n\nsports_mp33014a_b_i\nParticipated in golf in last 12 months: Index\n\n\nsports_mp33015a_b_i\nParticipated in hiking in last 12 months: Index\n\n\nsports_mp33016a_b_i\nParticipated in horseback riding in last 12 months: Index\n\n\nsports_mp33020a_b_i\nParticipated in jogging/running in last 12 months: Index\n\n\nsports_mp33024a_b_i\nParticipated in soccer in last 12 months: Index\n\n\nsports_mp33025a_b_i\nParticipated in softball in last 12 months: Index\n\n\nsports_mp33026a_b_i\nParticipated in swimming in last 12 months: Index\n\n\nsports_mp33028a_b_i\nParticipated in tennis in last 12 months: Index\n\n\nsports_mp33029a_b_i\nParticipated in volleyball in last 12 months: Index\n\n\nsports_mp33030a_b_i\nParticipated in walking for exercise in last 12 mo: Index\n\n\nF5yearincrements_pop0_cy\nPopulation Age 0-4\n\n\nF5yearincrements_pop5_cy\nPopulation Age 5-9\n\n\nF5yearincrements_pop10_cy\nPopulation Age 10-14\n\n\nF5yearincrements_pop15_cy\nPopulation Age 15-19\n\n\nF5yearincrements_pop20_cy\nPopulation Age 20-24\n\n\nF5yearincrements_pop25_cy\nPopulation Age 25-29\n\n\nF5yearincrements_pop30_cy\nPopulation Age 30-34\n\n\nF5yearincrements_pop35_cy\nPopulation Age 35-39\n\n\nF5yearincrements_pop40_cy\nPopulation Age 40-44\n\n\nF5yearincrements_pop45_cy\nPopulation Age 45-49\n\n\nF5yearincrements_pop50_cy\nPopulation Age 50-54\n\n\nF5yearincrements_pop55_cy\nPopulation Age 55-59\n\n\nF5yearincrements_pop60_cy\nPopulation Age 60-64\n\n\nF5yearincrements_pop65_cy\nPopulation Age 65-69\n\n\nF5yearincrements_pop70_cy\nPopulation Age 70-74\n\n\nF5yearincrements_pop75_cy\nPopulation Age 75-79\n\n\nF5yearincrements_pop80_cy\nPopulation Age 80-84\n\n\nF5yearincrements_pop85_cy\nPopulation Age 85+\n\n\nF5yearincrements_pop18up_cy\nPopulation Age 18+\n\n\nF1yearincrements_age18_cy\nPopulation Age 18\n\n\nF1yearincrements_age19_cy\nPopulation Age 19\n\n\nMEAN_Asthma\nMEAN Asthma\n\n\nMEAN_Low_Birth_Weight\nMEAN Low_Birth_Weight\n\n\nMEAN_Cardiovascular\nMEAN Cardiovascular\n\n\nraceandhispanicorigin_hisppop_c\nHispanic Population\n\n\nraceandhispanicorigin_nonhisp_c\nNon-Hispanic Population\n\n\nraceandhispanicorigin_nhspwht_c\nNon-Hispanic White Pop\n\n\nraceandhispanicorigin_nhspblk_c\nNon-Hispanic Black Pop\n\n\nraceandhispanicorigin_nhspai_cy\nNon-Hispanic American Indian Pop\n\n\nraceandhispanicorigin_nhspasn_c\nNon-Hispanic Asian Pop\n\n\nraceandhispanicorigin_nhsppi_cy\nNon-Hispanic Pacific Islander Pop\n\n\nraceandhispanicorigin_nhspoth_c\nNon-Hispanic Other Race Pop\n\n\nraceandhispanicorigin_nhspmlt_c\nNon-Hispanic Multiple Race Pop\n\n\nAge0_17Pct\nAge 0-17 Pct\n\n\nAge18_34Pct\nAge 18-34 Pct\n\n\nAge35_54Pct\nAge 35-54 Pct\n\n\nAge55_69Pct\nAge 55-69 Pct\n\n\nAge70upPct\nAge 70+ Pct\n\n\nHispanicPct\nHispanic Pct\n\n\nWhitePct\nWhite Pct\n\n\nBlack_Pct\nBlack Pct\n\n\nAsian_Pct\nAsian Pct\n\n\nAm_Indian\nAmerican Indian Pct\n\n\nPac_Island\nPacific Islander Pct\n\n\nOther_Race\nOther Race Pct\n\n\nMulti_Race\nMultiple Race Pct\n\n\nNo_HS\nNo High School Diploma Pct\n\n\nHS_Grad\nHigh School Graduate Pct\n\n\nSome_College\nSome College Pct\n\n\nCollege\nCollege Degree Pct\n\n\nunemprt_cy\nUnemployment Rate\n\n\n\n\nHousehold Median Income\nLet’s look at the Household Median Income. We can use zcol to choose which column view to in the map. The field ‘householdincome_medhinc_cy’ refers to Household Median Income.\n\nmapview(la_county_pna, \n        zcol='householdincome_medhinc_cy')\n\n\nThere are two issues with the previous map.\n\nThe name of the layer is too long. We can rename the layer using layer.name ='New Name'\nWhen you click on region, the popup shows too many fields. To select the columns displayed in popups, we can set the columns using dataframe[c('col_1', 'col_2')].\n\n\nIn R, a vector is a list of items. c() is a function from R that creates a vector from a list of values.\n\nlayer.name ='Avg income' sets the layer name to ‘Avg income’.\nla_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')] sets the columns show in the popup to householdincome_medhinc_cy and STUD_AR_NM\n\nmapview(la_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')], \n        zcol='householdincome_medhinc_cy',\n        layer.name ='Avg income') \n\n\nAdd iNaturalist data to the map.\n\nmapview(la_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')],\n        zcol='householdincome_medhinc_cy',\n        layer.name ='Avg income')  +\n  mapview(oak_obs)",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#exercise-1",
    "href": "lessons/other_datasets.html#exercise-1",
    "title": "Using to other datasets",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a map using one of the columns from Park Needs Assessment.\n\nuse z_col to pick a column from Park Needs Assessment\nset which fields are shown in the popup\n\n\n\nmapview(la_county_pna[c('PCT_Walk')], \n        zcol='PCT_Walk') +\n  mapview(oak_obs)",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#extracting-objects-from-an-existing-file",
    "href": "lessons/other_datasets.html#extracting-objects-from-an-existing-file",
    "title": "Using to other datasets",
    "section": "Extracting objects from an existing file",
    "text": "Extracting objects from an existing file\nSometimes we find a geospatial file that has more than we need. We only want some data in the file. For example we want to get the California state park within Los Angeles county.\nCalifornia State Parks has file that lists all the state parks in California. https://www.parks.ca.gov/?page_id=29682\nCalifornia state has a file that lists all the counties in California. https://gis.data.ca.gov/datasets/California::california-county-boundaries-and-identifiers/explore\n\nstate_parks &lt;- read_sf('data/raw/Park_Boundaries/ParkBoundaries.shp')\n\nmapview(state_parks)\n\n\n\n\n\n\n\nca_counties &lt;- read_sf('data/raw/California_County_Boundaries_and_Identifiers_Blue_Version_view_2716745428963682036/California_County_Boundaries_and_Identifiers.shp')\n\nmapview(ca_counties)\n\n\n\n\n\n\nCompare CRS for the state parks map and the county map.\n\nst_crs(state_parks) == st_crs(ca_counties)\n\n[1] FALSE\n\n\nUse st_transform() to change the CRS of counties map to match the parks map.\n\nca_counties &lt;- st_transform(ca_counties, crs = st_crs(state_parks))\n\nst_crs(state_parks) == st_crs(ca_counties)\n\n[1] TRUE\n\n\nLet’s get the boundary for Los Angeles County\n\nLA_county &lt;-  ca_counties %&gt;%\n   filter(COUNTY == 'Los Angeles County')\n\nmapview(LA_county)\n\n\nUse st_intersects() to find the state parks within LA county.\n\nLA_parks &lt;- state_parks[st_intersects(state_parks, LA_county ) %&gt;% lengths &gt; 0,]\n\nmapview(LA_county) + mapview(LA_parks, col.regions ='red')\n\n\nUse st_write() to save the boundaries for state parks within Ventura County as a Shape file. The first argument is the map data we want to save, and the second argument is the file path.\n\nst_write(LA_parks, 'data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp')",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/other_datasets.html#parks",
    "href": "lessons/other_datasets.html#parks",
    "title": "Using to other datasets",
    "section": "Parks",
    "text": "Parks\nLet’s compare iNaturalist data with the location of state, conty, and city parks.\nCalifornia State Parks: https://www.parks.ca.gov/?page_id=29682\nCounty of Los Angeles parks: https://geohub.lacity.org/datasets/lacounty::dpr-park-facilities-view-accessible-parks/explore\nCity of Los Angeles parks:  https://geohub.lacity.org/datasets/lahub::los-angeles-recreation-and-parks-boundaries/about\nLoad all the parks data.\n\nparks_state &lt;- read_sf('data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp')\n\nparks_county &lt;- read_sf('data/raw/DPR_Park_Facilities_View_(Accessible_Parks)/DPR_Park_Facilities_View_(Accessible_Parks).shp')\n\nparks_city &lt;- read_sf('data/raw/Los_Angeles_Recreation_and_Parks_Boundaries/Los_Angeles_Recreation_and_Parks_Boundaries.shp')\n\nLet’s get the size of the dataframe, and compare CRS to the iNaturalist data.\n\ndim(parks_county)\n\n[1] 292 145\n\nst_crs(parks_county) == st_crs(oak_obs)\n\n[1] FALSE\n\n\n\ndim(parks_city)\n\n[1] 561  17\n\nst_crs(parks_city) == st_crs(oak_obs)\n\n[1] FALSE\n\n\n\ndim(parks_state)\n\n[1] 40 12\n\nst_crs(parks_state) == st_crs(oak_obs)\n\n[1] FALSE\n\n\nWe want to convert the CRS of the parks data to match the CRS of the iNaturalist data.\n\nparks_county &lt;- st_transform(parks_county, crs = 4326)\n\nst_crs(parks_county) == st_crs(oak_obs)\n\n[1] TRUE\n\n\n\nparks_city &lt;- st_transform(parks_city, crs = 4326)\n\nst_crs(parks_city) == st_crs(oak_obs)\n\n[1] TRUE\n\n\n\nparks_state &lt;- st_transform(parks_state, crs = 4326)\n\nst_crs(parks_state) == st_crs(oak_obs)\n\n[1] TRUE\n\n\nCreate map with parks and iNaturalist data. Use col.region to set the color of the parks.\n\nmapview(parks_county, col.region='red') + \n  mapview(parks_city, col.region='yellow') +\n  mapview(parks_state, col.region='green') +\n  mapview(oak_obs)",
    "crumbs": [
      "Home",
      "Using to other datasets"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html",
    "href": "lessons/intro-data-analysis.html",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "How do we begin to analyze iNaturalist data?\n\n\n\n\n\nLearn how to download data from iNaturalist\nLearn about the various ways to analyze data",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#questions",
    "href": "lessons/intro-data-analysis.html#questions",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "How do we begin to analyze iNaturalist data?",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#objectives",
    "href": "lessons/intro-data-analysis.html#objectives",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "Learn how to download data from iNaturalist\nLearn about the various ways to analyze data",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#inaturalist-data",
    "href": "lessons/intro-data-analysis.html#inaturalist-data",
    "title": "Introduction to Data Analysis",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nWhen iNaturalist users add an observation through the iNaturalist app, that data is saved to the iNaturalist database. People can download the iNaturalist data as CSVs.\n\n\n\n\n\n\nNote\n\n\n\nCSV comma-separated values\nCSV is a text file format for tabular data. Each line represents one record. Each column represents a field. The fields are separated by commas. CSVs can be opened in text editors or spreadsheet programs.\nCSV as plain text file.\n\nCSV in CSV or spreadsheet application.\n\n\n\nThe iNaturalist CSV has information about:\n\nthe user who made observation\nthe location of the observation\nthe observed species\nlinks for photos, videos, sounds\n\nHere’s a rough draft that lists descriptions for each field. There is a Github issue for the iNaturalist team to add page that describes the field.",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#downloading-inaturalist-data",
    "href": "lessons/intro-data-analysis.html#downloading-inaturalist-data",
    "title": "Introduction to Data Analysis",
    "section": "Downloading iNaturalist data",
    "text": "Downloading iNaturalist data\nHere’s a video showing how to download iNaturalist data.\n\n\nTo save time and ensure everyone at the workshop has the same data, a CSV with data from iNaturalist City Nature Challenge Los Angeles from 2013 to 2024 is provided data/cleaned/cnc-los-angeles-observations.csv.\nIf you would like to download iNaturalist data for your own project, here’s more info.\nHow to Search iNaturalist Observations\nHow can I download data from iNaturalist?\nstep-by-step to download iNaturalist data",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#analyzing-data",
    "href": "lessons/intro-data-analysis.html#analyzing-data",
    "title": "Introduction to Data Analysis",
    "section": "Analyzing data",
    "text": "Analyzing data\nIt is difficult for people to see any patterns when reading rows after row of text. To make it easier to see patterns, we can use software to analyze tabular data.\n\nSpreadsheet programs are computer application that people can use to view, edit, and analyze tabular data. The programs can do calculations and create charts. Examples include Excel and Google Sheets\nGeographic information system (GIS) are computer application that people can use to view, edit and analyze geographic data. The programs can do calculations and create maps. Examples include ArcGIS and QGIS.\nProgramming languages allow people to write instructions to tell a computer to do stuff. We can write code to do calculations, create charts, and create maps. Example programming languages include R, Python, C.\n\nThis class uses R because it is a popular language in ecology research and other types of scientific research.",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-data-analysis.html#example-of-analyzing-inaturalist-data-using-r",
    "href": "lessons/intro-data-analysis.html#example-of-analyzing-inaturalist-data-using-r",
    "title": "Introduction to Data Analysis",
    "section": "Example of analyzing iNaturalist data using R",
    "text": "Example of analyzing iNaturalist data using R\nHere’s an overview of what we learn in this workshop.\nLoad software that will will need.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(lubridate) # manipulate dates\nlibrary(mapview) # create interactive maps\n\nLoad iNaturalist data from City Nature Challenge Los Angeles 2013-2024. There are over 191,000 observations.\n\ninat &lt;- read_csv(\"data/cleaned/cnc-los-angeles-observations.csv\")\n\nCreate summaries of the data. For instance, get the 10 most commonly observed ‘species’.\n\ntop_10 &lt;- inat %&gt;%\n  select(common_name, scientific_name) %&gt;%\n  count(common_name, scientific_name, name='count')  %&gt;%\n  arrange(desc(count)) %&gt;%\n  slice(1:10)\n\ntop_10\n\n# A tibble: 10 × 3\n   common_name            scientific_name          count\n   &lt;chr&gt;                  &lt;chr&gt;                    &lt;int&gt;\n 1 Western Fence Lizard   Sceloporus occidentalis   3339\n 2 Western Honey Bee      Apis mellifera            2060\n 3 dicots                 Magnoliopsida             2013\n 4 plants                 Plantae                   1712\n 5 Eastern Fox Squirrel   Sciurus niger             1475\n 6 House Finch            Haemorhous mexicanus      1263\n 7 Mourning Dove          Zenaida macroura          1205\n 8 flowering plants       Angiospermae              1161\n 9 California poppy       Eschscholzia californica   934\n10 Convergent Lady Beetle Hippodamia convergens      929\n\n\nCreate charts. For example, create a bar chart showing the number of observations per year.\n\ninat %&gt;%\n  mutate(year = year(observed_on))  %&gt;%\n  group_by(year) %&gt;%\n  ggplot(aes(x = year)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nCreate maps. For example, create a map showing all the observations for Western Fence Lizard\n\nlizard &lt;- inat %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE) %&gt;%\n  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry) %&gt;%\n  filter(common_name == 'Western Fence Lizard')\n\n\nmapview(lizard)",
    "crumbs": [
      "Home",
      "Introduction to Data Analysis"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html",
    "href": "lessons/intro-r-rstudio.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "What is R and RStudio?\nHow do you get started working in R and RStudio?\n\n\n\n\n\nUnderstand the difference between R and RStudio\nDescribe the purpose of the different RStudio panes\nOrganize files and directories into R Projects",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#questions",
    "href": "lessons/intro-r-rstudio.html#questions",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "What is R and RStudio?\nHow do you get started working in R and RStudio?",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#objectives",
    "href": "lessons/intro-r-rstudio.html#objectives",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Understand the difference between R and RStudio\nDescribe the purpose of the different RStudio panes\nOrganize files and directories into R Projects",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#what-are-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#what-are-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "What are R and RStudio?",
    "text": "What are R and RStudio?\nR refers to a programming language as well as the software that runs R code. R was started in 1993. All programming languages have commands and syntax that you must use in order to write instructions to tell the computer to do something.\nRStudio is software to make it easier to write and run code in R. It was started in 2010.\nThink of R as English, and RStudio as Microsoft Word or Google Docs.\nBoth R and RStudio are:\n\nfree\ncross platform: works on Mac, Windows, Linux\nopen source: allows anyone to use and modify the software",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#navigating-rstudio",
    "href": "lessons/intro-r-rstudio.html#navigating-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Navigating RStudio",
    "text": "Navigating RStudio\nWe will use the RStudio integrated development environment (IDE) to write code into scripts, run code in R, navigate files on our computer, inspect objects we create in R, and look at the plots we make. RStudio also includes features like keyboard shortcuts, autocompletion of code, and syntax highlighting (different types of code are colored differently).\n\nIn the above screenshot, we can see 4 “panes” in the default layout. If you only have 3 panes, and the Console pane is in the top left, press Shift+Cmd+N (Mac) or Shift+Ctrl+N (Windows) to open a blank R script, which should make the Source pane appear.\n\nTop-Left: the Source pane that displays scripts and other files.\nTop-Right: the Environment pane shows all the objects in your current R session.\n\nThere are some other tabs here including History, Connections, Build.\n\nBottom-Left: the Console pane, where you can type in commands. The R console will interpret R commands and prints the results\n\nThere are also tabs for Terminal and Jobs\n\nBottom-Right: the Files pane is used to display directories and files on your computer. Plot and Viewer displays plots and other types of output. Help display help pages",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#working-in-r-and-rstudio",
    "href": "lessons/intro-r-rstudio.html#working-in-r-and-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "Working in R and RStudio",
    "text": "Working in R and RStudio\n\nConsole vs. script\nYou can run commands directly in the R console, or you can write them into an R script.\n\nConsole\n\nThe R console is where code is run/executed\nThe prompt, which is the &gt; symbol, is where you can type commands\nBy pressing Return (Mac) or Enter (Windows), R will execute those commands and print the result.\nWhen you write commands in the R console, you will not be able to access your work in future.\n\n\n\nScript\n\nA script is a record of commands to send to R, preserved in a plain text file with a .R extension\nYou send lines of R code to the R console to be evaluated\n\nCmd+Return (Mac) or Ctrl+Enter (Windows) will run the line of code that your cursor is on\nIf you highlight multiple lines of code, you can run all of them by pressing Cmd+Return (Mac) or Ctrl+Enter (Windows)\n\nBy saving the commands in a script, you can edit and rerun them quickly, access the commands in the future, and share them with others\nAn additional benefit of scripts is that you can leave comments for yourself or others to read. Lines that start with # are considered comments and will not be interpreted as R code.",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#first-script",
    "href": "lessons/intro-r-rstudio.html#first-script",
    "title": "Introduction to R and RStudio",
    "section": "First script",
    "text": "First script\nLet’s try running some code in the console and in a script.\nFirst, click down in the Console pane, and type out 1+2. Hit Enter to run the code. You should see your code echoed, and then the value of 3 returned.\nYou can make a new R script by clicking File → New File → R Script, clicking the green + button in the top left corner of RStudio, or pressing Shift+Cmd+N (Mac) or Shift+Ctrl+N (Windows). It will be unsaved, and called “Untitled1”\nNow click into your blank script, and type out 1+2. With your cursor on that line, hit Cmd+Enter (Mac) or Ctrl+Enter (Windows) to run the code. You will see that your code was sent from the script to the console, where it returned a value of 3.\nSometimes we want to store a value in memory so we can use it later. &lt;- tells R to assign the value on the right to the named object on the left. We refer to the value using the object name.\nobject_name &lt;- value\nLet’s create a price_1 and price_2 objects, and assign them a value.\n\nprice_1 &lt;- 20\nprice_2 &lt;- 30\n\nObjects price_1 and price_2 are created, and stored in memory. The objects are show in the Enviroment panel.\nWe can refer to the object names, and do something with those values. Let’s add the two prices\n\nprice_1 + price_2\n\n[1] 50\n\n\n\n\nExercise\nAdd a line to the script to substract price_1 and price_2.\n\n\nSolution\n\n\nprice_1 - price_2\n\n[1] -10",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "lessons/intro-r-rstudio.html#overview-of-workshop-files",
    "href": "lessons/intro-r-rstudio.html#overview-of-workshop-files",
    "title": "Introduction to R and RStudio",
    "section": "Overview of workshop files",
    "text": "Overview of workshop files\nIt is a good practice to organize your projects into self-contained folders right from the start. Using a consistent folder structure across all your new projects will help keep a growing project organized, and make it easy to find files in the future.\nWe will use this basic structure for this workshop.\nproject_folder\n│\n└── data\n│    └── cleaned\n│    └── raw\n│\n└─── results\n│\n└── scripts\n│\n└── CNC-coding-workshop.Rproj\nWithin our project folder, we have a data folder containing cleaned and raw subfolders. In general, you want to keep your raw data completely untouched, so once you put data into that folder, you do not modify it. Instead, you read it into R, and if you make any modifications, you write that modified file into the cleaned folder. We also have a results folder for any other documents you might produce. We also have a scripts folder to hold any scripts we write.\nRStudio provides a “Projects” feature that can make it easier to work on individual projects in R. When you need to work on the project, click on the .Rproj file to start RStudio.\nOne of the benefits to using RStudio Projects is that they automatically set the working directory to the top-level folder for the project. The working directory is the folder where R is working, so it views the location of all files (including data and scripts) as being relative to the working directory.\n\nCreating your own project folder from scratch\nIf you want to create your own project folder in R Studio, follow these steps.\n\nStart RStudio (you should see a view similar to the screenshot above).\nIn the top right, you will see a blue 3D cube and the words “Project: (None)”. Click on this icon.\nClick New Project from the dropdown menu.\nClick New Directory, then New Project.\nType out a name for the project.\nPut it in a convenient location using the “Create project as a subdirectory of:” section. We recommend your Desktop. You can always move the project somewhere else later, because it will be self-contained.\nClick Create Project and your new project will open.\n\nWhen you need to work on the project, click on the Rproj icon to start RStudio.\nThere are a few settings we will need to adjust to improve the reproducibility of our work. Go to your menu bar, then click Tools → Global Options to open up the Options window.\n\nMake sure your settings match those highlighted in yellow. We don’t want RStudio to store the current status of our R session and reload it the next time we start R. We want to start with a clean, empty R session every time we work.\nWe will use a basic structure for this workshop.\nproject_name\n│\n└── data\n│    └── cleaned\n│    └── raw\n│\n└─── results\n│\n└── scripts\n│\n└── project_name.Rproj\nLet’s start making our new folders. Go to the Files pane (bottom right), and check the current directory, highlighted in yellow below. You should be in the directory for the project you just made. You shouldn’t see any folders in here yet.\n\nNext, click the New Folder button, and type in scripts to generate your scripts folder. It should appear in the Files list now. Repeat the process to make your data, and results folders. Then, click on the data folder in the Files pane. This will take you into the data folder, which will be empty. Use the New Folder button to create raw and cleaned folders. To return to the project folder, click on it in the file path, which is highlighted in yellow in the previous image. It’s worth noting that the Files pane helps you create, find, and open files, but moving through your files won’t change where the working directory of your project is.",
    "crumbs": [
      "Home",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is the iNaturalist City Nature Challenge coding with R workshop.\nhttps://www.inaturalist.org/projects/los-angeles-city-nature-challenge-cumulative-observations-2016-2024\nMore content needed…",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "lessons/next-steps.html",
    "href": "lessons/next-steps.html",
    "title": "Next steps",
    "section": "",
    "text": "We have covered various ways to do basic analyze iNaturalist data.\nNext step is for you to come up with some questions, and analyze the CNC iNaturalist data.\nWe covered a lot of information, so review the lessons notes, scripts, and videos.\nCreate a script file to save your work. Copy and paste examples provided in the lessons, and adjust them to fit your needs. When you have something that kinda works, save the script file and the results.\nTry lots of different way to look at the data. You can create multiple script files.\nAdd comments to the code to remind yourself what the code does.\nAs you are analyzing the data, think about how you want to present your results.\nAttend the office hours or email me if you have questions.",
    "crumbs": [
      "Home",
      "Next steps"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html",
    "href": "lessons/intro-science-coding.html",
    "title": "Science and Coding concepts",
    "section": "",
    "text": "More content needed…\n\n\n\nThere are millions of species on our planet. In order to help organize the millions of species, people have developed ways to classify and name species. Scientists want to give each species a unique name so when someone says a organism name, people around the world know which organism they are referring to. Scientists also want to group related species together.\n“The Swedish botanist Carl Linnaeus is regarded as the founder of the current system of taxonomy, as he developed a ranked system known as Linnaean taxonomy for categorizing organisms and binomial nomenclature for naming organisms.” — Wikipedia\nTo help group related organisms together, scientists have developed a hierarchy of taxonomic ranks. The main ranks are domain, kingdom, phylum, class, order, family, genus, and species. Each species have a two part name consisting of genus and species. The scientific names are in Latin. Each scientific name can have multiple common names in multiple languages. As scientists learn new things, they can reclassify and rename species.\nLet’s look at the taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.\nRank: Latin scientific name (English common name from iNaturalist)\n\nKingdom: Animalia (Animals)\nPhylum: Chordata (Chordates)\nClass: Reptilia (Reptiles)\nOrder: Squamata (Snakes and Lizards)\nFamily: Phrynosomatidae (Phrynosomatid Lizards)\nGenus: Sceloporus (Spiny Lizards)\nSpecies: Sceloporus occidentalis (Western Fence Lizard)",
    "crumbs": [
      "Home",
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#biology-concepts",
    "href": "lessons/intro-science-coding.html#biology-concepts",
    "title": "Science and Coding concepts",
    "section": "",
    "text": "More content needed…\n\n\n\nThere are millions of species on our planet. In order to help organize the millions of species, people have developed ways to classify and name species. Scientists want to give each species a unique name so when someone says a organism name, people around the world know which organism they are referring to. Scientists also want to group related species together.\n“The Swedish botanist Carl Linnaeus is regarded as the founder of the current system of taxonomy, as he developed a ranked system known as Linnaean taxonomy for categorizing organisms and binomial nomenclature for naming organisms.” — Wikipedia\nTo help group related organisms together, scientists have developed a hierarchy of taxonomic ranks. The main ranks are domain, kingdom, phylum, class, order, family, genus, and species. Each species have a two part name consisting of genus and species. The scientific names are in Latin. Each scientific name can have multiple common names in multiple languages. As scientists learn new things, they can reclassify and rename species.\nLet’s look at the taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.\nRank: Latin scientific name (English common name from iNaturalist)\n\nKingdom: Animalia (Animals)\nPhylum: Chordata (Chordates)\nClass: Reptilia (Reptiles)\nOrder: Squamata (Snakes and Lizards)\nFamily: Phrynosomatidae (Phrynosomatid Lizards)\nGenus: Sceloporus (Spiny Lizards)\nSpecies: Sceloporus occidentalis (Western Fence Lizard)",
    "crumbs": [
      "Home",
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/intro-science-coding.html#coding-concepts",
    "href": "lessons/intro-science-coding.html#coding-concepts",
    "title": "Science and Coding concepts",
    "section": "Coding Concepts",
    "text": "Coding Concepts\n\nProgramming\nThe basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions. We write these instructions in the form of code, which is a common language that is understood by the computer and humans (after some practice). We call these instructions commands, and we tell the computer to follow the instructions by running (also called executing) the commands.\n\n\nFile paths\nWhen we reference other files from an R script, we need to give R precise instructions on where those files are. We do that using something called a file path.\nThere are two kinds of paths: absolute and relative. Absolute paths are specific to a particular computer, whereas relative paths are relative to a certain folder. For instance an absolute path is “/Users/username/Documents/coding/CNC-coding-workshop/data/cleaned/cnc-los-angeles-observations.csv”, and relative path is “data/cleaned/cnc-los-angeles-observations.csv”.\n\n\nFunctions\nFunctions are predefined bits of code that automate more complicated actions. Arguments are values that we pass into a function, and the function does something to the values. A function can have one or more arguments. A function’s arguments come in a particular order, and if you put them in the correct order, you don’t need to name them. Executing a function is called calling or running the function.\nR has built in functions. You can also write your own functions.\nLet’s create a function that saves a person’s name and email.\n\n# create a function named save_contact. 1st argument is name, 2nd is email.\n\nsave_contact &lt;- function(name, email){\n  # prints the arguments\n  cat('name:', name, ' email:', email)\n  \n  # TODO: check if name and email are present\n  # TODO: check if email is valid\n  # TODO: save the values to a database\n  # TODO: return new contact\n}\n\nTo use a function, we write the name of the function, and pass it some values.\n\n# pass in the argument names and values in order\nsave_contact(name='Jane', email='jane@user.com')\n\nname: Jane  email: jane@user.com\n\n# pass in values in order\nsave_contact('Jane', 'jane@user.com')\n\nname: Jane  email: jane@user.com\n\n# pass in the argument names and values out of order\nsave_contact(email='jane@user.com', name='Jane')\n\nname: Jane  email: jane@user.com\n\n# pass in values out of order\nsave_contact('jane@user.com', 'Jane')\n\nname: jane@user.com  email: Jane\n\n\nOften times, a function will process the input and return a value. To save the function results so we can continue to work with it, use &lt;- to assign the to value to an object.\n\nnew_contact &lt;- save_contact('Jane', 'jane@user.com')\n\nname: Jane  email: jane@user.com\n\n\n\n\nR packages\nR itself has many built-in functions, but we can access many more by loading other packages. R packages contain code, data, and documentation that people can download and install to add more functionality to R.\nTo install these packages, use install.packages() function from R. We pass in the package names as arguments. The name of the packages must be in quotes.\n\n# install one package\ninstall.packages(\"readr\")\n\n# install multiple packages\ninstall.packages(c(\"readr\", \"dplyr\", \"ggplot2\", \n                   \"sf\", \"lubridate\", \"mapview\"))\n\nR will connect to the internet and download packages from servers that have R packages. R will then install the packages on your computer. The console window will show you the progress of the installation process.\nIn order to use a package, use library() function from R. We pass in the name of the package as an argument. Do not use quotes around the package name when using library().\nThese are R packages we will use in this workshop.\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(lubridate) # manipulate dates\nlibrary(mapview) # create interactive maps\n\nGenerally it is a good idea to list all the libraries that you will use in the script at the beginning of the script. You want to install the package to your computer once, and then load it with library() in each script where you need to use it.",
    "crumbs": [
      "Home",
      "Science and Coding concepts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html",
    "href": "lessons/creating-charts.html",
    "title": "Creating charts",
    "section": "",
    "text": "How do we create charts using R?\n\n\n\n\n\nLearn how to create bar and line charts using ggplot2\nLearn how to customize the appearance of the charts\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\nlibrary(ggplot2) # create data visualizations\nlibrary(lubridate) # manipulate dates",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#questions",
    "href": "lessons/creating-charts.html#questions",
    "title": "Creating charts",
    "section": "",
    "text": "How do we create charts using R?",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#objectives",
    "href": "lessons/creating-charts.html#objectives",
    "title": "Creating charts",
    "section": "",
    "text": "Learn how to create bar and line charts using ggplot2\nLearn how to customize the appearance of the charts",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#creating-charts",
    "href": "lessons/creating-charts.html#creating-charts",
    "title": "Creating charts",
    "section": "Creating charts",
    "text": "Creating charts\nWe are going to be using functions from the ggplot2 package to create visualizations. ggplot plots are built step by step by adding new layers, which allows for extensive customization of plots.\nMain steps:\n\nLoad data\nUse filter(), select(), mutate(), count() so the data frame has the data we need\nSet which columns in a data frame will be used for chart elements such as x and y axis\nSelect the chart type\nCreate chart",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#inaturalist-data",
    "href": "lessons/creating-charts.html#inaturalist-data",
    "title": "Creating charts",
    "section": "iNaturalist data",
    "text": "iNaturalist data\nFirst, read data from the iNaturalist observation file.\n\ninat &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#bar-chart",
    "href": "lessons/creating-charts.html#bar-chart",
    "title": "Creating charts",
    "section": "Bar chart",
    "text": "Bar chart\nCreate a bar chart that shows the number of observations per year.\nFirst, add year column to iNaturalist data.\n\ninat_year &lt;- inat %&gt;% \n  mutate(year = year(observed_on))\n\nPass the inaturalist observation to ggplot() function using the data argument.\n\nggplot(data = inat_year)\n\n\n\n\n\n\n\n\nWe need to tell ggplot how to process the data. We tell ggplot how to map the data to various plot elements, such as x/y axis, size, or color by using the aes() function. aes is short for aesthetic mappings.\nFor bar charts, we need to tell what column to use for the x axis.\nWe want to create a plot with year on the x axis so we use mapping = aes(x = year). ggplot will count the number of rows for each year, and use the count for y axis.\n\nggplot(data = inat_year, mapping = aes(x = year))\n\n\n\n\n\n\n\n\nNext we need to specify how we want the data to be displayed. We do this using geom_ functions, which specify the type of geometry we want, such as points, lines, or bars. We use geom_bar() to create a vertical bar plot.\nWe can add a geom_bar() layer to our plot by using the + sign. We indent onto a new line to make it easier to read, and we have to end the first line with the + sign.\n\nggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nIf we want horizontal bar chart, use coord_flip()\n\nggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar() +\n  coord_flip()",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#line-chart",
    "href": "lessons/creating-charts.html#line-chart",
    "title": "Creating charts",
    "section": "Line chart",
    "text": "Line chart\nCreate a line chart that shows the number of observations per year.\nFor line charts, we need both specify which columns to use for the x and y axis.\nWe need to create a data frame that has a year column, and a column that counts the observations per year. Use mutate() to add year column. Use count() to add column that has the count per year.\n\ninat_year_count &lt;- inat %&gt;% \n  mutate(year = year(observed_on)) %&gt;%\n  count(year, name='obs_count')  \n\ninat_year_count\n\n# A tibble: 9 × 2\n   year obs_count\n  &lt;dbl&gt;     &lt;int&gt;\n1  2016     10392\n2  2017     17495\n3  2018     19164\n4  2019     34057\n5  2020     19524\n6  2021     22549\n7  2022     19597\n8  2023     26602\n9  2024     22258\n\n\nfor aes, use year on the x axis and obs_count on the y axis. And we use geom_line() to create a line chart.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y=obs_count)) +\n  geom_line()",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#more-bar-charts",
    "href": "lessons/creating-charts.html#more-bar-charts",
    "title": "Creating charts",
    "section": "More bar charts",
    "text": "More bar charts\nCreate a bar chart that shows the number of observations per year.\nTo create bar chart when we already have x and y, use geom_col()\nWe want year on the x axis, and obs_count on the y axis.\n\nggplot(data = inat_year_count, \n       mapping = aes(x = year, y = obs_count)) +\n  geom_col()",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#exercise-1",
    "href": "lessons/creating-charts.html#exercise-1",
    "title": "Creating charts",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a chart with all your observations for each year\n\nUse mutate() to add year column\nUse filter() to select user\nUse ggplot() to set the data and aesthetics.\nChoose whih type of chart you want: bar or line.\n\n\n\nmy_year  &lt;- inat %&gt;% \n  mutate(year = year(observed_on))  %&gt;% \n  filter(user_login == 'natureinla')\n\n  \nggplot(data = my_year, mapping = aes(x = year)) +\n  geom_bar()",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-aesthetics",
    "href": "lessons/creating-charts.html#changing-aesthetics",
    "title": "Creating charts",
    "section": "Changing aesthetics",
    "text": "Changing aesthetics\nBuilding ggplot plots is often an iterative process, so we’ll continue developing the column plot we just made.\nUse colors() to get a list of the 657 colors in R.\n\ncolors()\n\n  [1] \"white\"                \"aliceblue\"            \"antiquewhite\"        \n  [4] \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n  [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"         \n [10] \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n [13] \"azure\"                \"azure1\"               \"azure2\"              \n [16] \"azure3\"               \"azure4\"               \"beige\"               \n [19] \"bisque\"               \"bisque1\"              \"bisque2\"             \n [22] \"bisque3\"              \"bisque4\"              \"black\"               \n [25] \"blanchedalmond\"       \"blue\"                 \"blue1\"               \n [28] \"blue2\"                \"blue3\"                \"blue4\"               \n [31] \"blueviolet\"           \"brown\"                \"brown1\"              \n [34] \"brown2\"               \"brown3\"               \"brown4\"              \n [37] \"burlywood\"            \"burlywood1\"           \"burlywood2\"          \n [40] \"burlywood3\"           \"burlywood4\"           \"cadetblue\"           \n [43] \"cadetblue1\"           \"cadetblue2\"           \"cadetblue3\"          \n [46] \"cadetblue4\"           \"chartreuse\"           \"chartreuse1\"         \n [49] \"chartreuse2\"          \"chartreuse3\"          \"chartreuse4\"         \n [52] \"chocolate\"            \"chocolate1\"           \"chocolate2\"          \n [55] \"chocolate3\"           \"chocolate4\"           \"coral\"               \n [58] \"coral1\"               \"coral2\"               \"coral3\"              \n [61] \"coral4\"               \"cornflowerblue\"       \"cornsilk\"            \n [64] \"cornsilk1\"            \"cornsilk2\"            \"cornsilk3\"           \n [67] \"cornsilk4\"            \"cyan\"                 \"cyan1\"               \n [70] \"cyan2\"                \"cyan3\"                \"cyan4\"               \n [73] \"darkblue\"             \"darkcyan\"             \"darkgoldenrod\"       \n [76] \"darkgoldenrod1\"       \"darkgoldenrod2\"       \"darkgoldenrod3\"      \n [79] \"darkgoldenrod4\"       \"darkgray\"             \"darkgreen\"           \n [82] \"darkgrey\"             \"darkkhaki\"            \"darkmagenta\"         \n [85] \"darkolivegreen\"       \"darkolivegreen1\"      \"darkolivegreen2\"     \n [88] \"darkolivegreen3\"      \"darkolivegreen4\"      \"darkorange\"          \n [91] \"darkorange1\"          \"darkorange2\"          \"darkorange3\"         \n [94] \"darkorange4\"          \"darkorchid\"           \"darkorchid1\"         \n [97] \"darkorchid2\"          \"darkorchid3\"          \"darkorchid4\"         \n[100] \"darkred\"              \"darksalmon\"           \"darkseagreen\"        \n[103] \"darkseagreen1\"        \"darkseagreen2\"        \"darkseagreen3\"       \n[106] \"darkseagreen4\"        \"darkslateblue\"        \"darkslategray\"       \n[109] \"darkslategray1\"       \"darkslategray2\"       \"darkslategray3\"      \n[112] \"darkslategray4\"       \"darkslategrey\"        \"darkturquoise\"       \n[115] \"darkviolet\"           \"deeppink\"             \"deeppink1\"           \n[118] \"deeppink2\"            \"deeppink3\"            \"deeppink4\"           \n[121] \"deepskyblue\"          \"deepskyblue1\"         \"deepskyblue2\"        \n[124] \"deepskyblue3\"         \"deepskyblue4\"         \"dimgray\"             \n[127] \"dimgrey\"              \"dodgerblue\"           \"dodgerblue1\"         \n[130] \"dodgerblue2\"          \"dodgerblue3\"          \"dodgerblue4\"         \n[133] \"firebrick\"            \"firebrick1\"           \"firebrick2\"          \n[136] \"firebrick3\"           \"firebrick4\"           \"floralwhite\"         \n[139] \"forestgreen\"          \"gainsboro\"            \"ghostwhite\"          \n[142] \"gold\"                 \"gold1\"                \"gold2\"               \n[145] \"gold3\"                \"gold4\"                \"goldenrod\"           \n[148] \"goldenrod1\"           \"goldenrod2\"           \"goldenrod3\"          \n[151] \"goldenrod4\"           \"gray\"                 \"gray0\"               \n[154] \"gray1\"                \"gray2\"                \"gray3\"               \n[157] \"gray4\"                \"gray5\"                \"gray6\"               \n[160] \"gray7\"                \"gray8\"                \"gray9\"               \n[163] \"gray10\"               \"gray11\"               \"gray12\"              \n[166] \"gray13\"               \"gray14\"               \"gray15\"              \n[169] \"gray16\"               \"gray17\"               \"gray18\"              \n[172] \"gray19\"               \"gray20\"               \"gray21\"              \n[175] \"gray22\"               \"gray23\"               \"gray24\"              \n[178] \"gray25\"               \"gray26\"               \"gray27\"              \n[181] \"gray28\"               \"gray29\"               \"gray30\"              \n[184] \"gray31\"               \"gray32\"               \"gray33\"              \n[187] \"gray34\"               \"gray35\"               \"gray36\"              \n[190] \"gray37\"               \"gray38\"               \"gray39\"              \n[193] \"gray40\"               \"gray41\"               \"gray42\"              \n[196] \"gray43\"               \"gray44\"               \"gray45\"              \n[199] \"gray46\"               \"gray47\"               \"gray48\"              \n[202] \"gray49\"               \"gray50\"               \"gray51\"              \n[205] \"gray52\"               \"gray53\"               \"gray54\"              \n[208] \"gray55\"               \"gray56\"               \"gray57\"              \n[211] \"gray58\"               \"gray59\"               \"gray60\"              \n[214] \"gray61\"               \"gray62\"               \"gray63\"              \n[217] \"gray64\"               \"gray65\"               \"gray66\"              \n[220] \"gray67\"               \"gray68\"               \"gray69\"              \n[223] \"gray70\"               \"gray71\"               \"gray72\"              \n[226] \"gray73\"               \"gray74\"               \"gray75\"              \n[229] \"gray76\"               \"gray77\"               \"gray78\"              \n[232] \"gray79\"               \"gray80\"               \"gray81\"              \n[235] \"gray82\"               \"gray83\"               \"gray84\"              \n[238] \"gray85\"               \"gray86\"               \"gray87\"              \n[241] \"gray88\"               \"gray89\"               \"gray90\"              \n[244] \"gray91\"               \"gray92\"               \"gray93\"              \n[247] \"gray94\"               \"gray95\"               \"gray96\"              \n[250] \"gray97\"               \"gray98\"               \"gray99\"              \n[253] \"gray100\"              \"green\"                \"green1\"              \n[256] \"green2\"               \"green3\"               \"green4\"              \n[259] \"greenyellow\"          \"grey\"                 \"grey0\"               \n[262] \"grey1\"                \"grey2\"                \"grey3\"               \n[265] \"grey4\"                \"grey5\"                \"grey6\"               \n[268] \"grey7\"                \"grey8\"                \"grey9\"               \n[271] \"grey10\"               \"grey11\"               \"grey12\"              \n[274] \"grey13\"               \"grey14\"               \"grey15\"              \n[277] \"grey16\"               \"grey17\"               \"grey18\"              \n[280] \"grey19\"               \"grey20\"               \"grey21\"              \n[283] \"grey22\"               \"grey23\"               \"grey24\"              \n[286] \"grey25\"               \"grey26\"               \"grey27\"              \n[289] \"grey28\"               \"grey29\"               \"grey30\"              \n[292] \"grey31\"               \"grey32\"               \"grey33\"              \n[295] \"grey34\"               \"grey35\"               \"grey36\"              \n[298] \"grey37\"               \"grey38\"               \"grey39\"              \n[301] \"grey40\"               \"grey41\"               \"grey42\"              \n[304] \"grey43\"               \"grey44\"               \"grey45\"              \n[307] \"grey46\"               \"grey47\"               \"grey48\"              \n[310] \"grey49\"               \"grey50\"               \"grey51\"              \n[313] \"grey52\"               \"grey53\"               \"grey54\"              \n[316] \"grey55\"               \"grey56\"               \"grey57\"              \n[319] \"grey58\"               \"grey59\"               \"grey60\"              \n[322] \"grey61\"               \"grey62\"               \"grey63\"              \n[325] \"grey64\"               \"grey65\"               \"grey66\"              \n[328] \"grey67\"               \"grey68\"               \"grey69\"              \n[331] \"grey70\"               \"grey71\"               \"grey72\"              \n[334] \"grey73\"               \"grey74\"               \"grey75\"              \n[337] \"grey76\"               \"grey77\"               \"grey78\"              \n[340] \"grey79\"               \"grey80\"               \"grey81\"              \n[343] \"grey82\"               \"grey83\"               \"grey84\"              \n[346] \"grey85\"               \"grey86\"               \"grey87\"              \n[349] \"grey88\"               \"grey89\"               \"grey90\"              \n[352] \"grey91\"               \"grey92\"               \"grey93\"              \n[355] \"grey94\"               \"grey95\"               \"grey96\"              \n[358] \"grey97\"               \"grey98\"               \"grey99\"              \n[361] \"grey100\"              \"honeydew\"             \"honeydew1\"           \n[364] \"honeydew2\"            \"honeydew3\"            \"honeydew4\"           \n[367] \"hotpink\"              \"hotpink1\"             \"hotpink2\"            \n[370] \"hotpink3\"             \"hotpink4\"             \"indianred\"           \n[373] \"indianred1\"           \"indianred2\"           \"indianred3\"          \n[376] \"indianred4\"           \"ivory\"                \"ivory1\"              \n[379] \"ivory2\"               \"ivory3\"               \"ivory4\"              \n[382] \"khaki\"                \"khaki1\"               \"khaki2\"              \n[385] \"khaki3\"               \"khaki4\"               \"lavender\"            \n[388] \"lavenderblush\"        \"lavenderblush1\"       \"lavenderblush2\"      \n[391] \"lavenderblush3\"       \"lavenderblush4\"       \"lawngreen\"           \n[394] \"lemonchiffon\"         \"lemonchiffon1\"        \"lemonchiffon2\"       \n[397] \"lemonchiffon3\"        \"lemonchiffon4\"        \"lightblue\"           \n[400] \"lightblue1\"           \"lightblue2\"           \"lightblue3\"          \n[403] \"lightblue4\"           \"lightcoral\"           \"lightcyan\"           \n[406] \"lightcyan1\"           \"lightcyan2\"           \"lightcyan3\"          \n[409] \"lightcyan4\"           \"lightgoldenrod\"       \"lightgoldenrod1\"     \n[412] \"lightgoldenrod2\"      \"lightgoldenrod3\"      \"lightgoldenrod4\"     \n[415] \"lightgoldenrodyellow\" \"lightgray\"            \"lightgreen\"          \n[418] \"lightgrey\"            \"lightpink\"            \"lightpink1\"          \n[421] \"lightpink2\"           \"lightpink3\"           \"lightpink4\"          \n[424] \"lightsalmon\"          \"lightsalmon1\"         \"lightsalmon2\"        \n[427] \"lightsalmon3\"         \"lightsalmon4\"         \"lightseagreen\"       \n[430] \"lightskyblue\"         \"lightskyblue1\"        \"lightskyblue2\"       \n[433] \"lightskyblue3\"        \"lightskyblue4\"        \"lightslateblue\"      \n[436] \"lightslategray\"       \"lightslategrey\"       \"lightsteelblue\"      \n[439] \"lightsteelblue1\"      \"lightsteelblue2\"      \"lightsteelblue3\"     \n[442] \"lightsteelblue4\"      \"lightyellow\"          \"lightyellow1\"        \n[445] \"lightyellow2\"         \"lightyellow3\"         \"lightyellow4\"        \n[448] \"limegreen\"            \"linen\"                \"magenta\"             \n[451] \"magenta1\"             \"magenta2\"             \"magenta3\"            \n[454] \"magenta4\"             \"maroon\"               \"maroon1\"             \n[457] \"maroon2\"              \"maroon3\"              \"maroon4\"             \n[460] \"mediumaquamarine\"     \"mediumblue\"           \"mediumorchid\"        \n[463] \"mediumorchid1\"        \"mediumorchid2\"        \"mediumorchid3\"       \n[466] \"mediumorchid4\"        \"mediumpurple\"         \"mediumpurple1\"       \n[469] \"mediumpurple2\"        \"mediumpurple3\"        \"mediumpurple4\"       \n[472] \"mediumseagreen\"       \"mediumslateblue\"      \"mediumspringgreen\"   \n[475] \"mediumturquoise\"      \"mediumvioletred\"      \"midnightblue\"        \n[478] \"mintcream\"            \"mistyrose\"            \"mistyrose1\"          \n[481] \"mistyrose2\"           \"mistyrose3\"           \"mistyrose4\"          \n[484] \"moccasin\"             \"navajowhite\"          \"navajowhite1\"        \n[487] \"navajowhite2\"         \"navajowhite3\"         \"navajowhite4\"        \n[490] \"navy\"                 \"navyblue\"             \"oldlace\"             \n[493] \"olivedrab\"            \"olivedrab1\"           \"olivedrab2\"          \n[496] \"olivedrab3\"           \"olivedrab4\"           \"orange\"              \n[499] \"orange1\"              \"orange2\"              \"orange3\"             \n[502] \"orange4\"              \"orangered\"            \"orangered1\"          \n[505] \"orangered2\"           \"orangered3\"           \"orangered4\"          \n[508] \"orchid\"               \"orchid1\"              \"orchid2\"             \n[511] \"orchid3\"              \"orchid4\"              \"palegoldenrod\"       \n[514] \"palegreen\"            \"palegreen1\"           \"palegreen2\"          \n[517] \"palegreen3\"           \"palegreen4\"           \"paleturquoise\"       \n[520] \"paleturquoise1\"       \"paleturquoise2\"       \"paleturquoise3\"      \n[523] \"paleturquoise4\"       \"palevioletred\"        \"palevioletred1\"      \n[526] \"palevioletred2\"       \"palevioletred3\"       \"palevioletred4\"      \n[529] \"papayawhip\"           \"peachpuff\"            \"peachpuff1\"          \n[532] \"peachpuff2\"           \"peachpuff3\"           \"peachpuff4\"          \n[535] \"peru\"                 \"pink\"                 \"pink1\"               \n[538] \"pink2\"                \"pink3\"                \"pink4\"               \n[541] \"plum\"                 \"plum1\"                \"plum2\"               \n[544] \"plum3\"                \"plum4\"                \"powderblue\"          \n[547] \"purple\"               \"purple1\"              \"purple2\"             \n[550] \"purple3\"              \"purple4\"              \"red\"                 \n[553] \"red1\"                 \"red2\"                 \"red3\"                \n[556] \"red4\"                 \"rosybrown\"            \"rosybrown1\"          \n[559] \"rosybrown2\"           \"rosybrown3\"           \"rosybrown4\"          \n[562] \"royalblue\"            \"royalblue1\"           \"royalblue2\"          \n[565] \"royalblue3\"           \"royalblue4\"           \"saddlebrown\"         \n[568] \"salmon\"               \"salmon1\"              \"salmon2\"             \n[571] \"salmon3\"              \"salmon4\"              \"sandybrown\"          \n[574] \"seagreen\"             \"seagreen1\"            \"seagreen2\"           \n[577] \"seagreen3\"            \"seagreen4\"            \"seashell\"            \n[580] \"seashell1\"            \"seashell2\"            \"seashell3\"           \n[583] \"seashell4\"            \"sienna\"               \"sienna1\"             \n[586] \"sienna2\"              \"sienna3\"              \"sienna4\"             \n[589] \"skyblue\"              \"skyblue1\"             \"skyblue2\"            \n[592] \"skyblue3\"             \"skyblue4\"             \"slateblue\"           \n[595] \"slateblue1\"           \"slateblue2\"           \"slateblue3\"          \n[598] \"slateblue4\"           \"slategray\"            \"slategray1\"          \n[601] \"slategray2\"           \"slategray3\"           \"slategray4\"          \n[604] \"slategrey\"            \"snow\"                 \"snow1\"               \n[607] \"snow2\"                \"snow3\"                \"snow4\"               \n[610] \"springgreen\"          \"springgreen1\"         \"springgreen2\"        \n[613] \"springgreen3\"         \"springgreen4\"         \"steelblue\"           \n[616] \"steelblue1\"           \"steelblue2\"           \"steelblue3\"          \n[619] \"steelblue4\"           \"tan\"                  \"tan1\"                \n[622] \"tan2\"                 \"tan3\"                 \"tan4\"                \n[625] \"thistle\"              \"thistle1\"             \"thistle2\"            \n[628] \"thistle3\"             \"thistle4\"             \"tomato\"              \n[631] \"tomato1\"              \"tomato2\"              \"tomato3\"             \n[634] \"tomato4\"              \"turquoise\"            \"turquoise1\"          \n[637] \"turquoise2\"           \"turquoise3\"           \"turquoise4\"          \n[640] \"violet\"               \"violetred\"            \"violetred1\"          \n[643] \"violetred2\"           \"violetred3\"           \"violetred4\"          \n[646] \"wheat\"                \"wheat1\"               \"wheat2\"              \n[649] \"wheat3\"               \"wheat4\"               \"whitesmoke\"          \n[652] \"yellow\"               \"yellow1\"              \"yellow2\"             \n[655] \"yellow3\"              \"yellow4\"              \"yellowgreen\"         \n\n\nWe can change the color of the bars using fill='color'.\n\nggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar(fill='aquamarine')\n\n\n\n\n\n\n\n\nWe can also use 6 digit hex color. You can use online tools to get hex colors. https://html-color.codes\n\nggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar(fill='#75cd5e')",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-themes",
    "href": "lessons/creating-charts.html#changing-themes",
    "title": "Creating charts",
    "section": "Changing themes",
    "text": "Changing themes\nLet’s assign a plot to an object.\n\nmyplot &lt;- ggplot(data = inat_year, mapping = aes(x = year)) +\n  geom_bar(fill='#75cd5e')\n\nmyplot\n\n\n\n\n\n\n\n\nggplot has built in themes that affects the overall appearance of a plot. To see a list of available themes in ggplot, visit https://ggplot2.tidyverse.org/reference/index.html#themes\nLet’s add the black-and-white theme theme_bw() to our plot:\n\nmyplot + \n  theme_bw()\n\n\n\n\n\n\n\n\nTo individually change parts of a plot, we can use the theme() function, which can take many different arguments to change things about the text, grid lines, background color, and more.\nLet’s try changing the size of the text on our axis titles. We can do this by specifying that the axis.title should be an element_text() with size set to 14.\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\nAnother change we might want to make is to remove the vertical grid lines. To do this, we will change the panel.grid.major.x and panel.grid.major.x to an element_blank().\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nBecause there are so many possible arguments to the theme() function, it can sometimes be hard to find the right one. Here are some tips for figuring out how to modify a plot element:\n\ntype out theme(), put your cursor between the parentheses, and hit Tab to bring up a list of arguments\n\nyou can scroll through the arguments, or start typing, which will shorten the list of potential matches\n\nlike many things in the tidyverse, similar argument start with similar names\n\nthere are axis, legend, panel, plot, and strip arguments\n\narguments have hierarchy\n\ntext controls all text in the whole plot\naxis.title controls the text for the axis titles\naxis.title.x controls the text for the x axis title",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#changing-labels",
    "href": "lessons/creating-charts.html#changing-labels",
    "title": "Creating charts",
    "section": "Changing labels",
    "text": "Changing labels\nWe can customize the axis labels and add a chart title using labs().\n\nmyplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        plot.title = element_text(face = \"bold\", size = 20)) +\n  labs(title = \"CNC Los Angeles\",\n       subtitle=\"Observations per year\",\n       x = \"Year\",\n       y = \"Observations\")",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#exercise-2-customizing-a-plot",
    "href": "lessons/creating-charts.html#exercise-2-customizing-a-plot",
    "title": "Creating charts",
    "section": "Exercise 2: Customizing a plot",
    "text": "Exercise 2: Customizing a plot\nTake the my_year data frame from exercise 1 (your observations for each year) and create a plot. Customize the appearance. Here are some ideas.\n\nadd a title\nchoose the one of the built in themes\nchange the axis titles\nchange the colors of the bar\n\n\n\nmy_map &lt;- ggplot(data = my_year, mapping = aes(x = year)) +\n  geom_bar()\n\nmy_map +\n  theme_classic() +\n  labs(title = \"CNC Los Angeles\",  x = \"Year\",  y = \"Observations\")",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-charts.html#saving-plots",
    "href": "lessons/creating-charts.html#saving-plots",
    "title": "Creating charts",
    "section": "Saving plots",
    "text": "Saving plots\nOnce we are happy with ourplot, we can save the plot.\nAssign the plot to an object. Then run ggsave() to save our plot. The first argument we give is the path to the file we want to save, including the correct file extension. You can save as jpb, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\n# create plot\nfinalplot &lt;- myplot +\n  theme_bw() +\n  theme(axis.title = element_text(size = 14), \n        plot.title = element_text(face = \"bold\", size = 20)) +\n  labs(title = \"CNC Los Angeles\",\n       subtitle=\"Observations per year\",\n       x = \"Year\",\n       y = \"Observations\")\n\n# save plot\nggsave(filename = 'results/observations_per_year.jpg', plot = finalplot,  height = 6, width = 8)",
    "crumbs": [
      "Home",
      "Creating charts"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html",
    "href": "lessons/creating-maps.html",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?\n\n\n\n\n\nLearn how to plot iNaturalist observations on a map\nLearn how to create static maps with ggplot2\nLearn how to create interactive maps with mapview",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#questions",
    "href": "lessons/creating-maps.html#questions",
    "title": "Creating maps",
    "section": "",
    "text": "How do we create maps using R?",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#objectives",
    "href": "lessons/creating-maps.html#objectives",
    "title": "Creating maps",
    "section": "",
    "text": "Learn how to plot iNaturalist observations on a map\nLearn how to create static maps with ggplot2\nLearn how to create interactive maps with mapview",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#geographic-concepts",
    "href": "lessons/creating-maps.html#geographic-concepts",
    "title": "Creating maps",
    "section": "Geographic concepts",
    "text": "Geographic concepts\nGeographic data is data that has a location.\nThere are various file formats for geographic data. Shape files for GIS applications, KML for Google maps, geojson for web applications.\nEarth is a 3D sphere. Maps are 2D representation of a 3D sphere. Map projections are ways to represent a sphere as a flat surface. A coordinate reference system (CRS) defines how the two-dimensional, projected map relates to real places on the earth.\nMany organizations offer geospatial data that people can use for free. Los Angeles City has a portal for geospatial data: https://geohub.lacity.org",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#mapping-inaturalist-data",
    "href": "lessons/creating-maps.html#mapping-inaturalist-data",
    "title": "Creating maps",
    "section": "Mapping iNaturalist data",
    "text": "Mapping iNaturalist data\niNaturalist data includes latitude and longitude, which means we can put the observations in a map. There are several packages to create maps. We will use ggplot and mapview packages.\nMain steps:\n\nLoad iNaturalist data\nAdd geometry column to iNaturalist data frame\nUse filter(), select(), and mutate(), to get the rows and columns we want.\nCreate map.\n\nloading R packages\n\nlibrary(readr) # read and write tabular data\nlibrary(dplyr) # manipulate data\n\nlibrary(ggplot2) # create data visualizations\nlibrary(sf) # handle geospatial data\nlibrary(mapview) # create interactive maps\n\nRead data from the cleaned iNaturalist observation file.\n\ninat &lt;- read_csv('data/cleaned/cnc-los-angeles-observations.csv')\n\nUse names() to see all the column names. “latitude” and “longitude” are the column names we need.\n\nnames(inat)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"     \n\n\nWe use the sf package to add geographic data to our data frame. st_as_sf() from sf package will take the longitude and latitude and add a geometry column that we can use for mapping.\n\nWe pass in longitude and latitude columns to coords argument. Must wrap longitude and latitude in quotes.\ncrs is coordinate reference system. 4326 is code for the WGS 84 CRS. WGS 84 is a commonly used CRS. WGS 84 is used in GPS applications.\nremove=FALSE will keep the longitude and latitude columns in the data frame\n\n\ntemp &lt;- inat %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE)\n\nuse names() to get a list of all the columns. A geometry column was added.\n\nnames(temp)\n\n [1] \"id\"                         \"observed_on\"               \n [3] \"time_observed_at\"           \"user_id\"                   \n [5] \"user_login\"                 \"user_name\"                 \n [7] \"created_at\"                 \"updated_at\"                \n [9] \"quality_grade\"              \"license\"                   \n[11] \"url\"                        \"image_url\"                 \n[13] \"sound_url\"                  \"tag_list\"                  \n[15] \"description\"                \"captive_cultivated\"        \n[17] \"latitude\"                   \"longitude\"                 \n[19] \"positional_accuracy\"        \"public_positional_accuracy\"\n[21] \"geoprivacy\"                 \"taxon_geoprivacy\"          \n[23] \"coordinates_obscured\"       \"scientific_name\"           \n[25] \"common_name\"                \"iconic_taxon_name\"         \n[27] \"taxon_id\"                   \"taxon_kingdom_name\"        \n[29] \"taxon_phylum_name\"          \"taxon_class_name\"          \n[31] \"taxon_order_name\"           \"taxon_family_name\"         \n[33] \"taxon_genus_name\"           \"taxon_species_name\"        \n[35] \"taxon_subspecies_name\"      \"geometry\"                  \n\n\nuse select() to pick which columns to use.\n\ninat_map &lt;- inat %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),   crs = 4326, remove=FALSE) %&gt;% \n  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry, quality_grade) \n\nUse dim() to show the number of rows and columns. There are over 191K rows.\n\ndim(inat_map)\n\n[1] 191638     10\n\n\nLet’s get the observations for ‘Quercus agrifolia’ aka Coast Live Oak.\n\ninat_oak &lt;- inat_map %&gt;% \n  filter(scientific_name == 'Quercus agrifolia')\n\nUse dim() to get number of observations. About 700 rows.\n\ndim(inat_oak)\n\n[1] 711  10",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#static-map",
    "href": "lessons/creating-maps.html#static-map",
    "title": "Creating maps",
    "section": "static map",
    "text": "static map\nggplot is a data visualization package. We can use ggplot to create static maps. geom_sf() will use plot each observation using the information in the geometry column.\nLet’s create a map for all the observations.\n\nggplot() +\n  geom_sf(data = inat_map)  \n\n\n\n\n\n\n\n\nLet’s create a map for Coast Live Oak observations.\n\nggplot() +\n  geom_sf(data = inat_oak)  \n\n\n\n\n\n\n\n\nWe can set the color of the map marker using color argument.\n\nggplot() +\n  geom_sf(data = inat_oak, color='green')  \n\n\n\n\n\n\n\n\nWe can also set the color of the marker by using the values of a given column using mapping=aes(color=&lt;column_name&gt;).\nLet’s use ‘quality_grade’ to set the color of the map markers.\n\nggplot() +\n  geom_sf(data = inat_oak, mapping=aes(color=quality_grade))",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#interactive-map",
    "href": "lessons/creating-maps.html#interactive-map",
    "title": "Creating maps",
    "section": "interactive map",
    "text": "interactive map\nWe can use mapview package to create interactive maps where you can zoom in and out.\nThere are over 191K rows in inat_map data frame. Creating an interactive map with 191K rows will be very slow. Do not use mapview if there are lots of rows.\nLet’s create interactive map for ‘Coast Live Oak’.\nWhen you click on observation, all the fields that were passed into select() will be displayed in a popup.\n\nmapview(inat_oak)\n\n\nUse color to set the color of the border. User col.regions to set the color of the fill.\n\nmapview(inat_oak, color='black', col.regions='green')\n\n\nWe can also set the color of the marker by using the values of a given column using zcol=&lt;column_name&gt;.\nLet’s use quality_grade to set the color of the map markers.\n\nmapview(inat_oak, zcol='quality_grade')",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#add-object-boundaries",
    "href": "lessons/creating-maps.html#add-object-boundaries",
    "title": "Creating maps",
    "section": "Add object boundaries",
    "text": "Add object boundaries\nLet’s add the boundaries for LA county to the map.\nShape files is a file format for geographic information system software. I downloaded the LA county boundaries as a Shape file from https://geohub.lacity.org/datasets/lacounty::county-boundaries/explore\nWe will use read_sf() from sf package to read the Shape file.\n\nla_county &lt;- read_sf('data/raw/County_Boundary/County_Boundary.shp')\n\nLet’s create a map with LA County and oak observations.\n\nggplot() +\n  geom_sf(data = la_county)  +\n  geom_sf(data = inat_oak) \n\n\n\n\n\n\n\n\n\nmapview(la_county) +\n  mapview(inat_oak)",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-1",
    "href": "lessons/creating-maps.html#exercise-1",
    "title": "Creating maps",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a map for one species. Include the boundaries for LA County.\n\nuse filter() to select observations for one species\ncreate either a static or interactive map.\n\n\n\ninat_finch &lt;- inat_map %&gt;% \n  filter(common_name == 'House Finch')\n\nmapview(la_county) + \n  mapview(inat_finch)",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exploring-inaturlist-data-in-specific-area",
    "href": "lessons/creating-maps.html#exploring-inaturlist-data-in-specific-area",
    "title": "Creating maps",
    "section": "Exploring iNaturlist data in specific area",
    "text": "Exploring iNaturlist data in specific area\nLet’s look for all iNaturalist observations made in Exposition Park.\nI used this Draw map boundaries to draw and download the boundaries of Exposition Park. The file is in geojson format.\nLet’s use st_read() to read a geojson file. Use st_transform to set the crs\n\nexpo_park &lt;- st_read('data/raw/boundaries_expo_park_area.geojson')  %&gt;% \n  st_transform(4326)\n\nReading layer `boundaries_expo_park_area' from data source \n  `/Users/wyk/Development/science/city_nature_challenge/NHMLA_workshop/CNC-coding-workshop_quarto/lessons/data/raw/boundaries_expo_park_area.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -118.2915 ymin: 34.01096 xmax: -118.2829 ymax: 34.01806\nGeodetic CRS:  WGS 84\n\n\nFirst create map of Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park) \n\n\n\n\n\n\n\n\n\nmapview(expo_park) \n\n\nWe want to get observation inside Expo Park. When we want to combine two geospatial datasets, we need to make sure the CRS are the same.\nst_crs() from sf returns the CRS for a data frame.\n\nst_crs(expo_park)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nLet’s use st_crs() to check if the CRS for the iNaturalist data and the Expo Park are the same. == checks if two things are equal.\n\nst_crs(expo_park) == st_crs(inat_map)\n\n[1] TRUE\n\n\nst_intersects() from sf can tell us which points are inside a boundary. st_intersects() returns number of items in each row of inat_map that is inside expo_park.\n\nst_intersects(inat_map, expo_park)\n\nSparse geometry binary predicate list of length 191638, where the\npredicate was `intersects'\nfirst 10 elements:\n 1: (empty)\n 2: 1\n 3: (empty)\n 4: (empty)\n 5: (empty)\n 6: (empty)\n 7: (empty)\n 8: (empty)\n 9: (empty)\n 10: (empty)\n\n\nWe can use lengths(...) &gt; 0 to return TRUE/FALSE for every row in inat_map that has 1 or more items that inside expo_park\n\nlengths(st_intersects(inat_map, expo_park)) &gt; 0\n\ninat_map[..., ] selects all rows where a condition is true. In this case, we want all observations from inat_map that are inside expo_park.\n\ninat_expo &lt;- inat_map[lengths(st_intersects(inat_map, expo_park)) &gt; 0, ]\n\nUse dim() to get row and column count. 191K observations in LA county, over 2900 observation in Expo Park.\n\ndim(inat_map)\n\n[1] 191638     10\n\ndim(inat_expo)\n\n[1] 2964   10\n\n\nLet’s create map of all observations in Expo Park.\n\nggplot() +\n  geom_sf(data = expo_park)  +\n  geom_sf(data = inat_expo) \n\n\n\n\n\n\n\n\n\nmapview(expo_park) +\n  mapview(inat_expo) \n\n\nThere are various ways to change the appearance of a map.\nFor ggplot(), use fill() to set color and alpha() to set opacity for a polygon. Use color() to set color for points.\n\nggplot() +\n  geom_sf(data = expo_park, fill=alpha(\"yellow\", .3))  +\n  geom_sf(data = inat_expo, color=\"green\") \n\n\n\n\n\n\n\n\nFor mapview(), use col.regions to set color, and alpha.regions to set opacity.\n\nmapview(expo_park, col.regions=\"yellow\",  alpha.regions=0.3) +\n  mapview(inat_expo, col.regions=\"green\")",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exercise-2",
    "href": "lessons/creating-maps.html#exercise-2",
    "title": "Creating maps",
    "section": "Exercise 2",
    "text": "Exercise 2\nCreate a map for all CNC observations that are inside of a specific area\n\nUsed Draw map boundaries to draw and download an area that you are interested in.\nSave the file to the data/raw directory.\nuse st_read to read your boundary data.\ninat_map is a data frame with all CNC observations\nuse inat_map[lengths(st_intersects(inat_map, your_boundary)) &gt; 0, ] to get observations inside a boundary\n\n\n\nusc_boundary &lt;- st_read('data/raw/boundaries_usc.geojson')  %&gt;% \n  st_transform(4326)\n\ninat_usc &lt;- inat_map[st_intersects(inat_map, usc_boundary) %&gt;% lengths &gt; 0, ]\n\nmapview(usc_boundary) + \n  mapview(inat_usc)",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  },
  {
    "objectID": "lessons/creating-maps.html#exporting-maps",
    "href": "lessons/creating-maps.html#exporting-maps",
    "title": "Creating maps",
    "section": "Exporting maps",
    "text": "Exporting maps\nWe can export the maps created with ggplot and mapview as image files.\n\nstatic maps\nAssign the map created by ggplot to an object. Then run ggsave() to save our map. The first argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.\n\n# create map\nmy_map &lt;- ggplot() +\n  geom_sf(data = expo_park)  +\n  geom_sf(data = inat_expo) \n\n# save map\nggsave(filename = 'results/expo_park_observations.jpg', plot = my_map,  height = 6, width = 8)\n\n\n\ninteractive map\nAssign the map created by mapview to an object. Then run mapshot() to save our map. The first argument is map you want to to save. The second argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, or png.\n\n# create map\nmy_map_2 &lt;- mapview(expo_park) + \n  mapview(inat_expo)\n\n# save map\nmapshot(my_map_2, file = 'results/expo_park_observations_3.jpg')",
    "crumbs": [
      "Home",
      "Creating maps"
    ]
  }
]