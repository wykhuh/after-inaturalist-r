---
title: "Using to other datasets"
format: html
include-in-header: "components/add-answer-button.html"
---

::: summary
## Questions

-   How do we get other datasets?

## objectives

-   Combine other datasets with iNaturalist data
:::

Load packages

```{r,load_packages}
#| warning: false
#| message: false

library(dplyr)
library(mapview)
library(readr)
library(dplyr)
library(sf)
library(ggplot2)
```

## Other datasets

There are various geospatial datasets that you can use while analyzing iNaturalist data. Some datasets are free to use, some require crediting the original datasource.

For this workshop, I downloaded a few datasets from Los Angeles Geohub <https://geohub.lacity.org> We are using demographics data gathered by Los Angeles county. A lot of their demographics data comes from the U.S. Census. We are also using parks date from L.A. county and L.A. city.

## iNaturalist data

Let's get observations for Coast Live Oak and create a map.

```{r, get_inaturalist_observations}
#| warning: false
#| message: false

inat_data <- read_csv('data/cleaned/cnc-los-angeles-observations.csv')

oak_obs <- inat_data %>% 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove=FALSE) %>% 
  filter(scientific_name == 'Quercus agrifolia') %>%
  select(user_login, observed_on, common_name, scientific_name)

```

```{r,create_map_of_inaturalist_observations}
#| eval: false
mapview(oak_obs)
```

![](images/mapview/other-datasets/create_map_of_inaturalist_observations.png){fig-alt="interactive map of iNaturalist observations"}

## Demographics data

Let's compare CNC iNaturalist data with demographics data about the people who live in L.A.

L.A. County completed Comprehensive Countywide Park Needs Assessment in 2016. As part of that study, they looked at demographics data throughout the county. For more information: https://geohub.lacity.org/datasets/lacounty::l-a-county-park-needs-assessment-demographics/about

::: callout-note
A lot of demographics data from the Park Needs Assessment comes from the U.S. Census. The reason we're using the parks data instead directly using Census data is because the Census data is more difficult to use. If you want to learn how to use U.S. Census data in R, check out the book [Analyzing US Census Data: Methods, Maps, and Models in R](https://walker-data.com/census-r/index.html)
:::

We load Park Needs Assessment data using `st_read()` to read geojson file. Click `la_county_pna` in the **Enviroment** pane to browse the data frame.

```{r, get_pna_data}
la_county_pna <- st_read('data/raw/PNA_Demographics_for_Dashboard_(View_Layer_SDE)_8662424390864523907.geojson')
```

Let's get the size of the dataframe and compare CRS to the iNaturalist data.

```{r, pna_datafame_info}
dim(la_county_pna)
st_crs(la_county_pna) == st_crs(oak_obs)
```

The last row has data for the entire LA County. Let's remove that last row.

```{r, remove_row_for_entire_county}
la_county_pna <- la_county_pna[-c(189), ]

dim(la_county_pna)
```

There are 96 fields in the dataset. Here's a short description of the fields.

| field | description |
|------------------------------------|------------------------------------|
| STUD_AR_ID | Study Area ID |
| STUD_AR_NM | Study Area Name |
| STUD_AR_LBL | Label |
| TOOLKIT_ID | Toolkit ID |
| Acres | Park Acres |
| AC_PER_1K | Acres/1000 |
| RepPrkAc | Accessible Park Acres |
| NEED_DESCP | Need Description |
| PCT_Walk | Walkable Percentage |
| populationtotals_totpop_cy | Total Population |
| householdtotals_avghhsz_cy | Average Household Size |
| householdincome_medhinc_cy | Median Household Income |
| educationalattainment_nohs_cy | Pop Age 25+: \< 9th Grade |
| educationalattainment_somehs_cy | Pop Age 25+: High School/No Diploma |
| educationalattainment_hsgrad_cy | Pop Age 25+: High School Diploma |
| educationalattainment_ged_cy | Pop Age 25+: GED |
| educationalattainment_smcoll_cy | Pop Age 25+: Some College/No Degree |
| educationalattainment_asscdeg_c | Pop Age 25+: Associate's Degree |
| educationalattainment_bachdeg_c | Pop Age 25+: Bachelor's Degree |
| educationalattainment_graddeg_c | Pop Age 25+: Grad/Professional Degree |
| educationalattainment_educbasec | Educational Attainment Base |
| sports_mp33003a_b_i | Participated in baseball in last 12 months: Index |
| sports_mp33004a_b_i | Participated in basketball in last 12 months: Index |
| sports_mp33005a_b_i | Participated in bicycling (mountain) in last 12 mo: Index |
| sports_mp33012a_b_i | Participated in football in last 12 months: Index |
| sports_mp33014a_b_i | Participated in golf in last 12 months: Index |
| sports_mp33015a_b_i | Participated in hiking in last 12 months: Index |
| sports_mp33016a_b_i | Participated in horseback riding in last 12 months: Index |
| sports_mp33020a_b_i | Participated in jogging/running in last 12 months: Index |
| sports_mp33024a_b_i | Participated in soccer in last 12 months: Index |
| sports_mp33025a_b_i | Participated in softball in last 12 months: Index |
| sports_mp33026a_b_i | Participated in swimming in last 12 months: Index |
| sports_mp33028a_b_i | Participated in tennis in last 12 months: Index |
| sports_mp33029a_b_i | Participated in volleyball in last 12 months: Index |
| sports_mp33030a_b_i | Participated in walking for exercise in last 12 mo: Index |
| F5yearincrements_pop0_cy | Population Age 0-4 |
| F5yearincrements_pop5_cy | Population Age 5-9 |
| F5yearincrements_pop10_cy | Population Age 10-14 |
| F5yearincrements_pop15_cy | Population Age 15-19 |
| F5yearincrements_pop20_cy | Population Age 20-24 |
| F5yearincrements_pop25_cy | Population Age 25-29 |
| F5yearincrements_pop30_cy | Population Age 30-34 |
| F5yearincrements_pop35_cy | Population Age 35-39 |
| F5yearincrements_pop40_cy | Population Age 40-44 |
| F5yearincrements_pop45_cy | Population Age 45-49 |
| F5yearincrements_pop50_cy | Population Age 50-54 |
| F5yearincrements_pop55_cy | Population Age 55-59 |
| F5yearincrements_pop60_cy | Population Age 60-64 |
| F5yearincrements_pop65_cy | Population Age 65-69 |
| F5yearincrements_pop70_cy | Population Age 70-74 |
| F5yearincrements_pop75_cy | Population Age 75-79 |
| F5yearincrements_pop80_cy | Population Age 80-84 |
| F5yearincrements_pop85_cy | Population Age 85+ |
| F5yearincrements_pop18up_cy | Population Age 18+ |
| F1yearincrements_age18_cy | Population Age 18 |
| F1yearincrements_age19_cy | Population Age 19 |
| MEAN_Asthma | MEAN Asthma |
| MEAN_Low_Birth_Weight | MEAN Low_Birth_Weight |
| MEAN_Cardiovascular | MEAN Cardiovascular |
| raceandhispanicorigin_hisppop_c | Hispanic Population |
| raceandhispanicorigin_nonhisp_c | Non-Hispanic Population |
| raceandhispanicorigin_nhspwht_c | Non-Hispanic White Pop |
| raceandhispanicorigin_nhspblk_c | Non-Hispanic Black Pop |
| raceandhispanicorigin_nhspai_cy | Non-Hispanic American Indian Pop |
| raceandhispanicorigin_nhspasn_c | Non-Hispanic Asian Pop |
| raceandhispanicorigin_nhsppi_cy | Non-Hispanic Pacific Islander Pop |
| raceandhispanicorigin_nhspoth_c | Non-Hispanic Other Race Pop |
| raceandhispanicorigin_nhspmlt_c | Non-Hispanic Multiple Race Pop |
| Age0_17Pct | Age 0-17 Pct |
| Age18_34Pct | Age 18-34 Pct |
| Age35_54Pct | Age 35-54 Pct |
| Age55_69Pct | Age 55-69 Pct |
| Age70upPct | Age 70+ Pct |
| HispanicPct | Hispanic Pct |
| WhitePct | White Pct |
| Black_Pct | Black Pct |
| Asian_Pct | Asian Pct |
| Am_Indian | American Indian Pct |
| Pac_Island | Pacific Islander Pct |
| Other_Race | Other Race Pct |
| Multi_Race | Multiple Race Pct |
| No_HS | No High School Diploma Pct |
| HS_Grad | High School Graduate Pct |
| Some_College | Some College Pct |
| College | College Degree Pct |
| unemprt_cy | Unemployment Rate |

### Household Median Income

Let's look at the Household Median Income. We can use `zcol` to choose which column view to in the map. The field 'householdincome_medhinc_cy' refers to Household Median Income.

```{r, map_of_median_income}
#| eval: false
mapview(la_county_pna, 
        zcol='householdincome_medhinc_cy')
```

![](images/mapview/other-datasets/map_of_median_income.png){fig-alt="interactive map of Household Median Income"}

There are two issues with the previous map.

1.  The name of the layer is too long. We can rename the layer using `layer.name ='New Name'`

2.  When you click on region, the popup shows too many fields. To select the columns displayed in popups, we can set the columns using `dataframe[c('col_1', 'col_2')]`.

`layer.name ='Avg income'` sets the layer name to 'Avg income'.

`la_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')]` sets the columns show in the popup to householdincome_medhinc_cy and STUD_AR_NM

```{r, fix_map}
#| eval: false
mapview(la_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')], 
        zcol='householdincome_medhinc_cy',
        layer.name ='Avg income') 
```

![](images/mapview/other-datasets/fix_map.png){fig-alt="interactive map of Household Median Income with fixed layer name and popups"}

Add iNaturalist data to the map.

```{r, map_of_median_income_and_inat}
#| eval: false
mapview(la_county_pna[c('STUD_AR_NM', 'householdincome_medhinc_cy')],
        zcol='householdincome_medhinc_cy',
        layer.name ='Avg income')  +
  mapview(oak_obs)

```

![](images/mapview/other-datasets/map_of_median_income_and_inat.png){fig-alt="interactive map of Household Median Income and iNaturalist observations"}

:::: exercise
## Exercise 1

Create a map using one of the columns from Park Needs Assessment.

-   use `z_col` to pick a column from Park Needs Assessment
-   set which fields are shown in the popup
-   Set the layer name

::: answer
```{r, exercise_create_map}
#| eval: false
 
mapview(la_county_pna[c('PCT_Walk')], 
        zcol='PCT_Walk',
        layer.name ='Walkable percent') +
  mapview(oak_obs)
```
:::
::::

## Extracting objects from an existing file

Sometimes we find a geospatial file that has more than we need. We only want some data in the file.

California State Parks has file that lists all the state parks in California. https://www.parks.ca.gov/?page_id=29682

California state has a file that lists all the counties in California. https://gis.data.ca.gov/datasets/California::california-county-boundaries-and-identifiers/explore

Let's get the California state park within Los Angeles county.

First we read the file with all state parks in California.

```{r, get_state_parks}
state_parks <- read_sf('data/raw/Park_Boundaries/ParkBoundaries.shp')
```

```{r state_parks_map}
#| eval: false
mapview(state_parks)
```

![](images/mapview/other-datasets/view_state_parks.png){fig-alt="map of California state parks"}

The we read the file with all the counties in California.

```{r, get_ca_counties}
ca_counties <- read_sf('data/raw/California_County_Boundaries_and_Identifiers_Blue_Version_view_2716745428963682036/California_County_Boundaries_and_Identifiers.shp')


```

```{r ca_counties_map}
#| eval: false

mapview(ca_counties)

```

![](images/mapview/other-datasets/view_ca_counties.png){fig-alt="map of California counties"}

Compare CRS for the state parks map and the county map.

```{r, compare_crs}
st_crs(state_parks) == st_crs(ca_counties)

```

Use `st_transform()` to change the CRS of counties map to match the parks map.

```{r, change_counties_crs}

ca_counties <- st_transform(ca_counties, crs = st_crs(state_parks))

st_crs(state_parks) == st_crs(ca_counties)
```

Let's use `filter()` to get Los Angeles County from the counties data.

```{r, extract_la_county}
LA_county <-  ca_counties %>%
   filter(COUNTY == 'Los Angeles County')

```

```{r LA_county_map}
#| eval: false

mapview(LA_county)
```

![](images/mapview/other-datasets/extract_la_county.png){fig-alt="map of LA County"}

Use `st_intersects()` to find the state parks within LA county. This is similar to how we got all the observations in Expo park in an earlier lesson.

```{r, get_parks_inside_la_county}

LA_parks <- state_parks[st_intersects(state_parks, LA_county ) %>% lengths > 0,]
```

Create a map showing LA County and state parks within LA County.

```{r, parks_inside_la_county_map}
#| eval: false

mapview(LA_county) + 
  mapview(LA_parks, col.regions ='red')

```

![](images/mapview/other-datasets/get_parks_inside_la_county.png){fig-alt="map of state  parks inside LA County"}

Use `st_write()` to save the state parks within LA County as a Shape file. The first argument is the map data we want to save, and the second argument is the file path.

```{r, save_file}
#| eval: false

st_write(LA_parks, 'data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp')
```

## Parks

Let's compare iNaturalist data with the location of state, conty, and city parks.

California State Parks: https://www.parks.ca.gov/?page_id=29682

County of Los Angeles parks: https://geohub.lacity.org/datasets/lacounty::dpr-park-facilities-view-accessible-parks/explore

City of Los Angeles parks:  https://geohub.lacity.org/datasets/lahub::los-angeles-recreation-and-parks-boundaries/about

Load all the parks data.

```{r, get_parks_data}
parks_state <- read_sf('data/cleaned/state_parks_los_angeles_county/state_parks_los_angeles_county.shp')

parks_county <- read_sf('data/raw/DPR_Park_Facilities_View_(Accessible_Parks)/DPR_Park_Facilities_View_(Accessible_Parks).shp')

parks_city <- read_sf('data/raw/Los_Angeles_Recreation_and_Parks_Boundaries/Los_Angeles_Recreation_and_Parks_Boundaries.shp')
```

Let's get the size of the dataframe, and compare CRS to the iNaturalist data.

```{r, county_parks_dataframe_info}
dim(parks_county)
st_crs(parks_county) == st_crs(oak_obs)
```

```{r, city_parks_dataframe_info}
dim(parks_city)
st_crs(parks_city) == st_crs(oak_obs)
```

```{r, city_parks_dataframe_info_2}
dim(parks_state)
st_crs(parks_state) == st_crs(oak_obs)
```

We want to convert the CRS of the parks data to match the CRS of the iNaturalist data.

```{r, update_county_crs}
parks_county <- st_transform(parks_county, crs = 4326)

st_crs(parks_county) == st_crs(oak_obs)
```

```{r, update_city_crs}
parks_city <- st_transform(parks_city, crs = 4326)

st_crs(parks_city) == st_crs(oak_obs)
```

```{r, update_city_crs_2}
parks_state <- st_transform(parks_state, crs = 4326)

st_crs(parks_state) == st_crs(oak_obs)
```

Create map with parks and iNaturalist data. Use `col.region` to set the color of the parks.

```{r, map_of_parks_with_inat}
#| eval: false
mapview(parks_county, col.region='red') + 
  mapview(parks_city, col.region='yellow') +
  mapview(parks_state, col.region='green') +
  mapview(oak_obs)
```

![](images/mapview/other-datasets/map_of_parks_with_inat.png){fig-alt="interactive map of city, county, and state parks and iNaturalist observations"}

## Environmental Justice

The Green Zones Program’s environmental justice screening method (EJSM) was used to identify stationary sources of pollution and analyze cumulative environmental impacts, based on experts’ recommendations and the information gathered from groundtruthing activities. This tool serves as a public resource and provides a foundation for environmental justice policies.

Environmental Justice Screening Method (EJSM) as developed by USC / Occidental College. This was initiated by the proposed Green Zones Program at the Department of Regional Planning.

The Environmental Justice Screening Method (EJSM) was developed for Los Angeles County by staff at USC PERE / Occidental College who are experts in the field of Environmental Justice, who were also instrumental in helping develop CalEnviroScreen (an industry standard Environmental Justice analysis for the State of CA).  This web map shows the scores throughout LA County at the Census Tract level based on hazard proximity to sensitive uses, health risk and exposure, social and health vulnerability, and climate change vulnerability.  The overall scores illustrate cumulative pollution impacts that are disproportionately borne by people residing in each census tract.  An additional analysis was done by the Department of Regional Planning to include 'Auto Dismantling / Metal Recycling' facilities in the final scoring.

<https://egis-lacounty.hub.arcgis.com/datasets/lacounty::ejsm-scores/about>

City and Unincorporated Community Boundary (LA County Planning)

<https://egis-lacounty.hub.arcgis.com/datasets/lacounty::city-and-unincorporated-community-boundary-la-county-planning/about>
