---
title: "Example Analysis"
format: html
---

```{r}
#| include: false
classroom_organization <- 'data-explorers-feb-2025'
classroom_repos <- paste0('https://github.com/orgs/', classroom_organization, '/repositories')
```

This lesson shows how to I used some of the code samples in the previous lessons to create an analysis that has maps and charts.

Goal: I want all research grade observations for Great Blue Heron. I want compare observations near bodies of water and observations not near bodies of water.

## Restart Codespace

First step is to start Codespace.

1.  Go to [`{r} classroom_organization`](`{r} classroom_repos`) Github page, and you should see your repository. Click on your repository.

2.  Scroll to the bottom of the page, and click the "Open in GitHub Codespaces" button. This will restart the Codespace created in the "Setup Github Classroom and Codespaces" section.

    ![](images/setup/repo-open-codespace.png)

3.  This is Visual Studio Code, the default code editor for GitHub Codespaces. We want to use RStudio as our code editor.

    ![](images/setup/building-codespace.png)

4.  Once the Codespace has started, it will run a script for timer, and start RStudio. In the lower right, there should be a "bash", "Codespaces: timer", and "Codespaces: rstudio-start".

    Click on the "PORTS" tab at the bottom.

    ![](images/setup/finish-building.png)

5.  In the PORTS tab, hover over the item named RStudio or 8787. Click on the middle globe icon to start RStudio in a new browser tab.

![](images/setup/rstudio-port.png)

6.  Now you are ready to write and run R code using RStudio.

    Even though we won't use Visual Studio Code to write R code, keep the tab for Visual Studio Code open.

    ![](images/setup/rstudio.png)

## Creating script

I create a file called 'heron-analysis.R', and save it in the 'scripts' folder.

First step is load the R packages.

```{r load_packages}
#| message: false
library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(lubridate) # manipulate dates
library(here) # file paths
library(stringr) # work with string

library(ggplot2) # create data visualizations
library(sf) # handle vector geospatial data
library(mapview) # create interactive maps

source(here('scripts/data_utils.R'))
```

## Select City Nature Challenge observations

There CNC 191K observations for LA County. I need to select the observations that I want.

First I need to import the City Nature Challenge iNaturalist observations.

```{r read_inat_file}
inat_data <- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))

```

I use `names()` to see the list of column names.

```{r}
names(inat_data)
```

I use the `filter()` to select which observations I want.

I search iNaturalist for 'great blue heron', and go to its [taxa page](https://www.inaturalist.org/taxa/4956-Ardea-herodias) since I want to use the scientific names in my `filter()` query. The kingom is 'Animalia' and the species is 'Ardea herodias'.

Now that I have the scientific names, I can write my `filter()` query. I use `dim()` to display the number rows and columns.

```{r}
heron_obs <- inat_data %>%
  filter(taxon_kingdom_name == 'Animalia' &
         taxon_species_name == 'Ardea herodias')

dim(heron_obs)
```

There are 274 Great Blue Heron observations.

I also want to see how many observations are research grade. If there are a lot of "casual" or "need_id" observations, then I might also include them in my analysis.

I use `table()` to get the number of observations for each `quality_grade` value.

```{r}
table(heron_obs$quality_grade)
```

Since there are a lot of 'research' grade observations, I'm fine with limiting the observations to 'research' grade.

Since I want to look for observations in a certain area, I want to exclude observations that have obscured location. I use `table()` to get number of observations that have obscured locations.

```{r}
table(heron_obs$coordinates_obscured)
```

I need to update my query.

```{r}
heron_obs <- inat_data %>%
  filter(taxon_kingdom_name == 'Animalia',
         taxon_species_name == 'Ardea herodias') %>%
  filter(quality_grade == 'research') %>%
  filter(coordinates_obscured == FALSE) 


dim(heron_obs)
```

We have 266 research observations for Great Blue Heron with unobscured locations.

We can use unique to double check the `filter()` queries give us the results we expect.

```{r}
unique(heron_obs$taxon_kingdom_name)
unique(heron_obs$taxon_species_name)
unique(heron_obs$quality_grade)
unique(heron_obs$coordinates_obscured)
```

Save the iNaturalist observations as a csv.

```{r}
#| eval: false
write_csv(heron_obs, here('results/heron_observations.csv'), na='')
```

## Create a map with CNC observations

Now that I have the observations I want, I can plot them on a map.

Since I want to create a map, I need to use `st_as_sf()` to convert the dataframe into a sf object with a `geometry` column.

```{r}
heron_obs_sf <- heron_obs %>% 
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326)
```

Now I can use `mapview()` to create an interactive map. Being able to zoom in and out makes it easier to explore the data.

```{r}
#| eval: false
mapview(heron_obs_sf)
```

![](images/mapview/example-analysis/heron_obs_map.png)

When I click on a blue circle on the map, the pop table shows all 37 columns, which is too much information. I can use `select()` to limit the number of columns.

```{r}
heron_map <- heron_obs_sf %>%
  select(user_login, observed_on, common_name, taxon_species_name, image_url)

```

Now when I click on each blue circle, the popup shows 6 fields.

```{r}
#| eval: false
mapview(heron_map)
```

![](images/mapview/example-analysis/heron_obs_map.png)

## Add bodies of water to the map

I want to study heron observations near water. First I need to load the file with the water areas.

```{r}
water_areas <- read_sf(here('data/cleaned/la_county_waterareas.geojson'))
```

Then I use `st_crs()` to check the if the CRS of the heron observations is the same as the CRS of the water areas.

```{r}
st_crs(water_areas) == st_crs(heron_obs_sf)
```

Since the CRS are different, I need to change CRS for the water areas using `st_transform()`

```{r}
water_areas <- st_transform(water_areas,  crs = st_crs(heron_obs_sf))

st_crs(water_areas) == st_crs(heron_obs_sf)
```

Now I can add the water areas to the map. I set the color for the iNaturalist observations to green to make them easier to see.

```{r}
#| eval: false
mapview(heron_map, col.regions='green') +
  mapview(water_areas)
```

![](images/mapview/example-analysis/heron_water_map.png)

## Observations near bodies of water

I want to get observations within 1/2 mile of a body of water. This means I need to create a buffer 1/2 mile for all bodies of water.

### create buffer

We used CRS 4326 for the iNaturalist observations. 4326 uses angle degrees to measure distance. To create a buffer for a certain distance, I need to change the CRS to a CRS that uses meters. CRS 5070 uses meters.

```{r}
water_areas_5070 <- st_transform(water_areas, crs=5070)
```

Then I use `st_buffer()` to create a buffer. 1/2 miles is about 805 meters.

```{r}
buffer_water_areas_5070 <- st_buffer(water_areas_5070, 805)
```

After creating the buffer, I need to change the CRS back to 4326.

```{r}
buffer_water_areas <- st_transform(buffer_water_areas_5070, crs=st_crs(heron_obs_sf))
```

Then I can create a map with the buffers.

```{r}
#| eval: false
mapview(heron_obs_sf, col.regions='green') +
  mapview(buffer_water_areas)
```

![](images/mapview/example-analysis/heron_water_buffer_map.png)

Looking at the map, I notice that most ‘Great Blue Heron’ observations are near bodies of water. I also notice that some of the smaller bodies of water aren’t included in ‘water_areas’.

### observations near water, version 1

I can use `lengths(st_intersects()) >0` to select the observations within a geographic area.

The following code returns TRUE if an observation is within the water buffer, and returns FALSE if it outside the buffer.

```{r}
lengths(st_intersects(heron_obs_sf, buffer_water_areas)) > 0
```

Then I use the TRUE/FALSE vector to select observations in a dataframe using `dataframe[lengths(st_intersects()) >0, ]`.

```{r}
heron_near_water_sf <- heron_obs_sf[lengths(st_intersects(heron_obs_sf, buffer_water_areas)) > 0, ]

dim(heron_near_water_sf)
```

I have 240 observations near water.

Then I can create a map with the buffers.

```{r}
#| eval: false
mapview(heron_near_water_sf, col.regions='green') +
  mapview(buffer_water_areas)

```

![](images/mapview/example-analysis/heron_near_water_buffer_map.png)

I can save the map as an image. First I assign the assign code for map to an object called `heron_map`.

```{r}
#| eval: false
heron_map <- mapview(heron_near_water_sf, col.regions='green') +
  mapview(buffer_water_areas)
```

Then I use `mapshot2()` to save `heron_map` in the results folder as .png image

```{r}
#| eval: false
mapshot2(heron_map, file = here('results/heron_near_water_draft.png'))
```

### observations near water, version 2

While the previous code let me get the observations that were near water, I wasn't able to capture the observations not near water. I can adjust the code to add a column with TRUE/FALSE values to `heron_obs_sf` so I can keep track of which observations are near a body of water.

`lengths(st_intersects()) >0` produce a vector with TRUE/FALSE values. I can use `mutate()` to add a `near_water` column that stores the TRUE/FALSE values.

```{r}
heron_near_water_sf <- heron_obs_sf %>%
  mutate(near_water = lengths(st_intersects(heron_obs_sf, buffer_water_areas)) > 0)
```

I can use `table()` to get a count of the observations near water.

```{r}
table(heron_near_water_sf$near_water)
```

240 observations are near water, 26 are not near water.

Next I save the iNaturalist observations as a csv.

```{r}
#| eval: false
write_csv(heron_near_water_sf, here('results/heron_near_water.csv'), na='')
```

## Create chart

I want to create a bar chart that shows the heron observations near water. I use the column `near_water` for the x axis.

```{r}
ggplot()+
  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water))
```

Next I want to update the appearance of the chart. I use `labs()` to add titles, subtitle, and axis labels. I use `theme_bw()` and `theme()` to change overall appearance of the chart.

I assign the code for the chart to `heron_chart` object.

```{r}
heron_chart <- ggplot()+
  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water)) +
  labs(title = 'CNC observations for Great Blue Herons in LA County',
       subtitle='2016-2024',
       x='Within 1/2 mile of water',
       y='observations count')  +
  theme_bw() +
  theme(title = element_text(size = 14), 
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

heron_chart
```

I save `heron_chart` as a jpg in the rsults folder using `ggsave()`.

```{r}
#| eval: false
ggsave(filename = here('results/heron_observations_near_water_chart.jpg'), 
       plot = heron_chart, height = 6, width = 8)
```

## Create map

I want to create a nice looking map for my presentation. I want to add LA County and titles to the map. ggplot offers more ways to customize the look of the map than mapview, so I use ggplot to create a map.

One thing I want to add to the map is LA County boundary. I load the LA County file.

```{r}
LA_county <- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))

```

I create a map with LA County boundaries, water areas, and heron observations. I color code the observations based on if they are near water using `mapping=aes(color=near_water)`.

```{r}
ggplot() +
  geom_sf(data=LA_county, fill='white') +
  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +
  geom_sf(data=water_areas, fill='#007399')

```

I use `labs()` to add titles, subtitle, legend title. I use `theme_void()` and `theme()` to change overall appearance of the map.

I assign the code for the chart to `heron_map` object.

```{r}
heron_map <- ggplot() +
  geom_sf(data=LA_county, fill='white') +
  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +
  geom_sf(data=water_areas, fill='#007399') +
    labs(title = 'CNC observations for Great Blue Herons in LA County',
       subtitle='2016-2024',
       color='Within 1/2 mile of water') +
  theme_void() +
  theme(title = element_text(size = 13))

heron_map
```

I use `ggsave()` to save maps created with ggplot.

```{r}
#| eval: false
ggsave(filename = here('results/heron_observations_near_water_map.jpg'), 
       plot = heron_map, height = 6, width = 8)
```

## Download iNaturalist images

I want include some images of heron in my presentation. I want to download three images for the selected observations.

I use `filter()` to select observations that have 'CC0', 'CC-BY', or 'CC-BY-NC' license. I use `slice_sample()` to get 3 random observations. Then I use `download_inaturalist_images()` to download images.

```{r download_images}
#| eval: false

heron_images <- heron_near_water_sf %>%
  filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC')) %>%
  slice_sample(n=3)

download_inaturalist_images(heron_images)
```

## Download files from Codespace

I saved CSVs and images to Codespace. I then need to download the files to my computer.

Use the RStudio "Files" tab in the lower right corner. Click on the folders and green up arrow to navigate through the directories. Click the checkbox to select the files you want.

![](images/export-files/export-1.png)

Click "More" and a popup window will appear. Click "Export..."

![](images/export-files/export-2.png)

Click "Download" button on the popup window. The files will be saved to folder that your browser uses for the downloads.

![](images/export-files/export-3.png)

## Stop Codespace

After I finish my work for the day, I need to stop R, push my code changes to my repository and, stop Codespace.

To stop R, click the orange circle in the upper right of RStudio.

![](images/setup/stop_R.png)

I will see a message "R Session Ended". Close the browser tab for RStudio.

![](images/setup/r_session_ended.png)

Go to the Visual Studio Code browser tab. Click "bash". Click "TERMINAL".

![](images/setup/bash.png)

To save the changed files to my repository, type "bash scripts/save_files.sh" after the \$, and hit return/enter.

![](images/setup/bash_save_files.png)

To stop Codespace, click the blue area in the lower left corner of Visual Studio Code.

![](images/setup/stop_codespace_button.png)

A popup window will appear. Click "Stop Current Codespace".

![](images/setup/stop_codespace.png)

After a little while, I will see a "Codespace is stopped" message. I can now close the browser tab.

![](images/codespace-stop/Codespace-stopped.png){width="425"}

## Complete script

Here is all the code for the analysis. Some of the code is for checking results, such as `name()`, `dim()`, and `table()`. Some of the code such as 'observations near water, version 1' are things that I tried but end up not using because I tried something else.

```{r}
#| eval: false

## =================
## load_packages
## =================

library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(lubridate) # manipulate dates
library(here) # file paths
library(stringr) # work with string

library(ggplot2) # create data visualizations
library(sf) # handle vector geospatial data
library(mapview) # create interactive maps

source(here('scripts/data_utils.R'))

## =================
## Select City Nature Challenge observations
## =================

inat_data <- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))

names(inat_data)

heron_obs <- inat_data %>%
  filter(taxon_kingdom_name == 'Animalia' &
         taxon_species_name == 'Ardea herodias')

dim(heron_obs)

table(heron_obs$quality_grade)

table(heron_obs$coordinates_obscured)

heron_obs <- inat_data %>%
  filter(taxon_kingdom_name == 'Animalia',
         taxon_species_name == 'Ardea herodias') %>%
  filter(quality_grade == 'research') %>%
  filter(coordinates_obscured == FALSE)

dim(heron_obs)

unique(heron_obs$taxon_kingdom_name)
unique(heron_obs$taxon_species_name)
unique(heron_obs$quality_grade)
unique(heron_obs$coordinates_obscured)

write_csv(heron_obs, here('results/heron_observations.csv'), na='')

## =================
## Create a map with CNC observations
## =================

heron_obs_sf <- heron_obs %>%
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326)

mapview(heron_obs_sf)

heron_map <- heron_obs_sf %>%
  select(user_login, observed_on, common_name, taxon_species_name, image_url)

mapview(heron_map)

## =================
## Add bodies of water to the map
## =================

water_areas <- read_sf(here('data/cleaned/la_county_waterareas.geojson'))

st_crs(water_areas) == st_crs(heron_obs_sf)

water_areas <- st_transform(water_areas,  crs = st_crs(heron_obs_sf))

st_crs(water_areas) == st_crs(heron_obs_sf)

mapview(heron_map, col.regions='green') +
  mapview(water_areas)

## =================
## Observations near bodies of water
## =================

## create buffer

water_areas_5070 <- st_transform(water_areas, crs=5070)

buffer_water_areas_5070 <- st_buffer(water_areas_5070, 805)

buffer_water_areas <- st_transform(buffer_water_areas_5070, crs=st_crs(heron_obs_sf))

mapview(heron_obs_sf, col.regions='green') +
  mapview(buffer_water_areas)

## observations near water, version 1

lengths(st_intersects(heron_obs_sf, buffer_water_areas)) > 0

heron_near_water_sf <- heron_obs_sf[lengths(st_intersects(heron_obs_sf, buffer_water_areas)) > 0, ]

dim(heron_near_water_sf)

mapview(heron_near_water_sf, col.regions='green') +
  mapview(buffer_water_areas)

heron_map <- mapview(heron_near_water_sf, col.regions='green') +
  mapview(buffer_water_areas)

mapshot2(heron_map, file = here('results/heron_near_water_draft.png'))

## observations near water, version 2

heron_near_water_sf <- heron_obs_sf %>%
  mutate(near_water = lengths(st_intersects(heron_obs_sf, buffer_water_areas)) > 0)

table(heron_near_water_sf$near_water)

write_csv(heron_near_water_sf, here('results/heron_near_water.csv'), na='')


## =================
## Create chart
## =================

ggplot()+
  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water))

heron_chart <- ggplot()+
  geom_bar(data=heron_near_water_sf, mapping=aes(x=near_water)) +
  labs(title = 'CNC observations for Great Blue Herons in LA County',
       subtitle='2016-2024',
       x='Within 1/2 mile of water',
       y='observations count')  +
  theme_bw() +
  theme(title = element_text(size = 14),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

heron_chart

ggsave(filename = here('results/heron_observations_near_water_chart.jpg'),
       plot = heron_chart, height = 6, width = 8)

## =================
## Create map
## =================

LA_county <- read_sf(here('data/cleaned/los_angeles_county/los_angeles_county.shp'))

ggplot() +
  geom_sf(data=LA_county, fill='white') +
  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +
  geom_sf(data=water_areas, fill='#007399')

heron_map <- ggplot() +
  geom_sf(data=LA_county, fill='white') +
  geom_sf(data=heron_near_water_sf, mapping=aes(color=near_water)) +
  geom_sf(data=water_areas, fill='#007399') +
    labs(title = 'CNC observations for Great Blue Herons in LA County',
       subtitle='2016-2024',
       color='Within 1/2 mile of water') +
  theme_void() +
  theme(title = element_text(size = 13))

heron_map

ggsave(filename = here('results/heron_observations_near_water_map.jpg'),
       plot = heron_map, height = 6, width = 8)

## =================
## Download iNaturalist images
## =================

heron_images <- heron_near_water_sf %>%
  filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC')) %>%
  slice_sample(n=3)

download_inaturalist_images(heron_images)

```
