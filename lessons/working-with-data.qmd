---
title: "Working with data"
include-in-header: "components/add-answer-button.html"
time: 25 min to Ex 1. 10 min Ex 1. 15 min to ex 2. 10 min ex 2. 5 min to ex 3. 10 min ex 3. 10 min to ex 4. 10 min for ex 4. 15 min to ex 5. 10 min ex 5. 2 hours.
---

::: summary
## Questions

-   How do you work with iNaturalist CSV data in R?

## Objectives

-   Import CSV data into R.
-   Select rows and columns of data.frames.
-   Use pipes to link steps together into pipelines.
-   Create new data.frame columns using existing columns.
-   Export data to a CSV file.
:::

## Exploring iNaturalist data

A CSV of iNaturalist observations for City Nature Challenge Los Angeles from 2015 to 2024 is located at "data/cleaned/cnc-los-angeles-observations.csv". We are going to read that CSV using R.

### Functions

Functions are predefined bits of code that do a specific task. Arguments are values that we pass into a function. Function usually takes one or more arguments as input, does something to the values, and produces the ouput.

### R packages

R itself has many built-in functions, but we can access many more by installing and loading other **packages** of functions and data into R. We will use several R packages for the workshop.

To install these packages, use `install.packages()` function from R. We pass in the package names as arguments. The name of the packages must be in quotes.

```         
install.packages("readr")
```

R will connect to the internet and download packages from servers that have R packages. R will then install the packages on your computer. The console window will show you the progress of the installation process.

To save time, we have already installed all the packages we need for the workshop.

In order to use a package, use `library()` function from R to load the package. We pass in the name of the package as an argument. Do not use quotes around the package name when using `library()`.

```         
library(readr)
```

### Reading a CSV file

In order to analyze the iNaturalist csv, we need to load **readr**, **lubridate,** **dplyr**, and **here** packages.

Generally it is a good idea to list all the libraries that you will use in the script at the beginning of the script. You want to install a package to your computer once, and then load it with `library()` in each script where you need to use it.

```{r, loading_packages}
#| message: false

library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(lubridate) # manipulate dates
library(here) # file paths
library(stringr) # work with string
```

::: callout-note
#### File paths

When we reference other files from an R script, we need to give R precise instructions on where those files are. We do that using something called a file path.

There are two kinds of paths: absolute and relative. Absolute paths are specific to a particular computer, whereas relative paths are relative to a certain folder. Because we are using RStudio "project" feature, all of our paths is relative to the project folder. For instance an absolute path is "/Users/username/Documents/CNC-coding-workshop/data/cleaned/cnc-los-angeles-observations.csv", and relative path is "data/cleaned/cnc-los-angeles-observations.csv".

**here** is an R package that makes it easier to handle file paths.
:::

We call `read_csv()` function from **readr**, and pass in a relative path to a CSV file in order to load the CSV.

`read_csv()` will read the file and return the content of the file as data.frame. data.frame is how R handles data with rows and columns. In order for us access the content later on, we will assign the content to an object called `inat_data`.

```{r, assign_read_csv_to_object}
#| message: false
inat_data <- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))
```

We can use the `glimpse()` function from **dplyr** get a summary about the contents of `inat_data`. It shows the number of rows and columns. For each column, it shows the name, data type (dbl, chr, lgl, date), and the first few values.

```{r, call_glimpse}
glimpse(inat_data)
```

We can view the first six rows with the `head()` function, and the last six rows with the `tail()` function:

```{r head}
head(inat_data)
```

```{r tail}
tail(inat_data)
```

You can use `View()` function from **R** to open an interactive viewer, which behaves like a simplified version of a spreadsheet program. If you hover over the tab for the interactive `View()`, you can click the “x” that appears, which will close the tab.

```{r view_dataframe}
#| eval: false
View(inat_data)
```

You can use `names()` from **R** to see the fields in the data frame.

```{r use_names_to_list_fields}
names(inat_data)
```

We can use `dim()` dimension function from **R** to get the dimension of a data frame. It returns the number of rows and number of columns.

```{r use_dim_to_get_size}
dim(inat_data)
```

`inat_data` has over 193K rows and 37 columns.

## More about functions

To learn more about a function, you can type a `?` in front of the name of the function, which will bring up the official documentation for that function:

```{r function_help_documentation}
?head
```

Function documentation is written by the authors of the functions, so they can vary pretty widely in their style and readability. The first section, **Description**, gives you a concise description of what the function does, but it may not always be enough. The **Arguments** section defines all the arguments for the function and is usually worth reading thoroughly. Finally, the **Examples** section at the end will often have some helpful examples that you can run to get a sense of what the function is doing.

The help **Arguments** section for `head()` shows four arguments. The first argument `x` is required, the rest are optional. For example, the `n` argument in `head()` specifies the number of rows to print. It defaults to 6, but we can override that by specifying a different number:

```{r named_arguments_in_order}
head(x = inat_data, n = 10)
```

If we order the argument the same order they are listed in help **Arguments** section, we don’t have to name them:

```{r arguments_in_order}
head(inat_data, 10)
```

Additionally, if we name them, we can put them in any order we want:

```{r name_arguments_out_of_order}
head(n = 10, x = inat_data)
```

## Manipulating data

One of the most important skills for working with data in R is the ability to manipulate, modify, and reshape data. The **dplyr** package provide a series of powerful functions for many common data manipulation tasks.

### select()

The `select()` function is used to select certain columns of a data frame. The first argument is the data frame, and the rest of the arguments are unquoted names of the columns you want.

Our `inat_data` data frame has 37 columns. We want four columns: `user_login`, `common_name`, `scientific_name`, `observed_on`.

```{r, select_columns}
select(inat_data, user_login, common_name, scientific_name, observed_on)
```

`select()` creates a new data frame with 193K rows, and 4 columns.

### filter()

The `filter()` function is used to select rows that match certain criteria. The first argument is the name of the data frame, and the second argument is the selection criteria.

#### select observations by common_name

Let's find all the observations for 'Western Fence Lizard', the most popular species in CNC Los Angeles. We want all the rows where `common_name` is equal to 'Western Fence Lizard'. Use `==` to test for equality.

```{r, filter_rows}
filter(inat_data, common_name == 'Western Fence Lizard')

```

`filter()` creates a new data frame with 3,339 rows, and 37 columns.

Keep in mind that species can have zero to multiple common names. If you use want to search by common name, you need to use the exact common name that iNaturalist uses.

#### select observations by scientific_name

Let's find all the observations for 'Sceloporus occidentalis', the Latin scientific name for 'Western Fence Lizard'.

```{r, filter_rows_scientific_name}
filter(inat_data, scientific_name == 'Sceloporus occidentalis')

```

We get 3,339 rows, and 37 columns, the same as `common_name == 'Western Fence Lizard'`.

We will cover how to search for species more in the ["Higher taxa"](higher-taxa.qmd) lesson.

### The pipe: %\>%

What happens if we want to select columns and filter rows?

We use the pipe operator `%>%` to call multiple functions.

::: callout-tip
You can insert `%>%` by using the keyboard shortcut <kbd>Shift+Cmd+M</kbd> (Mac) or <kbd>Shift+Ctrl+M</kbd> (Windows).
:::

#### select observations by user_login

iNaturalist has two fields for the user name: `user_login` and `user_name`. iNaturalist displays the `user_login` for each observation, and displays `user_name` on the user's profile page.

Let's get all observations for iNaturalist user 'natureinla', and we only want columns `user_login`, `common_name`, `scientific_name`, `observed_on`. Since we need both `filter()` and `select()`, we use pipe operator `%>%`.

Pipe operator take the thing on the left hand side and insert it as the first argument of the function on the right hand side.

```{r, pipe_filter_select}
inat_data %>%
  filter(user_login == 'natureinla') %>%
  select(user_login, common_name, scientific_name, observed_on)
```

It can be helpful to think of `%>%` as meaning "and then". `inat_data` is sent to `filter()` function. `filter()` selects rows with 'natureinla'. And then the output from `filter()` is sent into the `select()` function. `select()` selects 4 columns.

#### select observations by coordinates_obscured

Sometimes the coordinates for iNaturalist observations are obscured. For instance, when the observation involves an endangered species, iNaturalist will automatically obscure the coordinates in order to protect the species. Sometimes people choose to obscure their location when they are making observations so that other people will not know their exact location. iNaturalist has information about [obscured coordinates](https://help.inaturalist.org/en/support/solutions/articles/151000169938-what-is-geoprivacy-what-does-it-mean-for-an-observation-to-be-obscured-).

To access one column in a data frame, use `dataframe$column_name`.

```{r coordinates_obscured}
#| eval: false

inat_data$coordinates_obscured
```

When we pass in a data frame column to `table()` function from R, it will return the unique values in a column, and the number of rows that contain each value.

Use `table()` to get a count of how many observations have obscured locations by passing in the data frame column.

```{r, call_table}
table(inat_data$coordinates_obscured)
```

176K row are false (coordinates are normal), 14K rows are true (coordinates are obscured).

If the exact location of the observation will affect your analysis, then you want unobscured coordinates. Let's get the observations where the coordinates are not obscured.

```{r, observations_with_unobscured_coordinates}
inat_data %>%
  filter(coordinates_obscured == FALSE) %>%
  select(user_login, common_name, scientific_name, observed_on)
```

::: callout-tip
When using both `filter()` and `select()`, it is a good idea to use `filter()` before `select()`. The following code will cause an error "object 'coordinates_obscured' not found".

```{r select_filter_error}
#| eval: false

inat_data %>%
  select(user_login, common_name, scientific_name, observed_on)  %>% 
  filter(coordinates_obscured == FALSE)
```

`select()` creates a data frame with four fields. When we try to `filter()` using `coordinates_obscured`, we get an error because the 4-field data frame we pass to `filter()` does not have the field `coordinates_obscured`.
:::

#### select observations by quality_grade

iNaturalist gives a quality grade to each observation. The observations are labeled as 'needs_id', 'research', or 'casual'. iNaturalist FAQ about [quality grade](https://help.inaturalist.org/en/support/solutions/articles/151000169936-what-is-the-data-quality-assessment-and-how-do-observations-qualify-to-become-research-grade-).

To see all the unique values for a column, use `unique()` function from R and pass in the data frame column.

```{r, quality_grade_values}
unique(inat_data$quality_grade)
```

When researchers use iNaturalist data, they normally use research grade observations. Let's get the observations that are research grade.

```{r, research_grade_observations}
inat_data %>%
  filter(quality_grade == 'research')  %>%
  select(user_login, common_name, scientific_name, observed_on)
```

## Errors in code

We are writing instructions for the computer. If there is a typo, misspelling, wrong function arguments, etc, the code will not work and we will see errors. R will display the errors in red. You need to fix the errors in order for the code to work. Here are some example errors.

typo: we used `%>`, when it should be `%>%`

```{r, error_typo_pipe}
#| eval: false
inat_data %>
  select(user_login, observed_on, common_name)
```

Misspelled `user_logi`

```{r, error_misspell_field}
#| eval: false
inat_data %>%
  select(user_logi, observed_on, common_name)
```

typo: we use `=`, when it should be `==`

```{r, error_equality}
#| eval: false
inat_data %>%
  filter(user_login = 'natureinla')
```

typo: extra `)`

```{r, error_parenthesis}
#| eval: false
inat_data %>%
  select(user_login, observed_on, common_name))
```

:::: exercise
## Exercise 1

Get all your City Nature Challenge observations.

-   Use `read_csv()` to load the CNC CSV. Assign the results to `my_inat_data` object.
-   Use `filter()` to select observations with your iNaturalist username. If you don't have any CNC observations, use 'quantron' the most prolific community scientist for CNC Los Angeles.
-   Use `select()` to select 4 columns. One of the columns should be `common_name`
-   assign the results of `filter()` and `select()` to `my_obs` object
-   click on `my_obs` in the Environment tab to see the results

::: answer
```{r, exercise_your_observations}
my_inat_data <- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))

my_obs <- my_inat_data %>%
  filter(user_login == 'natureinla') %>%
  select(user_login, observed_on, common_name, scientific_name)
```
:::
::::

## Logical operators

In previous examples we used one criteria in `filter()` to select some rows. Often times we want to use multiple criteria to select some rows. Logical operators allow you to do multiple comparisons at once.

### and operator: &

If there are multiple criteria, and we want to get rows that match all of the criteria, we use and operator `&` in between the criteria.

`condtion_1 & condition_2`

#### select observations by common_name and quality_grade

Let's get all 'Western Fence Lizard' observations that are research grade. This means we want to get rows where `common_name` is 'Western Fence Lizard' and `quality_grade` is 'research'.

```{r, filter_with_common_name_and_quality_grade}
my_data <- inat_data %>%
  filter(common_name == 'Western Fence Lizard' & 
           quality_grade == 'research')  %>%
  select(user_login, common_name, scientific_name, observed_on, quality_grade)
```

```{r view_my_data}
#| eval: false
View(my_data)
```

We can check the results to make sure we wrote we got the data we want. We can use `unique()` to check the column values.

```{r, and_unique_common_name}
unique(my_data$common_name)
```

```{r, and_unique_quality_grade}
unique(my_data$quality_grade)
```

#### select observations by coordinates_obscured and positional_accuracy

Previously we looked at `coordinates_obscured`. In addition to coordinates being intentionally obscured, another thing that can affect the coordinates for an observation is the accuracy of the coordinates. The accuracy of GPS on smart phones depends on the hardware, software, physical environment, etc. The `positional_accuracy` from iNaturalist measures the coordinates error in meters. For example if an observation has a positional accuracy of 65 meters, this means the measured coordinates is within 65 meters from the actual coordinates.

When given a column in a dataframe, `summary()` displays statistics about the values. Let's use `summary()` to look at the positional accuracy of observations where the coordinates are not obscured.

```{r get_summary_of_unobscured_observations}
my_data <- inat_data %>%
  filter(coordinates_obscured == FALSE)  

 
summary(my_data$positional_accuracy)
```

Min. means the minimal value is 0.

1st Qu. means 25% of the values are less than 5, and 75% are greater than 5.

Median means 50% of the values are less than 12, 50% are greater than 12.

Mean is the sum of the values divided by number of items.

3rd Qu. means 75% of the values are less than 65, and 25% are greater than 65.

Max. means the maximum value is 13,227,987.

NA's means there are 36,601 rows without positional_accuracy.

Even though we selected unobscured locations, 25% of the observations are 65 or more meters away the actual location due to the accuracy of GPS device.

If location accuracy is important to your analysis, you can select a small number for position accuracy. Let's get observations with unobscured locations that have position accuracy less than 5 meters.

```{r filter_with_coordinates_obscured_and_positional_accuracy}
my_data <- inat_data %>%
  filter(coordinates_obscured == FALSE & 
           positional_accuracy <= 5) %>%
  select(user_login, common_name, scientific_name, positional_accuracy, coordinates_obscured)

dim(my_data)
```

We have 41K observations with position accuracy less than 5 meters.

```{r, and_unique_coordinates_obscured}
unique(my_data$coordinates_obscured)
```

```{r, and_unique_positional_accuracy}
unique(my_data$positional_accuracy)
```

### or operator: \|

If there are multiple criteria, and we want to get rows that match one or more of the criteria, we use or operator `|` or in between the criteria.

`condition_1 | condition_2`

#### select observations by multiple common_name

Let's get observations where `common_name` is 'Western Fence Lizard' or 'Western Honey Bee'.

```{r, filter_with_or_2_species}
my_data <- inat_data %>%
  filter(common_name == 'Western Honey Bee' | 
        common_name == 'Western Fence Lizard')  %>%
  select(user_login, observed_on, common_name)

dim(my_data)
```

```{r, or_common_name}
unique(my_data$common_name)
```

### & (and) versus \| (or)

**& (and)** return rows where all conditions are true. This code looks for observations where `user_login` is 'natureinla' and `common_name` is 'Western Fence Lizard'.

```{r, and_comparison}
and_data <- inat_data %>%
  filter(user_login == 'natureinla' & 
           common_name == 'Western Fence Lizard')

dim(and_data)
```

```{r, and_comparison_user_login}
unique(and_data$user_login)
```

```{r, and_comparison_common_name}
unique(and_data$common_name)
```

We get 79 rows with 1 `user_login` and 1 `common_name`

**\| (or)** returns rows where any conditions are true. This code looks for observations where `user_login` is 'natureinla' plus observations where `common_name` is 'Western Fence Lizard'

```{r, or_comparison}
or_data <- inat_data %>%
  filter(user_login == 'natureinla' | 
           common_name == 'Western Fence Lizard')

dim(or_data)
```

```{r, or_comparison_user_login}
unique(or_data$user_login) %>% length
```

```{r, or_comparison_common_name}
unique(or_data$common_name) %>% length
```

We get 6,216 rows with 1052 user_login and 1031 common_name

`&` vs `|` will return different results. Check the results of your code to make sure your results matches what you intended.

### %in% c()

Another way to get rows that match one or more of the criteria is with the in operator `%in%.`

::: callout-note
A vector is way R stores multiple values. `c()` combine function from R creates a vector with the passed in values.

```{r create_vector}
c(1, 2, 5)
```

`%in%` operator from R returns true if an item matches values in a given vector.

```{r in_vector}
1 %in% c(1, 2, 5)
3 %in% c(1, 2, 5)
```
:::

#### select observations by multiple license

iNaturalist observations, photos, and sounds are covered by licenses. The default license is **CC BY-NC** (Creative Commons: Attribution-NonCommercial) so other people can use the content if they give attribution to you and use it for non-commercial purposes. More info about [iNaturalist licenses](https://help.inaturalist.org/en/support/solutions/articles/151000175695-what-are-licenses-how-can-i-update-the-licenses-on-my-content-) and various [Creative Commons licenses](https://creativecommons.org/share-your-work/cclicenses/).

iNaturalist exports observations with No Copyright (CC0), Attribution (CC BY), and Attribution-NonCommercial (CC BY-NC) license to [Global Biodiversity Information Facility (GBIF)](https://www.gbif.org), an international organization that provides access to biodiversity information. Many researchers who use iNaturalist data get their data from GBIF. This means if iNaturalist observers want their data to be used by scientists, they need to use one of those three licenses.

We can use `table()` to see the license types and count.

```{r view_license_values}
table(inat_data$license)
```

Let's get observations with CC0, CC-BY, or CC-BY-NC license. `filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC'))` will return rows where the `license` field is in the vector ('CC0', 'CC-BY', 'CC-BY-NC')

```{r filter_by_license}
my_data <- inat_data %>%
  filter(license %in% c('CC0', 'CC-BY', 'CC-BY-NC')) %>%
  select(user_login, observed_on, common_name, license)

dim(my_data)

```

```{r unique_license}
unique(my_data$license)

```

:::: exercise
## Exercise 2

Get all your observations that are research grade

-   use `my_inat_data` from Exercise 1 to access CNC observations
-   Use `&` with `filter()` since we want to pick observations by both username and quality grade. Use 'quantron' as the user if you don't have CNC observations.
-   Use `select()` to pick 4 columns

::: answer
```{r, exercise_your_research_grade}
my_inat_data %>%
  filter(user_login == 'natureinla' & 
           quality_grade == 'research') %>%
  select(user_login, observed_on, common_name, scientific_name)
```
:::
::::

## Find items with wildcard or partial search

Previously we used `common_name == 'Western Fence Lizard'` which did an exact match for `'Western Fence Lizard'.` But a lot of the times we want to search for a phrase, not an exact match.

Let's find all species common names that have the word 'lizard'.

`unique(inat_data$common_name)` will return all common names. Use `length()` to get the number of items.

```{r get_common_names}
common_names <- unique(inat_data$common_name) 

length(common_names)
```

We have over 7000 common names.

`str_subset()` from **stringr** package will find all items that match a given pattern. The first argument is the items we are searching through. The second argument `pattern` is the pattern we are looking for.

Here we are searching through common names for any names that contain 'lizard'.

```{r get_matches_for_lizard}
str_subset(common_names, pattern = 'lizard')
```

When we use `pattern = 'lizard'`, we get zero results. The reason is that `str_subset()` is case sensitive. It is looking for lowercase 'lizard'.

To have a case insensitive match, we need to pass in `(?i)` at the beginning of the pattern. This will look find matches for 'lizard' no matter the case.

```{r get_matches_for_lizard_case_insensitive}
str_subset(common_names, pattern = '(?i)lizard')
```

All the results have 'Lizard', which explains why `pattern = 'lizard'` did not work.

Let's look for all common names with the word 'ants'.

```{r get_matches_for_ants}
str_subset(common_names, pattern = '(?i)ants')
```

The results return names with the word 'plants' because it 'ants' is part of 'pl**ants**'. If we want to only find matches for the word 'ants' , we need to use `\\b`

`\\b` before and after "ants" will look for the word "ants".

```{r get_matches_for_word_ants}
str_subset(common_names, pattern = "(?i)\\bants\\b")
```

`\\b` before 'ant' will look for the words that start with 'ant' such as 'ant', 'ants', 'anthuriums'. We use `[0:30]` to show the first 30 matches.

```{r get_matches_for_starts_with_ants}
str_subset(common_names, pattern = "(?i)\\bant")[0:30]
```

`\\b` after 'ant' will look for the words that end with 'ant' such as 'ant', 'plant', 'giant'.

```{r get_matches_for_ends_with_ants}
str_subset(common_names, pattern = "(?i)ant\\b")[0:30]
```

Now that we have a list of ant names, we can use `%in%` to look for multiple ant species.

```{r get_observations_for_ants}
ants <- c(
"Acorn Ants and Allies",
"Acrobat Ants",
"Argentine Ant",
"Big-headed Ants",
"Californicus-group Harvester Ants",
"Camponotin Ants",
"Carpenter Ants",
"Citronella Ants, Fuzzy Ants, and Allies",
"fallax-group Big-headed Ants",
"Formicine Ants",
"Furrowed Ants",
"Lasiin Ants",
"Leptomyrmecin Ants",
"Molesta-group Thief Ants",
"Myrmicine Ants",
"Pavement Ants",
"Pyramid Ants",
"Sneaking Ants",
"Sneaking Ants",
"Solenopsis Fire Ants and Thief Ants",
"Velvety Tree Ants",
"Velvety Tree Ants"
)

ants_obs <- inat_data %>%
  filter(common_name %in% ants) %>%
  select(user_login, observed_on, common_name)

dim(ants_obs)
```

## More complex queries

Sometimes we want to use both `&` `|` to select the rows. You can use multiple `filter()` statements. Multiple `filter()` is the equivalent of `&`.

#### select observations by multiple user_login and common_name

Let's get observations where user is 'cdegroof' or 'deedeeflower5', and species is 'Western Fence Lizard'.

```{r, complex_queries}
complex_query <- inat_data %>%
  filter(user_login == 'cdegroof' | 
           user_login == 'deedeeflower5') %>%
  filter(common_name == 'Western Fence Lizard')  %>%
  select(user_login, common_name, scientific_name, observed_on)

dim(complex_query)
```

```{r, complex_unique_common_name}
unique(complex_query$common_name)
```

```{r, complex_unique_user_login}
unique(complex_query$user_login)
```

::: callout-note
This query using just `|` `&` with one `filter()` does not give us what we want.

```{r incorrect_and_or}
alt_1 <- inat_data %>%
  filter(user_login == 'cdegroof' | 
           user_login == 'deedeeflower5' & 
           common_name == 'Western Fence Lizard')  %>%
  select(user_login, common_name, scientific_name, observed_on)

dim(alt_1)
```

```{r, alt_1_unique_user_login}
unique(alt_1$user_login)
```

```{r, alt_1_unique_common_name}
unique(alt_1$common_name) %>% length
```

We get 2 users but 137 common names.

In most programming languages `and` is evaluated before `or`. Our query asked for all observations by 'deedeeflower5' for 'Western Fence Lizard', and all observations by 'cdegroof'.

This query using `|` `&` `()` does give us what we want. We used parenthesis around the two `user_login`.

```{r parenthesis_and_or}
alt_2 <- inat_data %>%
  filter((user_login == 'cdegroof' | user_login == 'deedeeflower5') &
           common_name == 'Western Fence Lizard')  %>%
  select(user_login, common_name, scientific_name, observed_on)

dim(alt_2)
```

```{r, alt_2_unique_user_login}
unique(alt_2$user_login)
```

```{r, alt_2_unique_common_name}
unique(alt_2$common_name)
```

We get 2 users and 1 common name.
:::

:::: exercise
## Exercise 3

Get all your observations for two species

-   Use `my_inat_data` to access CNC observations
-   Use `unique(my_obs$common_names)` from Exercise 1 to find two species name.
-   Use `filter(), |` to pick two species
-   Use `filter()` to pick your username. Use 'quantron' as the user if you don't have CNC observations.
-   Use `select()` to pick four columns.

::: answer
```{r, exercise_unique_common_names}
unique(my_obs$common_name)[0:10]
```

```{r, exercise_two_species}
my_inat_data %>%
  filter(user_login == 'natureinla') %>%
  filter(common_name == 'Red-eared Slider' | common_name=='Monarch') %>%
  select(user_login, observed_on, common_name, scientific_name)
```
:::
::::

## Add new columns with mutate()

Another common task is creating a new column based on values in existing columns. For example, we could add a new column for year.

::: callout-tip
Vector is a list of items. We can access specific values in a vector by using `vector_name[number]`. To access a range of values use `vector_name[start_number:end_number]`

```{r create_character_vector}
letters <- c('a','b','c', 'd')
```

get first item

```{r get_first_item}
letters[1]
```

get second and third item

```{r get_2nd_3rd_item}
letters[2:3]
```
:::

Let's get `observed_on` for rows 10317 to 10320. The reason we picked these rows is because the year changes from 2016 to 2017.

```{r show_observed_on}
inat_data$observed_on[10317:10320]
```

Let's get use `year()` to get the year from `observed_on` for rows 10317 to 10320

```{r get_years_from_observed_on}
year(inat_data$observed_on)[10317:10320]
```

We can use `mutate()` from **dplyr** and `year()` from **lubridate** to add a `year` column. For `mutate()`, we pass in the name of the new column, and the value of the column.

```{r, mutate_year}
temp <- inat_data %>%
  mutate(year = year(observed_on))
```

We can also use `table()` to see the number of observations per year.

```{r, counts_per_year}
table(temp$year)
```

Use `class()` to check the data type.

```{r year_class}
class(temp$year)
```

#### select observations by year

Let's get all observations for 2020. Use `mutate()` and `year()` to add `year` column. Then use `filter()` to select rows where year is 2020.

```{r, 2020_observations}
temp <- inat_data %>%
  mutate(year = year(observed_on)) %>%
  filter(year == 2020)
```

```{r unique_years}
unique(temp$year)
```

Since `year` column contains numbers, we can do greater than or less than comparison.

Let's get observations between 2018 and 2020, (e.g. 2018 2019 2020).

```{r, 2018_2020_observations}
temp <- inat_data %>%
  mutate(year = year(observed_on)) %>%
  filter(year >= 2018 & year <= 2020)
```

```{r unique_years_multiple}
unique(temp$year)
```

:::: exercise
## Exercise 4

Get all of your observations from 2024.

-   Use `my_inat_data` to access CNC observations
-   Use `mutate()` and `year()` to add year column
-   Use `filter()` to pick observations with your username and year is 2024. Use 'quantron' as the user if you don't have CNC observations.
-   Use `select()` to pick 4 columns

::: answer
```{r, exercise_last_year}
my_inat_data %>%
   mutate(year = year(observed_on)) %>%
  filter(user_login == 'natureinla' & year == 2024) %>%
  select(user_login, observed_on, common_name, scientific_name)
```
:::
::::

## Count the number of rows with count()

We can use `count()` from **dplyr** to count the number of values for one or more columns. We pass in the column names as arguments to `count()`

#### get observations per year

Let's try counting of all observations by year. Use `mutate()` to add a year column. Use `count()` to count the number of observations for each year. By default, count will add a new column called `n`.

```{r, count_year}
inat_data %>%
  mutate(year = year(observed_on)) %>%
  count(year)
```

We can specify the name of the count column by passing in `name` argument to `count()`.

```{r, rename_count_column}
inat_data %>%
  mutate(year = year(observed_on)) %>%
  count(year, name='obs_count')
```

#### get top ten most observed species

Let's count the number of observations for each species. We will pass in both 'common_name' and 'scientific_name' to `count()` because some species don't have a common_name.

```{r, count_species}
counts <- inat_data %>%
  count(common_name, scientific_name, name='obs_count')

counts
```

It's often useful to take a look at the results in some order, like the lowest count to highest. We can use the `arrange()` function from **dplyr** for that. We pass in the columns we want to order by to `arrange()`. By default, `arrange()` will return values from lowest to highest.

```{r, order_counts}
counts <- inat_data %>%
  count(common_name, scientific_name, name='obs_count')   %>%
  arrange(obs_count)

counts
```

If we want to reverse the order, we can wrap the column names in `desc()` from **dplyr**. This will return values from highest to lowest.

```{r, desc_count}
counts <- inat_data %>%
  count(common_name, scientific_name, name='obs_count') %>%
  arrange(desc(obs_count))

counts
```

use `slice()` from **dplyr** to return only certain number of records. `slice(start:end)` will return rows from the starting number to the ending number.

Let's get the top ten species with the most observations.

```{r, top_ten}
counts <- inat_data %>%
  count(common_name, scientific_name, name='obs_count') %>%
  arrange(desc(obs_count))  %>%
  slice(1:10)

counts
```

#### Count higher taxa

Let's count the observations by kingdom.

```{r, kingdoms_count}
counts <- inat_data %>%
  count(taxon_kingdom_name, name='obs_count') %>%
  arrange(desc(obs_count)) 

counts
```

Let's count observations for phylums in the Animal kingdom. Use `filter()` to select 'Animalia' kingdom. Then count the `taxon_phylum_name`.

```{r, animal_phylums}
counts <- inat_data %>%
  filter(taxon_kingdom_name == 'Animalia') %>%
  count(taxon_phylum_name, name='obs_count') %>%
  arrange(desc(obs_count)) 

counts
```

:::: exercise
## Exercise 5

Get the number of observation you made per year

-   Use `my_inat_data` to access CNC observations
-   Use `mutate()` and `year()` to add year column
-   Use `count()` to count the number of observations per year
-   Use `filter()` to select observations with your username. Use 'quantron' as the user if you don't have CNC observations.

::: answer
```{r, exercise_observations_per_year}
my_inat_data %>%
  mutate(year = year(observed_on)) %>%
  filter(user_login == 'natureinla') %>%
  count(year, name='obs_count')
```
:::
::::

## Save data

If you want to save your results, you can save the data frames as CSVs.

For instance, a user might only want to their observations that are research grade and unobscured location.

First, assign the data frame to an object.

```{r, 3_condition_my_observation}

my_obs <- inat_data %>%
  filter(user_login == 'natureinla' & 
           quality_grade == 'research' & 
           coordinates_obscured == FALSE) 

my_obs

```

Then use `write_csv()` from **dplyr** to create a CSV.

-   The first argument is the data frame to save.
-   The second argument is the relative path of where to save the file.
-   To keep our files organized, we can save the csv in `data/cleaned` or `results`.
-   You should give the file a sensible name to help you remember what is in the file. Some people add the date to the file name to keep track of the various versions.
-   By default `NA` values will be saved as 'NA' string. `na=''` will save `NA` values as empty strings.

```{r, save_file}
#| eval: false
write_csv(my_obs, here('data/cleaned/my_observations.csv'), na='')
```

## 
