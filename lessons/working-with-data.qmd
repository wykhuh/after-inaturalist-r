---
title: "Working with iNaturalist data"
format: html
include-in-header: "components/add-answer-button.html"
---

::: summary
## Questions

-   How do you work with iNaturalist CSV data in R?

## Objectives

-   Import CSV data into R.
-   Select rows and columns of data.frames.
-   Use pipes to link steps together into pipelines.
-   Create new data.frame columns using existing columns.
-   Export data to a CSV file.
:::

## Importing iNaturalist data

A CSV of iNaturalist observations for City Nature Challenge Los Angeles from 2015 to 2024 is located at "data/cleaned/cnc-los-angeles-observations.csv". We are going to read that CSV using R.

### Reading a file

In order to analyze the iNaturalist csv, we need to load **readr**, **lubridate** and **dplyr** packages.

```{r, loading_packages}
#| message: false

library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(lubridate) # manipulate dates
```

We will use the `read_csv()` function from **readr** package to read the iNaturalist CSV. We will pass in a relative path to the CSV file as an argument for `read_csv()`.

`read_csv()` will return the content of the file. In order for us access the data later on, we need to assign the content to an object called `inat_data`. Objects are displayed in the **Environment** panel. Double click on `inat_data` in **Environment** to see all the data.

```{r, assign_read_csv_to_object}
#| warning: false
#| message: false
inat_data <- read_csv('data/cleaned/cnc-los-angeles-observations.csv')
```

::: callout-tip
Typing out paths can be error prone, so we can utilize a keyboard shortcut. Inside the parentheses of `read_csv()`, type out a pair of quotes and put your cursor between them. Then hit <kbd>Tab</kbd>. A small menu showing your folders and files should show up. You can use the <kbd>↑</kbd> and <kbd>↓</kbd> keys to move through the options, or start typing to narrow them down. You can hit <kbd>Enter</kbd> to select a file or folder, and hit <kbd>Tab</kbd> again to continue building the file path. This might take a bit of getting used to, but once you get the hang of it, it will speed up writing file paths and reduce the number of mistakes you make.
:::

To learn more about a function, you can type a `?` in front of the name of the function, which will bring up the official documentation for that function:

```{r, help_for_functions}
#| eval: false
?read_csv
```

Function documentation is written by the authors of the functions, so they can vary pretty widely in their style and readability. The first section, **Description**, gives you a concise description of what the function does, but it may not always be enough. The **Arguments** section defines all the arguments for the function and is usually worth reading thoroughly. Finally, the **Examples** section at the end will often have some helpful examples that you can run to get a sense of what the function is doing.

## The data.frame

read_csv returns a **data.frame**. A **data.frame** is the most common way that R represents tabular data (data with rows and columns).

We can view the first few rows with the `head()` function from R, and the last few rows with the `tail()` function from R:

```{r, call_head}
head(inat_data)
```

```{r, call_tail}
tail(inat_data)
```

Use `glimpse()` from **dplyr** to see a information about a data frame. Number of rows and columns. For each column, we see the name, data type (**dbl** for number, **chr** for character, **lgl** for logical (true, false), **date** for date), and the first few values.

```{r, call_glimpse}
glimpse(inat_data)
```

You can also use `names()` from R to see the fields in the data frame.

```{r use_names_to_list_fields}
names(inat_data)
```

## Manipulating data

One of the most important skills for working with data in R is the ability to manipulate, modify, and reshape data. The **dplyr** package provide a series of powerful functions for many common data manipulation tasks.

### select()

`select()` picks certain columns of a data.frame. To use the `select()` function, the first argument is the name of the data.frame, and the rest of the arguments are unquoted names of the columns you want.

We want four columns: `user_login`, `common_name`, `scientific_name`, `observed_on`. The columns are arranged in the order we specified inside `select()`.

```{r, select_columns}
select(inat_data, user_login, common_name, scientific_name, observed_on)
```

### filter()

The `filter()` function is used to select rows that meet certain criteria. To get all the rows where the value of `common_name` is equal to 'Western Fence Lizard', we would run the following:

```{r, filter_rows}
filter(inat_data, common_name == 'Western Fence Lizard')

```

There are over 3000 observations for 'Western Fence Lizard'.

The `==` sign means "is equal to". Take note, there are two equal signs.

There are several other operators we can use: \> "greater than", \>= "greater than or equal", \< "less than", \<= "less than or equal", and != "not equal to".

### The pipe: %\>%

What happens if we want to select columns and filter rows?

We use the pipe operator (`%>%`) to call multiple functions.

::: callout-tip
You can insert `%>%` by using the keyboard shortcut <kbd>Shift+Cmd+M</kbd> (Mac) or <kbd>Shift+Ctrl+M</kbd> (Windows).
:::

Get `user_login`, `common_name`, `scientific_name`, `observed_on` for all observations where `common_name` is 'Western Fence Lizard'. Use filter to select rows, then use select to select columns.

```{r, pipe_filter_select}
inat_data %>% 
  filter(common_name == 'Western Fence Lizard') %>% 
  select(user_login, common_name, scientific_name, observed_on) 
```

Pipe operator take the thing on the lefthand side and insert it as the first argument of the function on the righthand side. By putting each of our functions onto a new line, we can build a nice, readable pipeline. `inat_data` gets piped into a `filter()` function, and it comes out modified somewhat. The output from `filter()` then gets sent into the `select()` function, where it is further modified. It can also be helpful to think of `%>%` as meaning "and then".

If we want to store this final data frame as an object, we use an assignment arrow `<-`:

```{r, assign_pipeline}
western_fence_lizard_obs <- inat_data %>% 
  filter(common_name == 'Western Fence Lizard') %>% 
  select(user_login, common_name, scientific_name, observed_on) 

```

Sometimes the coordinates for iNaturalist observations are obscured. For instance, when the observation involves an endangered species, iNaturalist will automatically obscure the coordinates in order to protect the animal, plant, fungi. Sometimes peopleb choose to obscure their location when they are making observations so that other people will not know their exact location.

To access one column in a data frame, use `dataframe$column_name`. To get a count of number of values for one column, use `table()` function from R and pass in one column.

Let's find out how many observations have obscured locations.

```{r, call_table}
table(inat_data$coordinates_obscured)
```

176K coordinates are ok, 14K are obscured

Let's get the observations where the coordinates are not obscured.

```{r, observations_with_unobscured_coordinates}
inat_data %>% 
  filter(coordinates_obscured == FALSE) %>% 
  select(user_login, common_name, scientific_name, observed_on) 
```

iNaturalist gives a quality grade to each observation. When researchers use iNaturalist data, they normally use research grade observations.

To see all the unique values for a column, use `unique()` function from R and pass in the column name.

```{r, quality_grade_values}
unique(inat_data$quality_grade)
```

Let's get the observations that are research grade.

```{r, research_grade_observations}
inat_data %>% 
  filter(quality_grade == 'research')  %>% 
  select(user_login, common_name, scientific_name, observed_on)
```

## Errors in code

We are writing instructions for the computer. If there is a typo, mispelling, pass in wrong arguments into functions, etc, the code will not work and we will see errors. R will display the errors in red. You need to fix the errors in order for the code to work.

typo: we used `%>`, when it should be `%>%`

```{r, error_typo_pipe}
#| eval: false
inat_data %>
  select(user_login, observed_on, common_name)
```

Misspelled `user_logi`

```{r, error_misspell_field}
#| eval: false
inat_data %>%
  select(user_logi, observed_on, common_name) 
```

typo: we use `=`, when it should be `==`

```{r, error_equality}
#| eval: false
inat_data %>%
  filter(user_login = 'natureinla')
```

typo: extra `)`

```{r, error_parenthesis}
#| eval: false
inat_data %>%
  select(user_login, observed_on, common_name))
```

:::: exercise
## Exercise 1

Get all your City Nature Challenge observations.

-   Use `select()`, `filter()`
-   The results should have `user_login` equal to your iNaturalist username
-   The results should have `user_login`, `observed_on`, `common_name`, `scientific_name` columns
-   save the results to `my_obs`
-   click on `my_obs` in the Environment tab to see the results

::: answer
```{r, exercise_your_observations}
my_obs <- inat_data %>% 
  filter(user_login == 'natureinla') %>% 
  select(user_login, observed_on, common_name, scientific_name) 
```
:::
::::

## and operator: &

When we want go get rows that match multiple criteria, we can use the and operator `&`

Let's get all observations that are research grade and `common_name` is 'Western Fence Lizard'.

```{r, filter_with_and}
my_data <- inat_data %>% 
  filter( common_name == 'Western Fence Lizard' 
         & quality_grade == 'research')  %>% 
  select(user_login, common_name, scientific_name, observed_on, quality_grade)
```

We can check the results to make sure we wrote the query correctly. We can use `unique()` to check the column values.

```{r, and_1_common_name}
unique(my_data$common_name)
```

```{r, and_1_quality_grade}
unique(my_data$quality_grade)
```

Let's get observations where `user_login` is 'natureinla' and `common_name` is 'Western Fence Lizard'.

```{r, filter_with_and_2_conditions}
my_data <- inat_data %>% 
  filter(user_login == 'natureinla' & common_name == 'Western Fence Lizard') %>% 
  select(user_login, common_name, scientific_name, observed_on) 
```

```{r, and_2_user_login}
unique(my_data$user_login)
```

```{r, and_2_common_name}
unique(my_data$common_name)
```

## or operator: \|

When we want to get rows that match one or more criteria, we can use the or operator `|`

Let's get observations where `common_name` is 'Western Fence Lizard' or  'Western Honey Bee'.

```{r, filter_with_or_2_species}
my_data <- inat_data %>% 
  filter(common_name == 'Western Honey Bee' | common_name == 'Western Fence Lizard')  %>% 
  select(user_login, observed_on, common_name)

dim(my_data)
```

```{r, or_common_name}
unique(my_data$common_name)
```

## %in% c()

If you need to examine multiple values for a field, you can use `field_name %in% c(value1, value2)` instead of `|` (or).

`c()` is a function from R that creates a vector with the passed in agruments. A vector is how R stores a list of items.  `%in%` operator from R checks if a vector is contained in another vector.

Let's rewrite the the code for  `common_name` is 'Western Fence Lizard' or 'Western Honey Bee' using `%in% c()`. 

```{r, in_c_with_2_species}
my_data <- inat_data %>% 
  filter(common_name %in% c('Western Honey Bee', 'Western Fence Lizard'))  %>% 
  select(user_login, observed_on, common_name)

dim(my_data)
```
```{r, in_c_common_name}
unique(my_data$common_name)
```


## & (and) versus \| (or)

\*\* & (and)\*\* return rows where all conditions are true. This code looks for  observations where user_login is 'natureinla' and common_name is 'Western Fence Lizard'.


```{r, and_comparison}
and_data <- inat_data %>% 
  filter(user_login == 'natureinla' & common_name == 'Western Fence Lizard')

dim(and_data)
```

```{r, and_comparison_user_login}
unique(and_data$user_login)
```

```{r, and_comparison_common_name}
unique(and_data$common_name)
```
We get 79 rows with 1 user_login and 1 common_name

**\| (or)** returns rows where any conditions are true. This code looks for observations where user_login is 'natureinla' plus observations where common_name is 'Western Fence Lizard'


```{r, or_comparison}
or_data <- inat_data %>% 
  filter(user_login == 'natureinla' | common_name == 'Western Fence Lizard') 

dim(or_data)
```

```{r, or_comparison_user_login}
unique(or_data$user_login) %>% length
```

```{r, or_comparison_common_name}
unique(or_data$common_name) %>% length
```

We get 6,216 rows with 1052 user_login and 1031 common_name

And / Or will return different results. In other words, check the results of your code to make sure your results matches what you intended


## More complex queries

Sometimes we want to use both `and` `or` to select the rows. We want observations where user is 'cdegroof' or 'deedeeflower5', and species is 'Western Fence Lizard'. You can use multiple filter statememts.

```{r, complex_queries}
complex_query <- inat_data %>% 
  filter(user_login == 'cdegroof' 
         | user_login == 'deedeeflower5') %>%
  filter(common_name == 'Western Fence Lizard')  %>% 
  select(user_login, common_name, scientific_name, observed_on)

complex_query
```

```{r, complex_unique_common_name}
unique(complex_query$common_name)
```

```{r, complex_unique_user_login}
unique(complex_query$user_login)
```


## Higher taxonomy

Instead of looking at one species, let's look for observations for all oak trees.

We can use filter where the `common_name` is 'oaks'.

```{r, filter_oaks_observations}
oaks_obs <- inat_data %>% 
  filter(common_name == 'oaks')

dim(oaks_obs)
```

We have 218 observations. However, when we used the iNaturalist site to look for 'oaks' for 'Los Angeles City Nature Challenge Cumulative Observations 2016-2024', we get [1369 observations](https://www.inaturalist.org/observations?project_id=los-angeles-city-nature-challenge-cumulative-observations-2016-2024&subview=map&taxon_id=47851&verifiable=any). What's causing the difference?

When you search for 'oaks' on iNaturalist, click the 'About' link, and it will bring you to the [taxa page for 'oaks'](https://www.inaturalist.org/taxa/47851-Quercus).

![](images/search_oaks.png)

![](images/oaks_taxa.png){fig-alt="oaks taxa page"}

'Oaks' is the common name for genus Quercus. When you search iNaturalist observations for 'oaks', iNaturalist returns observations that belong to the genus Quercus such as 'Live Coast Oak' and 'Valley Oak'. Our query `common_name == 'oaks'` only looked for observations that were labeled 'oaks'; it ignored observations that were labeled as specific oak species. To match the iNaturalist search results, we need to look for all observations where the genus equals Quercus.

We can use `names()` to get a list of fields.

```{r use_names_to_get_fields_2}
names(inat_data)
```

Since we know 'oaks' is genus Quercus, we need to use the field `taxon_genus_name` and 'Quercus'.

```{r get_quercus_observations}
oaks_obs_fixed <- inat_data %>% 
  filter(taxon_genus_name == 'Quercus')

dim(oaks_obs_fixed)
```

We now get 1367 observations.

::: callout-note
The reason why iNaturalist has 1369 observations for 'oaks' but we have 1367 is because iNaturalist has two 'oaks' observations which don't have latitude and longitude data. Our cleaned iNaturalist data excludes observations without latitude and longitude.
:::

Let's examine the number of observations for each type of oak. We can use `count()` to get the counts, and `View()` to see the results.

```{r get_quercus_counts}
oaks_count <- oaks_obs_fixed %>%
  count(common_name, scientific_name) %>%
  arrange(desc(n))
```
```{r}
#| eval: false
View(oaks_count)

```

While most of the observations are species (as evidence by the two part name), there are 218 observations that could only be identified to the genus Quercus.

Another example, let's search for 'trees'. When we search iNaturalist for 'trees', the first result is [Phylum Tracheophyta](https://www.inaturalist.org/taxa/211194-Tracheophyta). Let's look at our data using `taxon_phylum_name` and 'Tracheophyta'

```{r get_Tracheophyta_observations}
trees_obs <- inat_data %>% 
  filter(taxon_phylum_name == 'Tracheophyta')

dim(trees_obs)
```

There are 95372 Tracheophyta observations.

Let's get a count of observations for Tracheophyta.

```{r get_Tracheophyta_counts}
trees_count <- trees_obs %>%
  count(common_name) %>%
  arrange(desc(n))
```
```{r}
#| eval: false
View(trees_count)
```

We are getting plants such as California poppy, grasses, which aren't trees. Why is that?

If we look up ['Tracheophyta' in Wikipedia](https://en.wikipedia.org/wiki/Vascular_plant):

> Vascular plants, also called tracheophytes or collectively tracheophyta from Ancient Greek τραχεῖα ἀρτηρία (trakheîa artēría) 'windpipe' and φυτά (phutá) 'plants'), are plants that have lignified tissues (the xylem) for conducting water and minerals throughout the plant. They also have a specialized non-lignified tissue (the phloem) to conduct products of photosynthesis. The group includes most land plants (c. 300,000 accepted known species) other than mosses.

If we look up ['tree' in Wikipedia](https://en.wikipedia.org/wiki/Tree):

> Trees are not a monophyletic taxonomic group but consist of a wide variety of plant species that have independently evolved a trunk and branches as a way to tower above other plants to compete for sunlight. The majority of tree species are angiosperms or hardwoods; of the rest, many are gymnosperms or softwoods.

> Although "tree" is a common word, there is no universally recognised precise definition of what a tree is, either botanically or in common language.

In other words, there is no one word we can use to find all trees. The fact that iNaturalist shows Tracheophyta as the first search result for 'trees' is a little quirk with the iNaturalist search algorithm. To find all trees, we would need to pass in a list of species or genera of plants that you would label as trees.

The Los Angeles County Community Forest Management Plan has [LACO Master Tree List](https://lacountycfmp.org/resources/). It is a list of recommended tree species for LA County. Let's examine all the genera in that list.

```{r get_laco_observations}

laco_trees <- c('Acacia', 'Afrocarpus','Agonis', 'Angophora', 'Arbutus',
                'Bauhinia', 'Brachychiton', 'Caesalpinia', 'Callistemon',
                'Cassia', 'Casuarina','Cedrus', 'Ceiba', 'Celtis', 'Cercidum',
                'Cercis','Chilopsis', 'Chitalpa', 'Cordia','Corymbia', 
                'Cotinus', 'Dalbergia', 'Ebenopsis', 'Eriobotrya',
                'Ficus','Fraxinus','Geijera', 'Ginkgo', 'Hakea', 'Handroanthus',
                'Hesperocyparis', 'Heteromeles', 'Hymenosporum', 'Jacaranda',
                'Koelreuteria', 'Lagerstroemia', 'Lagunaria', 'Laurus',
                'Lophostemon', 'Lyonothamnus', 'Melaleuca', 'Metrosideros',
                'Olea', 'Olneya', 'Parkinsonia', 'Pinus', 'Pistacia', 
                'Platanus', 'Prosopis', 'Prunus', 'Quercus', 'Searsia',
                'Spathodea', 'Stenocarpus', 'Tipuana', 'Tristaniopsis', 
                'Ulmus', 'Umbellularia', 'Vachellia', 'Zelkova')

laco_trees_obs <- inat_data %>% 
  filter(taxon_genus_name %in% laco_trees)

dim(laco_trees_obs)
```
5743 observations for LACO tree genera.

Let's get a count of observations for LACO tree genera.

```{r get_laco_counts}
laco_trees_count <- laco_trees_obs %>%
  count(common_name, scientific_name, taxon_genus_name) %>%
  arrange(desc(n))
```

```{r}
#| eval: false
View(laco_trees_count)
```
The LACO list of trees is not a list of all trees in L.A. county. You might want to add or subtract from the LACO list. 

In other words, when looking for multiple species, it might take some trial and error to get the results you want.

:::: exercise
## Exercise 2

Get all your CNC observations that are research grade

-   Use `select()`, `filter()`, `&`
-   The results should have `user_login` equal to your iNaturalist username
-   The results should have `quality_grade` equal to research.
-   The results should have `user_login`, `observed_on`, `common_name`, `scientific_name` columns
-   save the results to `my_obs_2` object

::: answer
```{r, exercise_your_research_grade}
my_obs_2 <- inat_data %>% 
  filter(user_login == 'natureinla' & quality_grade == 'research') %>% 
  select(user_login, observed_on, common_name, scientific_name) 
```
:::
::::

:::: exercise
## Exercise 3

Get all your observations for two species

-   Use `select()`, `filter()` , `|`
-   use `unique()` to see all common names from `my_obs`
-   The results should have `user_login` equal to your iNaturalist username
-   The results should have `common_name` equal to two species
-   The results should have `user_login`, `observed_on`, `common_name`, `scientific_name` columns
-   save the results to `my_obs_3` object

::: answer
```{r, exercise_unique_common_names}
unique(my_obs$common_name)[0:10]
```

```{r, exercise_two_species}
my_obs_3 <- inat_data %>% 
  filter(user_login == 'natureinla') %>% 
  filter(common_name == 'Red-eared Slider' | common_name=='Monarch') %>% 
  select(user_login, observed_on, common_name, scientific_name) 
```
:::
::::

## Add new columns with mutate()

Another common task is creating a new column based on values in existing columns. For example, we could add a new column for year.

Use `mutate()` from **dplry** to add a column. We pass in the name of the new column, and the value of the column.

Use `year()` from **lubridate** on a date column to get the year.

Let's get `observed_on` for rows 10315 to 10325

```{r show_observed_on}
(inat_data$observed_on)[10315:10325]
```

Let's get use `year()` to get the year from `observed_on` for rows 10315 to 10325

```{r get_years_from_observed_on}
year(inat_data$observed_on)[10315:10325]
```

This code will add `year` column using the `year(observed_on)`

```{r, mutate_year}
temp <- inat_data %>% 
  mutate(year = year(observed_on))
```

You can click on `temp` in **Environment** tab to see the data frame with `year` column.

We can also use `table()` to get the number of observations per year.

```{r, counts_per_year}
table(temp$year)
```

Let's get all observations for 2020. We use mutate to add year column, and use filter to select rows where year is 2020.

```{r, 2020_observations}
inat_data %>% 
  mutate(year = year(observed_on)) %>%
  filter(year == 2020)
```

:::: exercise
## Exercise 4

Get all of your observations from last year.

-   Use `select()` and `filter()`
-   Use `mutate()` and `year()` to add year column
-   The results should have `user_login` equal to your iNaturalist username
-   The results should have `year` equal last year
-   The results should have `user_login`, `observed_on`, `common-name`, `scientific_name`.

::: answer
```{r, exercise_last_year}
inat_data %>% 
   mutate(year = year(observed_on)) %>%
  filter(user_login == 'natureinla' & year == 2024) %>%
  select(user_login, observed_on, common_name, scientific_name) 
```
:::
::::

## Count the number of rows with count()

Use `count()` from **dplyr** to count the number of values for one or more columns. We pass in the column names as arguments to `count()`

Let's try counting of all observations by year. Use `mutate()` to add a year column. Use `count()` to count the number of observations for each year. By default, count will add a new column caled `n`.

```{r, count_year}
inat_data %>% 
  mutate(year = year(observed_on)) %>%
  count(year) 
```

We can specify the name of the count column by passing in `name` argument to `count()`.

```{r, rename_count_column}
inat_data %>% 
  mutate(year = year(observed_on)) %>%
  count(year, name='obs_count')  
```

Let's count the number of observations for each species. We will pass in both 'common_name' and 'scientific_name' because some species don't have a common_name.

```{r, count_species}
counts <- inat_data %>% 
  count(common_name, scientific_name, name='obs_count')   

counts
```

It's often useful to take a look at the results in some order, like the lowest count to highest. We can use the `arrange()` function from **dplyr** for that. We pass in the columns we want to order by to `arrange()`. By default, `arrange()` will return values from lowest to highest.

```{r, order_counts}
counts <- inat_data %>% 
  count(common_name, scientific_name, name='obs_count')   %>%
  arrange(obs_count)

counts
```

If we want to reverse the order, we can wrap the column names in `desc()` from **dplyr**. This will return values from highest to lowest.

```{r, desc_count}
counts <- inat_data %>% 
  count(common_name, scientific_name, name='obs_count') %>%
  arrange(desc(obs_count)) 

counts
```

use `slice()` from **dplyr** to return only certain number of records. `slice(start:end)` will return rows from the starting number to the ending number.

Let's get the top ten species with the most observations.

```{r, top_ten}
counts <- inat_data %>% 
  count(common_name, scientific_name, name='obs_count') %>%
  arrange(desc(obs_count))  %>% 
  slice(1:10)

counts
```

:::: exercise
## Exercise 5

Get the number of observation you made per year

-   Use `mutate()` and `year()` to add year column
-   Use `count() to count the number of observations`
-   Use `filter()` to select your observations

::: answer
```{r, exercise_observations_per_year}
inat_data %>% 
  mutate(year = year(observed_on)) %>%
  filter(user_login == 'natureinla') %>%
  count(year, name='obs_count')   
```
:::
::::

## Save data

If you want to save your results, you can save the data frames as CSVs. First, assign the data frame to an object.

```{r, top_ten_save}

top_ten <- inat_data %>% 
  count(common_name, scientific_name, name='obs_count') %>%
  arrange(desc(obs_count))  %>% 
  slice(1:10)

top_ten

```

Then `write_csv()` from **dplyr** to create a CSV. The first argument is the data frame to save. The second argument is the relative path of where to save the file. To keep our files organized, we are saving CSVs to the results folder. You should give the file a sensible name to help you remember what is in the file.

```{r, save_file}
#| eval: false
write_csv(top_ten, 'results/top_ten_observations.csv')
```
