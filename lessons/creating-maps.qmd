---
title: "Creating maps"
format: 
   html:
     df-print: kable
include-in-header: "components/add-answer-button.html"
---

::: summary
## Questions

-   How do we create maps using R?

## Objectives

-   Learn how to plot iNaturalist observations on a map
-   Learn how to create static maps with ggplot2
-   Learn how to create interactive maps with mapview
:::

## Geographic concepts

Geographic data is data that has a location.

There are various file formats for geographic data. Shape files for GIS applications, KML for Google maps, geojson for web applications.

Earth is a 3D sphere. Maps are 2D representation of a 3D sphere. Map projections are ways to represent a sphere as a flat surface. A coordinate reference system (CRS) defines how the two-dimensional, projected map relates to real places on the earth.

Many organizations offer geospatial data that people can use for free. Los Angeles City has a portal for geospatial data: <https://geohub.lacity.org>

## Mapping iNaturalist data

iNaturalist data includes latitude and longitude, which means we can put the observations in a map. There are several packages to create maps. We will use ggplot and mapview packages.

Main steps:

1.  Load iNaturalist data
2.  Add geometry column to iNaturalist dataframe
3.  Use `filter`() to get the rows we want. Use `select()` to get the columns we want.
4.  Create map.

loading R packages

```{r, load_packages}
#| error: false
#| warning: false
#| message: false

library(readr) # read and write tabular data
library(dplyr) # manipulate data

library(ggplot2) # create data visualizations
library(sf) # handle geospatial data
library(mapview) # create interactive maps
```

Read data from the cleaned iNaturalist observation file.

```{r, read_data_from_csv}
#| cache: true
#| warning: false
#| message: false
inat <- read_csv('data/cleaned/cnc-los-angeles-observations.csv')

```

Use `names()` to see all the column names. "latitude" and "longitude" are the column names we need.

```{r, get_column_names}
names(inat)
```

We use the sf package to add geographic data to our dataframe. `st_as_sf()` from `sf` package will take the longitude and latitude and add a `geometry` column that we can use for mapping.

-   We pass in longitude and latitude columns to `coords` argument. Must wrap longitude and latitude in quotes.
-   `crs` is coordinate reference system. 4326 is code for the WGS 84 CRS. WGS 84 is a commonly used CRS. WGS 84 is used in GPS applications.
-   `remove=FALSE` will keep the longitude and latitude columns in the dataframe

```{r, add_geographic_data}
temp <- inat %>% 
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326, remove=FALSE)
```

use `names()` to get a list of all the columns. A `geometry` column was added.

```{r, see_column_names_part_2}
names(temp)
```

use `select`() to pick which columns to use.

```{r, select_columns}
inat_map <- inat %>% 
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326, remove=FALSE) %>% 
  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry, quality_grade) 
```

Use `dim()` to show the number of rows and columns. There are over 191K rows.

```{r, size_of_dataframe}
dim(inat_map)
```

Let's use filter to get the observations for 'Quercus agrifolia' aka Coast Live Oak.

```{r, get_lizard_data}
inat_oak <- inat_map %>% 
  filter(scientific_name == 'Quercus agrifolia')
```

Use dim to get number of rows. About 700 rows.

```{r, get_size_of_lizard_dataframe}
dim(inat_oak)
```

## static map

Use ggplot to create static map for all 191K observations. `geom_sf()` will use `geometry` column to create a black circle for each observation.

```{r, create_static_map}

ggplot() +
  geom_sf(data = inat_map)  

```

Let's create a map for Coast Live Oak observations.

```{r, create_static_map_for_lizard}

ggplot() +
  geom_sf(data = inat_oak)  

```

We can set the color of the map marker using `color` argument.

```{r, create_static_map_for_lizard}

ggplot() +
  geom_sf(data = inat_oak, color='green')  

```

We can also set the color of the marker by using the values of a given column using `mapping=aes(color=<column_name>)`. 

Let's use 'quality_grade' to set the color of the map markers.

```{r, create_static_map_for_lizard}

ggplot() +
  geom_sf(data = inat_oak, mapping=aes(color=quality_grade))  

```

## interactive map

We can use mapview package to create interactive maps where you can zoom in and out.

Since there are over 191K rows in inat_map, an interactive map will be very slow. Do not use mapview if there are lots of rows.

Let's create interactive map for Coast Live Oak. When you click on observation, all the fields that were set from `select()` will be displayed in a popup.

```{r, create_interactive_map}
mapview(inat_oak)
```

Use `color` to set the color of the border. User `col.regions` to set the color of the fill.

```{r, create_interactive_map}
mapview(inat_oak, color='red', col.regions='yellow')
```

We can also set the color of the marker by using the values of a given column using `zcol=<column_name>`.

Let's use 'quality_grade' to set the color of the map markers.

```{r}
mapview(inat_oak, zcol='quality_grade')
```

## working with other geographic files

Let's add LA county boundaries to the map.

Shape files is a file format for geographic information system software.Â I downloaded the LA county boundaries as a Shape file from https://geohub.lacity.org/datasets/lacounty::county-boundaries/explore

use `read_sf()` from `sf` package to read the Shape file.

```{r, get_LA_County_boundaries}
la_county <- read_sf('data/raw/County_Boundary/County_Boundary.shp')
```

add LA County to maps.

```{r, add_LA_Count_to_static_map}
ggplot() +
  geom_sf(data = la_county)  +
  geom_sf(data = inat_oak) 
```

```{r, add_LA_Count_to_interactive_map}

mapview(la_county) +
  mapview(inat_oak) 
```

:::: exercise
## Exercise 1

Create a map for one species. Include the boundaries for LA County.

::: answer
```{r, exercise_create_map_one_species}
inat_finch <- inat_map %>% 
  filter(common_name == 'House Finch')

mapview(la_county) + 
  mapview(inat_finch)
```
:::
::::

## Exploring iNaturlist data in specific area

Lets look for all iNaturalist observations made in Exposition Park.

I used this [Draw map boundaries](https://wykhuh.github.io/draw-map-boundaries/) to draw and download the boundaries of Exposition Park. The file is in geojson format.

use `st_read`() to read a geojson file. Use `st_transform` to set the crs

```{r, get_Expo_park_boundaries}
expo_park <- st_read('data/raw/boundaries_expo_park_area.geojson')  %>% 
  st_transform(4326)
```

create map of Expo Park.

```{r, create_static_map_expo_park}
ggplot() +
  geom_sf(data = expo_park) 
```

```{r,create_interactive_map_expo_park}
mapview(expo_park) 
```

We want to get observation inside Expo Park.

You should check if the crs for the inaturalist data and the Expo Park are the same

```{r, check_crs}
st_crs(expo_park) == st_crs(inat_map)

```

Use `st_intersection()` to get all observations that inside of Exposition Park. This might take a while.

```{r, get_all_observations_within_expo_park}
inat_expo <- inat_map %>% st_intersection(expo_park)
```

Use dim to get row and column count. 191K in LA county. 2900 observation in Expo Park.

```{r, compare_size_of_dataframes}
dim(inat_map)

dim(inat_expo)
```

Create map of all observations in Expo Park.

```{r, create_static_map_of_observations_in_expo_park}
ggplot() +
  geom_sf(data = expo_park)  +
  geom_sf(data = inat_expo) 
```

```{r,create_interactive_map_of_observations_in_expo_park}
mapview(expo_park) +
  mapview(inat_expo) 

```

Use `alpha.regions` to set opacity. Use `col.regions` to set color.

```{r, set_color_of_map}
mapview(expo_park,   alpha.regions=0.3, col.regions="#333333") +
  mapview(inat_expo, col.regions="green") 
```

::: exercise
## Exercise 2

Create a map for one species that are inside of a specific area

-   Used [Draw map boundaries](https://wykhuh.github.io/draw-map-boundaries/) to draw and download an area that you are interested in.
-   Save the file to the `data/raw` directory.
-   use `st_read` to read your boundary data.
-   use `st_intersection` to get observations inside a boundary :::::: answer

```{r,exercise_create_map_of_observations_inside_boundary}

expo_park <- st_read('data/raw/boundaries_expo_park_area.geojson')  %>% 
  st_transform(4326)


inat_finch <- inat_map %>% 
  filter(common_name == 'House Finch')  %>% 
  st_intersection(expo_park)


mapview(expo_park) + 
  mapview(inat_finch)
```
:::

## Exporting maps

We can export the static maps created with ggplot. We can not export the interactive maps created with mapview.

Assign the map to an object. Then run ggsave() to save our map The first argument we give is the path to the file we want to save, including the correct file extension. You can save as jpb, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.

```{r, assign_map}
my_map <- ggplot() +
  geom_sf(data = expo_park)  +
  geom_sf(data = inat_expo) 

my_map
```

```{r, save_map}
ggsave(filename = 'results/expo_park_observations.jpg', plot = my_map,  height = 6, width = 8)
```
