---
title: "Creating maps"
format: html
include-in-header: "components/add-answer-button.html"
---

::: summary
## Questions

-   How do we create maps using R?

## Objectives

-   Learn how to plot iNaturalist observations on a map
-   Learn how to create static maps with ggplot2
-   Learn how to create interactive maps with mapview
:::

## Geographic concepts

Geographic data is data that has a location.

There are various file formats for geographic data. Shape files for GIS applications, KML for Google maps, geojson for web applications.

Earth is a 3D sphere. Maps are 2D representation of a 3D sphere. Map projections are ways to represent a sphere as a flat surface. A coordinate reference system (CRS) defines how the two-dimensional, projected map relates to real places on the earth.

Many organizations offer geospatial data that people can use for free. Los Angeles City has a portal for geospatial data: <https://geohub.lacity.org>

## Mapping iNaturalist data

iNaturalist data includes latitude and longitude, which means we can put the observations in a map. There are several packages to create maps. We will use **ggplot** and **mapview** packages.

Main steps:

1.  Load iNaturalist data
2.  Add geometry column to iNaturalist data frame
3.  Use `filter()`, `select(),` and `mutate()`, to get the rows and columns we want.
4.  Create map.

loading R packages

```{r, load_packages}
#| error: false
#| warning: false
#| message: false

library(readr) # read and write tabular data
library(dplyr) # manipulate data

library(ggplot2) # create data visualizations
library(sf) # handle geospatial data
library(mapview) # create interactive maps
```

Read data from the cleaned iNaturalist observation file.

```{r, read_data_from_csv}
#| warning: false
#| message: false
inat_data <- read_csv('data/cleaned/cnc-los-angeles-observations.csv')

```

Use `names()` to see all the column names. "latitude" and "longitude" are the column names we need.

```{r, get_column_names}
names(inat_data)
```

We use the **sf** package to add geographic data to our data frame. `st_as_sf()` from **sf** package will take the longitude and latitude and add a `geometry` column that we can use for mapping.

-   We pass in longitude and latitude columns to `coords` argument. Must wrap longitude and latitude in quotes.
-   `crs` is coordinate reference system. 4326 is code for the WGS 84 CRS. WGS 84 is a commonly used CRS. WGS 84 is used in GPS applications.
-   `remove=FALSE` will keep the longitude and latitude columns in the data frame

```{r, add_geographic_data}
temp <- inat_data %>% 
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326, remove=FALSE)
```

use `names()` to get a list of all the columns. A `geometry` column was added.

```{r, see_column_names_part_2}
names(temp)
```

use `select()` to pick which columns to use.

```{r, select_columns}
inat_map <- inat_data %>% 
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326, remove=FALSE) %>% 
  select(id, user_login, common_name, scientific_name, observed_on,  url, longitude, latitude, geometry, quality_grade) 
```

Use `dim()` to show the number of rows and columns. There are over 191K rows.

```{r, size_of_dataframe}
dim(inat_map)
```

Let's get the observations for 'Quercus agrifolia' aka Coast Live Oak.

```{r, get_oak_data}
inat_oak_map <- inat_map %>% 
  filter(scientific_name == 'Quercus agrifolia')
```

Use `dim()` to get number of observations. About 700 rows.

```{r, get_size_of_oak_dataframe}
dim(inat_oak_map)
```

## static map

**ggplot** is a data visualization package. We can use **ggplot** to create static maps. `geom_sf()` will use plot each observation using the information in the `geometry` column.

Let's create a map for all the observations.

```{r, create_static_map}

ggplot() +
  geom_sf(data = inat_map)  

```

Let's create a map for Coast Live Oak observations.

```{r, create_static_map_for_oak}

ggplot() +
  geom_sf(data = inat_oak_map)  

```

We can set the color of the map marker using `color` argument.

```{r, create_static_map_for_oak_use_color}

ggplot() +
  geom_sf(data = inat_oak_map, color='green')  

```

We can also set the color of the marker by using the values of a given column using `mapping=aes(color=<column_name>)`.

Let's use 'quality_grade' to set the color of the map markers.

```{r, create_static_map_for_oak_use_quality_grade}

ggplot() +
  geom_sf(data = inat_oak_map, mapping=aes(color=quality_grade))  

```

## interactive map

We can use **mapview** package to create interactive maps where you can zoom in and out.

There are over 191K rows in `inat_map` data frame. Creating an interactive map with 191K rows will be very slow. Do not use **mapview** if there are lots of rows.

Let's create interactive map for 'Coast Live Oak'.

When you click on observation, all the fields that were passed into `select()` will be displayed in a popup.

```{r, create_interactive_map}
#| eval: false
mapview(inat_oak_map)
```

![](images/mapview/creating_maps/create_interactive_map.png){fig-alt="interactive map of Coast Live Oak observations"}

Use `color` to set the color of the border. User `col.regions` to set the color of the fill.

```{r, create_interactive_map_use_color}
#| eval: false
mapview(inat_oak_map, color='black', col.regions='green')
```

![](images/mapview/creating_maps/create_interactive_map_use_color.png){fig-alt="interactive map of Coast Live Oak using green map markers"}

We can also set the color of the marker by using the values of a given column using `zcol=<column_name>`.

Let's use `quality_grade` to set the color of the map markers.

```{r, create_interactive_map_for_oak_use_quality_grade}
#| eval: false
mapview(inat_oak_map, zcol='quality_grade')
```

![](images/mapview/creating_maps/create_interactive_map_for_oak_use_quality_grade.png){fig-alt="interactive map of Coast Live Oaks observations using colors based on quality grade"}

## Using other geospatial files

Let's add the boundaries for LA County to the map.

Shape files is a file format for geographic information system software.Â I downloaded the LA County boundaries as a Shape file from https://geohub.lacity.org/datasets/lacounty::county-boundaries/explore

We will use `read_sf()` from **sf** package to read the LA County Shape file.

```{r, get_LA_County_boundaries}
la_county_boundary <- read_sf('data/raw/County_Boundary/County_Boundary.shp')
```

Let's create a map with LA County and oak observations.

```{r, add_LA_County_to_static_map}
ggplot() +
  geom_sf(data = la_county_boundary)  +
  geom_sf(data = inat_oak_map) 
```

```{r, add_LA_County_to_interactive_map}
#| eval: false
mapview(la_county_boundary) +
  mapview(inat_oak_map) 
```

![](images/mapview/creating_maps/add_LA_County_to_interactive_map.png){fig-alt="add L.A. County boundary to interactive map of Coast Live Oak observations"}

:::: exercise
## Exercise 1

Create a map for one species. Include the boundaries for LA County.

-   use `filter()` to select observations for one species
-   create either a static or interactive map.

::: answer
```{r, exercise_create_map_one_species}
#| eval: false
inat_finch <- inat_map %>% 
  filter(common_name == 'House Finch')

mapview(la_county_boundary) + 
  mapview(inat_finch)
```
:::
::::

## Exploring iNaturalist data in specific area

Let's look for all iNaturalist observations made in Exposition Park.

I used this [Draw map boundaries](https://wykhuh.github.io/draw-map-boundaries/) to draw and download the boundaries of Exposition Park. The file is in geojson format.

Let's use `st_read`() to read a geojson file. Use `st_transform` to set the crs

```{r, get_Expo_park_boundaries}
expo_park_boundary <- st_read('data/raw/boundaries_expo_park_area.geojson')  %>% 
  st_transform(4326)
```

First create map of Expo Park.

```{r, create_static_map_expo_park}
ggplot() +
  geom_sf(data = expo_park_boundary) 
```

```{r,create_interactive_map_expo_park}
#| eval: false
mapview(expo_park_boundary) 
```

![](images/mapview/creating_maps/create_interactive_map_expo_park.png){fig-alt="interactive map of Expo Park"}

We want to get observation inside Expo Park. When we want to combine two geospatial datasets, we need to make sure the CRS are the same.

`st_crs()` from **sf** returns the CRS for a data frame.

```{r get_crs}
st_crs(expo_park_boundary)
```

Let's use `st_crs()` to check if the CRS for the iNaturalist data and the Expo Park are the same. `==` checks if two things are equal.

```{r, check_crs}
st_crs(expo_park_boundary) == st_crs(inat_map)

```

`st_intersects()` from **sf** can tell us which points are inside a boundary. `st_intersects()` returns number of items in each row of `inat_map` that is inside `expo_park_boundary`.

```{r, st_intersects}
st_intersects(inat_map, expo_park_boundary)
```

We can use `lengths(...) > 0` to return TRUE/FALSE for every row in `inat_map` that has 1 or more items that inside `expo_park_boundary`

```{r, get_true_false}
#| eval: false
lengths(st_intersects(inat_map, expo_park_boundary)) > 0
```

`dataframe[logical_vector, ]` selects all rows in a dataframe where the value is true.

In this case, we want all observations from `inat_map` that are inside `expo_park_boundary`.

```{r, get_all_observations_within_expo_park}
inat_expo <- inat_map[lengths(st_intersects(inat_map, expo_park_boundary)) > 0, ]
```

Use `dim()` to get row and column count. 191K observations in LA county, over 2900 observation in Expo Park.

```{r, compare_size_of_dataframes}
dim(inat_map)

dim(inat_expo)
```

Let's create map of all observations in Expo Park.

```{r, create_static_map_of_observations_in_expo_park}
ggplot() +
  geom_sf(data = expo_park_boundary)  +
  geom_sf(data = inat_expo) 
```

```{r,create_interactive_map_of_observations_in_expo_park}
#| eval: false
mapview(expo_park_boundary) +
  mapview(inat_expo) 

```

![](images/mapview/creating_maps/create_interactive_map_of_observations_in_expo_park.png){fig-alt="interactive map of Expo Park with iNaturalist observations"}

There are various ways to change the appearance of a map.

For `ggplot()`, use `fill()` to set color and `alpha()` to set opacity for a polygon. Use `color()` to set color for points.

```{r, set_color_of_static_map}
ggplot() +
  geom_sf(data = expo_park_boundary, fill=alpha("yellow", .3))  +
  geom_sf(data = inat_expo, color="green") 
```

For `mapview()`, use `col.regions` to set color, and `alpha.regions` to set opacity.

```{r, set_color_of_interactive_map}
#| eval: false
mapview(expo_park_boundary, col.regions="yellow",  alpha.regions=0.3) +
  mapview(inat_expo, col.regions="green") 
```

![](images/mapview/creating_maps/set_color_of_map.png){fig-alt="interactive map of Expo Park with iNaturalist observations with green map markers"}

:::: exercise
## Exercise 2

Create a map for all CNC observations that are inside of a specific area

-   Used [Draw map boundaries](https://wykhuh.github.io/draw-map-boundaries/) to draw and download an area that you are interested in.
-   Save the file to the `data/raw` directory.
-   use `st_read` to read your boundary data.
-   use `inat_map[lengths(st_intersects(inat_map, your_boundary)) > 0, ]` to get observations inside a boundary

::: answer
```{r,exercise_create_map_of_observations_inside_boundary}
#| eval: false

usc_boundary <- st_read('data/raw/boundaries_usc.geojson')  %>% 
  st_transform(4326)

inat_usc <- inat_map[st_intersects(inat_map, usc_boundary) %>% lengths > 0, ]

mapview(usc_boundary) + 
  mapview(inat_usc)
```
:::
::::

## Exporting maps

We can export the maps created with **ggplot** and **mapview** as image files.

### static maps

Assign the map created by ggplot to an object. Then run ggsave() to save our map. The first argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.

```{r, save_static_map}
#| eval: false

# create map
my_map <- ggplot() +
  geom_sf(data = expo_park_boundary)  +
  geom_sf(data = inat_expo) 

# save map
ggsave(filename = 'results/expo_park_observations.jpg', plot = my_map,  height = 6, width = 8)
```

### interactive map

Assign the map created by mapview to an object. Then run mapshot() to save our map. The first argument is map you want to to save. The second argument is the path to the file we want to save, including the correct file extension. You can save as jpg, pdf, or png.

```{r, save_interactive_map}
#| eval: false

# create map
my_map_2 <- mapview(expo_park_boundary) + 
  mapview(inat_expo)

# save map
mapshot(my_map_2, file = 'results/expo_park_observations_2.jpg')
```
