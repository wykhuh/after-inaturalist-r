---
title: "Creating charts"
format: html
include-in-header: "components/add-answer-button.html"
---

::: summary
## Questions

-   How do we create charts using R?

## Objectives

-   Learn how to create bar and line charts using ggplot2
-   Learn how to customize the appearance of the charts
:::

```{r, load_packages}
#| message: false

library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(ggplot2) # create data visualizations
library(lubridate) # manipulate dates
```

## Creating charts

We are going to be using functions from the **`ggplot2`** package to create visualizations. **`ggplot`** plots are built step by step by adding new layers, which allows for extensive customization of plots.

Main steps:

1.  Load data
2.  Use `filter`(), `select()`, `mutate()`, `count()` so the data frame has the data we need
3.  Set which columns in a data frame will be used for chart elements such as x and y axis
4.  Select the chart type
5.  Create chart

## iNaturalist data

First, read data from the iNaturalist observation file.

```{r, load_inaturalist_data}
#| warning: false
#| message: false
inat <- read_csv('data/cleaned/cnc-los-angeles-observations.csv')

```

## Bar chart

Create a bar chart that shows the number of observations per year.

First, add year column to iNaturalist data.

```{r, add_year_column}
inat_year <- inat %>% 
  mutate(year = year(observed_on))
```

Pass the inaturalist observation to `ggplot()` function using the `data` argument.

```{r, pass_data_to_ggplot}
ggplot(data = inat_year)
```

We need to tell **ggplot** how to process the data. We tell **ggplot** how to map the data to various plot elements, such as x/y axis, size, or color by using the `aes()` function. `aes` is short for aesthetic mappings.

For bar charts, we need to tell what column to use for the x axis.

We want to create a plot with `year` on the x axis so we use `mapping = aes(x = year)`. **ggplot** will count the number of rows for each year, and use the count for y axis.

```{r, pass_mapping_to_ggplot}
ggplot(data = inat_year, mapping = aes(x = year))
```

Next we need to specify how we want the data to be displayed. We do this using `geom_` functions, which specify the type of geometry we want, such as points, lines, or bars. We use `geom_bar()` to create a vertical bar plot.

We can add a `geom_bar()` layer to our plot by using the `+` sign. We indent onto a new line to make it easier to read, and we have to end the first line with the `+` sign.

```{r, set_bar_type}
ggplot(data = inat_year, mapping = aes(x = year)) +
  geom_bar()
```

If we want horizontal bar chart, use `coord_flip()`

```{r, horizontal_bar_chart}
ggplot(data = inat_year, mapping = aes(x = year)) +
  geom_bar() +
  coord_flip()
```

## Line chart

Create a line chart that shows the number of observations per year.

For line charts, we need both specify which columns to use for the x and y axis.

We need to create a data frame that has a year column, and a column that counts the observations per year. Use `mutate()` to add year column. Use `count()` to add column that has the count per year.

```{r, create_dataframe_with_year_count}
inat_year_count <- inat %>% 
  mutate(year = year(observed_on)) %>%
  count(year, name='obs_count')  

inat_year_count
```

for `aes`, use `year` on the x axis and `obs_count` on the y axis. And we use `geom_line()` to create a line chart.

```{r, create_line_chart}
ggplot(data = inat_year_count, 
       mapping = aes(x = year, y=obs_count)) +
  geom_line()
```

## More bar charts

Create a bar chart that shows the number of observations per year.

To create bar chart when we already have x and y, use `geom_col()`

We want `year` on the x axis, and `obs_count` on the y axis.

```{r, create_column_chart}
ggplot(data = inat_year_count, 
       mapping = aes(x = year, y = obs_count)) +
  geom_col()
```

:::: exercise
## Exercise 1

Create a chart with all your observations for each year

-   Use `mutate()` to add year column

-   Use `filter()` to select user

-   Use `ggplot()` to set the data and aesthetics.

-   Choose whih type of chart you want: bar or line.

::: answer
```{r, exercise_create_bar_chart}

my_year  <- inat %>% 
  mutate(year = year(observed_on))  %>% 
  filter(user_login == 'natureinla')

  
ggplot(data = my_year, mapping = aes(x = year)) +
  geom_bar()
```
:::
::::

## Changing aesthetics

Building **`ggplot`** plots is often an iterative process, so we'll continue developing the column plot we just made.

Use `colors()` to get a list of the 657 colors in R.

```{r, get_all_colors}
colors()
```

We can change the color of the bars using `fill='color'`.
 
```{r, set_bar_color}
ggplot(data = inat_year, mapping = aes(x = year)) +
  geom_bar(fill='aquamarine')
```

We can also use 6 digit hex color. You can use online tools to get hex colors. https://html-color.codes

```{r, set_bar_color_using_hex_code}
ggplot(data = inat_year, mapping = aes(x = year)) +
  geom_bar(fill='#75cd5e')
```

## Changing themes

Let's assign a plot to an object.

```{r, assign_plot_to_object}
myplot <- ggplot(data = inat_year, mapping = aes(x = year)) +
  geom_bar(fill='#75cd5e')

myplot

```

**ggplot** has built in themes that affects the overall appearance of a plot. To see a list of available themes in ggplot, visit https://ggplot2.tidyverse.org/reference/index.html#themes

Let's add the black-and-white theme `theme_bw()` to our plot:

```{r set_theme, warning=FALSE,}
myplot + 
  theme_bw()
```

To individually change parts of a plot, we can use the `theme()` function, which can take many different arguments to change things about the text, grid lines, background color, and more.

Let's try changing the size of the text on our axis titles. We can do this by specifying that the `axis.title` should be an `element_text()` with `size` set to 14.

```{r set_text_size, warning=FALSE}
myplot +
  theme_bw() +
  theme(axis.title = element_text(size = 14))
```

Another change we might want to make is to remove the vertical grid lines. To do this, we will change the `panel.grid.major.x` and `panel.grid.major.x` to an `element_blank()`.

```{r remove_vertical_grid_lines, warning=FALSE}
myplot +
  theme_bw() +
  theme(axis.title = element_text(size = 14), 
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
```

::: callout-tip
Because there are so many possible arguments to the `theme()` function, it can sometimes be hard to find the right one. Here are some tips for figuring out how to modify a plot element:

-   type out `theme()`, put your cursor between the parentheses, and hit <kbd>Tab</kbd> to bring up a list of arguments
    -   you can scroll through the arguments, or start typing, which will shorten the list of potential matches
-   like many things in the `tidyverse`, similar argument start with similar names
    -   there are `axis`, `legend`, `panel`, `plot`, and `strip` arguments
-   arguments have hierarchy
    -   `text` controls all text in the whole plot
    -   `axis.title` controls the text for the axis titles
    -   `axis.title.x` controls the text for the x axis title
:::

## Changing labels

We can customize the axis labels and add a chart title using `labs()`.

```{r changing_labels, warning=FALSE}
myplot +
  theme_bw() +
  theme(axis.title = element_text(size = 14), 
        plot.title = element_text(face = "bold", size = 20)) +
  labs(title = "CNC Los Angeles",
       subtitle="Observations per year",
       x = "Year",
       y = "Observations")
```

:::: exercise
## Exercise 2: Customizing a plot

Take the `my_year` data frame from exercise 1 (your observations for each year) and create a plot. Customize the appearance. Here are some ideas.

-   add a title

-   choose the one of the built in themes

-   change the axis titles

-   change the colors of the bar

::: answer
```{r, exercise_change_chart_appearance}
my_map <- ggplot(data = my_year, mapping = aes(x = year)) +
  geom_bar()

my_map +
  theme_classic() +
  labs(title = "CNC Los Angeles",  x = "Year",  y = "Observations") 

```
:::
::::

## Saving plots

Once we are happy with ourplot, we can save the plot.

Assign the plot to an object. Then run `ggsave()` to save our plot. The first argument we give is the path to the file we want to save, including the correct file extension. You can save as jpb, pdf, tiff, png. Next, we tell it the name of the plot object we want to save. We can also specify things like the width and height of the plot in inches.


```{r, save_plot}
#| eval: false

# create plot
finalplot <- myplot +
  theme_bw() +
  theme(axis.title = element_text(size = 14), 
        plot.title = element_text(face = "bold", size = 20)) +
  labs(title = "CNC Los Angeles",
       subtitle="Observations per year",
       x = "Year",
       y = "Observations")

# save plot
ggsave(filename = 'results/observations_per_year.jpg', plot = finalplot,  height = 6, width = 8)
```
