---
title: "Science and Coding concepts"
format: html
---

## Biology Concepts

### Urban Ecology

More content needed...

### Taxonomy

Wikipedia description of [taxonomy](https://en.wikipedia.org/wiki/Taxonomy_(biology))

> In biology, taxonomy (from Ancient Greek τάξις (taxis) 'arrangement' and -νομία (-nomia) 'method') is the scientific study of naming, defining (circumscribing) and classifying groups of biological organisms based on shared characteristics. Organisms are grouped into taxa (singular: taxon) and these groups are given a taxonomic rank; groups of a given rank can be aggregated to form a more inclusive group of higher rank, thus creating a taxonomic hierarchy. The principal ranks in modern use are domain, kingdom, phylum (division is sometimes used in botany in place of phylum), class, order, family, genus, and species.

The current system of taxonomy uses Latin names for the scientific name. Each scientific name can have multiple common names in multiple languages.

Here's iNaturalist taxonomy for Western Fence Lizard, the most common species in Los Angeles City Nature Challenge.

**Rank**: Latin scientific name (English common name)

-   **Kingdom**: Animalia (Animals)

-   **Phylum**: Chordata (Chordates)

-   **Class**: Reptilia (Reptiles)

-   **Order**: Squamata (Snakes and Lizards)

-   **Family**: Phrynosomatidae (Phrynosomatid Lizards)

-   **Genus**: Sceloporus (Spiny Lizards)

-   **Species**: Sceloporus occidentalis (Western Fence Lizard)

In theory, every iNaturalist observation represents a species. In practice, an iNaturalist observation will be assigned to a particular taxa name and taxon rank based on the qualitity of the recorded data, the expertise of the observer, the suggestion algorithms of iNaturalist, and the expertise of people who help identify observations.

## Coding Concepts

### Programming

The basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions. We write these instructions in the form of *code*, which is a common language that is understood by the computer and humans (after some practice). We call these instructions *commands*, and we tell the computer to follow the instructions by *running* (also called *executing*) the commands.

### File paths

When we reference other files from an R script, we need to give R precise instructions on where those files are. We do that using something called a **file path**.

There are two kinds of paths: **absolute** and **relative**. Absolute paths are specific to a particular computer, whereas relative paths are relative to a certain folder. For instance an absolute path is "/Users/username/Documents/coding/CNC-coding-workshop/data/cleaned/cnc-los-angeles-observations.csv", and relative path is "data/cleaned/cnc-los-angeles-observations.csv".

### Functions

Functions are predefined bits of code that automate more complicated actions. Arguments are values that we pass into a function, and the function does something to the values. A function can have one or more arguments. A function’s arguments come in a particular order, and if you put them in the correct order, you don’t need to name them. Executing a function is called *calling* or *running* the function.

R has built in functions. You can also write your own functions.

Let's create a function that saves a person's name and email.

```{r, create_function}

# create a function named save_contact. 1st argument is name, 2nd is email.

save_contact <- function(name, email){
  # prints the arguments
  cat('name:', name, ' email:', email)
  
  # TODO: check if name and email are valid
  # TODO: save the values to a database
  # TODO: return new contact
}

```

To use a function, we write the name of the function, and pass it some values.

```{r, calling_a_function}
# pass in the argument names and values in order
save_contact(name='Jane', email='jane@user.com')

# pass in values in order
save_contact('Jane', 'jane@user.com')

# pass in the argument names and values out of order
save_contact(email='jane@user.com', name='Jane')

# pass in values out of order
save_contact('jane@user.com', 'Jane')
```

Often times, a function will process the input and return a value. To save the function results so we can continue to work with it, use `<-` to assign the to value to an object.

```{r, assign_function}
new_contact <- save_contact('Jane', 'jane@user.com')
```

### R packages

R itself has many built-in functions, but we can access many more by loading other packages. **R packages** contain code, data, and documentation that people can download and install to add more functionality to R.

To install these packages, use `install.packages()` function from R. We pass in the package names as arguments. The name of the packages must be in quotes.

```{r, install_packages}
#| eval: false
# install one package
install.packages("readr")

# install multiple packages
install.packages(c("readr", "dplyr", "ggplot2", 
                   "sf", "lubridate", "mapview"))
```

R will connect to the internet and download packages from servers that have R packages. R will then install the packages on your computer. The console window will show you the progress of the installation process.

In order to use a package, use `library()` function from R. We pass in the name of the package as an argument. Do not use quotes around the package name when using `library()`.

These are R packages we will use in this workshop.

```{r load_all_libraries}
#| eval: false
library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(ggplot2) # create data visualizations
library(sf) # handle geospatial data
library(lubridate) # manipulate dates
library(mapview) # create interactive maps
```

Generally it is a good idea to list all the libraries that you will use in the script at the beginning of the script. You want to install the package to your computer once, and then load it with `library()` in each script where you need to use it.
