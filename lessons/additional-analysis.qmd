---
title: "Additional Analysis"
time: 10 min
---

In this section, we will show a few more examples of maps, charts, and code.

For more examples of charts and graphs visit [R Graph Gallery](https://r-graph-gallery.com).

`source(here('scripts/data_utils.R'))` loads a script file with custom functions created for this workshop.

```{r, load_packages}
#| error: false
#| warning: false
#| message: false

library(readr) # read and write tabular data
library(dplyr) # manipulate data
library(lubridate) # manipulate dates
library(ggplot2) # create data visualizations
library(sf) # handle vector geospatial data
library(mapview) # create interactive maps
library(basemaps) # add basemap
library(here) # file paths

source(here('scripts/data_utils.R'))
```

There is a bug with **sf** <https://github.com/r-spatial/sf/issues/1762>. This bit of code is fix for the bug.

```{r fix_sf_bug}
sf_use_s2(FALSE)
```

First, we need to read data from the CNC iNaturalist observation file.

```{r, read_data_from_csv}
#| message: false
inat_data <- read_csv(here('data/cleaned/cnc-los-angeles-observations.csv'))

```

Let's add a year column to iNaturalist data.

```{r, add_year_column}
inat_year <- inat_data %>% 
  mutate(year = year(observed_on)) 
```

Let's add a `geometry` column

```{r, select_columns}
inat_sf <- inat_data %>% 
  st_as_sf(coords = c("longitude", "latitude"),   crs = 4326) %>% 
  select(user_login, common_name, scientific_name, observed_on,  url, quality_grade)
```

## Dodged bar charts

To create side-by-side dodged bar charts, use `position=position_dodge()`

```{r create_dodged_bar_chart}
ggplot(data = inat_year , 
       mapping = aes(x = year, fill = quality_grade))  +
  geom_bar(position = position_dodge(preserve = 'single'))  
```

## Multiple line charts

If we want a chart with multiple lines, we need to create a data frame with three columns: one column x axis, one column for y axis, and one column for color.

```{r create_dataframe_for_multi_line_chart}
year_quality_count <- inat_data %>% 
  mutate(year = year(observed_on))  %>%
  count(year, quality_grade,  name='count') 

year_quality_count
```

```{r create_multi_line_chart}
ggplot(data = year_quality_count, 
       mapping = aes(x = year, y = count, color = quality_grade)) +
  geom_line()
```

## Multiple charts

Each `geom_` adds a layer to the chart. We can have multiple chart layers in one chart by having multiple `geom_`.

Let's create a bar and line chart that uses the same data and mapping.

```{r, create_dataframe_with_year_count}
inat_year_count <- inat_data %>% 
  mutate(year = year(observed_on)) %>%
  count(year, name='count')  

inat_year_count
```

```{r plot_column_line_for_year_count}
ggplot(data = inat_year_count,
       mapping = aes(x = year, y = count)) +
  geom_col() +
  geom_line()
 
```

Let's create a dodged bar and line chart that uses the different data and different mapping. Instead of putting the information inside `ggplot()`, we put information in each `geom_`.

```{r, bar_and_line_chart}
ggplot() +
  geom_bar(data = inat_year , 
       mapping = aes(x = year, fill = quality_grade),
       position = position_dodge(preserve = 'single')) +
  geom_line(data = inat_year_count, 
       mapping = aes(x = year, y = count))
 
```

## Adding labels and basemaps to ggplot map

Let's get the observation counts for neighborhoods around Exposition Park

```{r ge_neighborhoods}
la_neighborhoods_sf <- read_sf(here('data/raw/la_times_la_county_neighborhoods.json'))

```

Get Exposition Park neighborhood

```{r get_expo_park}
expo_park_sf <- la_neighborhoods_sf %>% 
  filter(name=='Exposition Park')

expo_park_sf
```

Get neighborhoods surrounding Exposition Park

```{r get_neighborhoods_around_expo_park}
expo_area_sf <- la_neighborhoods_sf[lengths(st_intersects(la_neighborhoods_sf, expo_park_sf)) > 0, ]

expo_area_sf <-  expo_area_sf %>%
  select(name)

expo_area_sf
```

Use custom function `add_inat_count_to_boundary_sf()` to count the number of iNaturalist observations per neighborhood.

```{r add_inat_count_to_neighborhoods}
expo_area_count_sf <- add_inat_count_to_boundary_sf(inat_sf, expo_area_sf, 'name')

expo_area_count_sf
```

Create map with labels that show counts per neighborhood.

```{r map_observations_per_expo_neighborhoods}

ggplot(expo_area_count_sf, aes(label=paste0(name,': ', observations_count))) +
  geom_sf() +
  geom_sf_label(fill = "white" )  

```

We can use basemaps package to add a basmap to ggplot maps.

Change crs to 3857 since basemaps package uses 3857.

```{r update_crs}
expo_area_count_sf <- st_transform(expo_area_count_sf,  crs = st_crs(3857))

```

Create map with labels that show counts and basemap. Use `basemap_gglayer()` and `scale_fill_identity()` to add a basemap. Use `aes(fill=alpha())` to make the fill for each neighborhood tranparent yellow.

```{r create_map_with_basemap}

ggplot(expo_area_count_sf) +
  basemap_gglayer(expo_area_count_sf) + 
  scale_fill_identity() +
  geom_sf( mapping=aes(fill=alpha("yellow", .05))) +
  geom_sf_label( mapping=aes(label = paste0(name, ': ',observations_count)) )  +
  theme_void()
```

## Compare iNaturalist observations per region to another value

We've provided a couple of maps with multiple boundaries that includes data values for each boundary. For instance the LA County Environmental Justice Screening Method has environmental impact scores for various areas in LA County.

Let's compare iNaturalist observations with EJSM Cumulative Impact Score for each area.

```{r read_ejsm_file}
ejsm_sf <- read_sf(here('data/raw/EJSM_Scores-shp/6cbc6914-690f-48ec-a54f-2649a8ddb321202041-1-139ir98.m1ys.shp'))

glimpse(ejsm_sf)

```

Create a choropleth map using `geom_sf()` that shows Cumulative Impact Score.

```{r create_map_of_regions}
ggplot(ejsm_sf, aes(fill = CIscore)) +
  geom_sf()

```

Check if the EJSM has the same CRS as the iNaturalist data.

```{r check_regions_inat_crs}
st_crs(ejsm_sf) == st_crs(inat_sf)
```

Update CRS

```{r update_crs_for_ejsm}
ejsm_sf <- st_transform(ejsm_sf,  crs = st_crs(inat_sf))

st_crs(ejsm_sf) == st_crs(inat_sf)
```

Use custom function `add_inat_count_to_boundary_sf()` to count the number of iNaturalist observations per region and add the count to `ejsm_sf`.

```{r create_dataframe_with_regions_inat_counts}
ejsm_inat_sf <- add_inat_count_to_boundary_sf(inat_sf, ejsm_sf, 'OBJECTID')

glimpse(ejsm_inat_sf)
```

Another way to show iNaturalist counts per region is to draw a symbol in each area, and base the size of the symbol on the iNaturalist counts.

`st_centroid` from **sf** generates a point at the center of each region. Instead of drawing a polygon, we draw a point that represents the center of the polygon

```{r create_centroids}
centroid_sf <- st_centroid(ejsm_inat_sf) %>%
  select(OBJECTID, observations_count)

glimpse(centroid_sf)
```

```{r create_static_centroid_sf}
ggplot() +
  geom_sf(data = centroid_sf) 

```

We can create a map that uses color to show CIscore per region, and uses circle size to show number iNaturalist observations per region.

We can use `aes(size=<column>)` to set the size of the circle based on `observations_count` column.

```{r create_static_ejsm_centroid_map}
ggplot() +
  geom_sf(data=ejsm_inat_sf, aes(fill = CIscore)) +
  geom_sf(data = centroid_sf, aes(size = observations_count)) 

```

We can use `cex` to set the size of the circle based on `observations_count` column.

```{r create_interactive_centroid_map}
#| eval: false
ejsm_inat_basic_sf <- ejsm_inat_sf %>% 
  select(CIscore)

mapview(ejsm_inat_basic_sf,  
        zcol = 'CIscore') +
  mapview(centroid_sf, cex="observations_count", 
          zcol="observations_count",legend=FALSE, col.regions='black')
```

![](images/mapview/creating_maps/create_interactive_centroid_map.png){fig-alt="create interactive centroid map"}

## Download images

We provide a custom function to download images for a data frame of iNaturalist observations.

Just make sure you follow the license terms for the observations. Here's a summary of the various [Creative Commons licenses](https://creativecommons.org/share-your-work/cclicenses/).

```{r examine_license}
table(inat_data$license)
```

The observations are ordered from oldest date to newest date. Use `filter()` to select the observation you want. We can use slice to limit the number observation.

Use `slice(start:end)` to get observations from start row number to end row number. In this case we are getting the first five Western fence lizard observations with CCO license.

```{r select_observations_with_slice}
my_inat2 <- inat_data %>%
  filter(common_name == 'Western Fence Lizard') %>%
  filter(license == 'CC0') %>%
  slice(1:5)

table(my_inat2$observed_on)
```

If you want to get a specified number of randomly selected rows, use `slice_sample(n = <number>)`. In this case we are getting five random Western fence lizard observations with CCO license.

```{r select_observations_with_slice_sample}
my_inat <- inat_data %>%
  filter(common_name == 'Western Fence Lizard') %>%
  filter(license == 'CC0') %>%
  slice_sample(n=5)

table(my_inat$observed_on)
```

Once we have the observations we want, call custom function `download_inaturalist_images()` to download the images for the observations. The images are saved in the results directory. A new directory will be created for each `scientific_name`. The image name will contain the scientific name, observation id, username and license.

```{r download_images}
#| eval: false
download_inaturalist_images(my_inat)
```
